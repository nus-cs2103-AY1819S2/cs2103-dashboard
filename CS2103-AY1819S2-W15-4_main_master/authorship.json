[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "\u003d Scheduler App"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S2-W15-4/main[image:https://travis-ci.org/CS2103-AY1819S2-W15-4/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/cs2103ez/main[image:https://ci.appveyor.com/api/projects/status/i0xblq9iwnmrgdai?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S2-W15-4/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S2-W15-4/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "https://www.codacy.com/app/cs2103ez/main?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dCS2103-AY1819S2-W15-4/main\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "* This is a desktop Scheduler application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface). It is meant for army personnel to use to schedule and assign guard duties to personnel."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "* Duty can be assigned for the upcoming months and soldiers can see their duties assigned to them as well as perform various different actions."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* This will save a lot of time for commanders planning duties as this will automatically allocate duties and make the process completely automated."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* Adapted from the https://github.com/se-edu/addressbook-level4[addressbook-level4] project created by the https://github.com/se-edu[se-edu initiative]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Valatheking": 5,
      "-": 36
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "ï»¿"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Duty Planner - Developer Guide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S2-W15-4/main"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "By: `CS2103 W15-4` Â Â Â Â  Since: `Jun 2016` Â Â Â Â  Licence: `MIT`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "* stores the Duty Personnel data."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "* stores the implementation of the Calendar and DutyDates."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "* stores the implementation of a Duty Personnel."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Duty Package"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "*DutyCalendar and other relevant classes*"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "The class that contains all the information about duties is `DutyCalendar` which has been included as an attribute within `PersonnelDatabase`. `DutyCalendar` contains two `DutyMonth` objects, named `currentMonth` and `nextMonth` respectively. It implements the following operations:"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "* `DutyCalendar#rollover()` -- replaces `currentMonth` with `nextMonth`, run duty allocation algorithm on `nextMonth` automatically to allocate duties based on the current state of the month such as blocked dates of each personnel. New empty `nextMonth` object will be instantiated."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "These operation are to be exposed in the `Model` interface as `Model#rolloverDutyCalendar()` *for v1.3*."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "Each `DutyMonth` class will contain the same number of `Duty` objects as the number of days in the month. For example, if it is January, it should contain exactly 31 `Duty` classes, and any less or more will raise an Exception."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027DutyMonth\u0027 class contains the following operations:"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "* `DutyMonth#addBlockedDay()` -- method for block dates command to use. Enables a particular Person to block a particular day"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "* `DutyMonth#schedule()` -- schedules duties. Details explained below."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "* `DutyMonth#generateAllDuties()` -- based on the settings, this method generates duties for the particular month with customised capacity and number of points awarded"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "Each `Duty` class should contain the details such as the day index, list of `Person`s in duty that day and a list of `Person`s who have blocked that particular date. More details are to be confirm *by v1.3*."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "`Duty` class contains the following operation:"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "* `Duty#getPersonsString()` -- method for the view command. Returns the string of all the personnels allocated to that particular duty, minus the NRIC of the person passed as the parameter"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "`DutySettings` class enables the users to customise the number of points and manpower requied for each duty day"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "`DutyStorage` class stores the accumulated points of each person."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "*Scheduling Algorithm*"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "* To ensure a system where duties are allocated fairly to the people:"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "** We make use of the point system in which each individual can earn points by doing duties. The points awarded to servicemen are cumulative, thus the points awarded are carried over to the next month. Points of each person is stored in DutyStorage."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "** Each duty is worth a certain number of points and a person gains that amount of points by doing that duty. The points allocated to each duty is retrieved from DutySettings."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "** Before the scheduling command is called, each person has the opportunity to indicate the days in which they are unavailable to do duty."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "* Appoach"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "** A priority queue of all people based on their accumulated points with the lowest at the head of the queue."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "** A list of duties will be generated and sorted by their points allocated in descending order."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "** Starting from the top of the list of duties, the priority queue will be continuously polled to look for the instances of compatible duty-person pairing. For a duty-person pair to be compatible, it requries the duty to not contain the person and the person to not block the day of the duty. Once a duty is completedly filled, it moves on to the next duty in the list. The person will be added back into the priority queue with an adjusted duty point, thus most likely pushed to the back of the queue, allowing others to be assigned duties."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "** Ideally, people with lower accumulated points will be assigned to duties with higher points allocated. This allows the scheduler to automatically balance the points of each person by the end of the month."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: need for DutyDate classes"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** `Duty` class also plays the role of `DutyDate` class"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: one less layer for simplicity"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: less flexible for extension of the project, hard to ensure that each `DutyMonth` contains the correct number of `Duty` objects"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** create a separate `DutyDate` class that contains `Duty` as an attribute"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy indexing and reference for UI and other purposes"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: `DutyDate` class does not have other roles, can be redundant"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "// tag::login[]"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003d\u003d\u003d Logging in and account authority feature"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "There are currently 2 User Types found in commons.core.index: UserType.ADMIN and UserType.General. Each NRIC account will be assigned to one of these user types that correspond to different authorities."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "Note that Admin type user accounts are not only have access to more commands, but some commands (such as edit) have more functionalities as well. The Command class implements AdminCommand and GeneralCommand interfaces."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "Upon logging in to the correct account, the CommandBox will be initialized with the correct user type. The execute Command in logic will decide to initialize the commands as either AdminCommand or GeneralCommand,"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "to ensure the user does not have access to the wrong authority level."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: handling logging in and UserType"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "* **Alternative 1 (current choice):** LogIn box handles logic of finding account, MainWindow has a User field."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "** Pros: one less layer for simplicity"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "** Cons: UI best not to handle logic, User Type might be changed, which could be bad for administrator security."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "* **Alternative 2:** Logging in is like a command that is handled by logic, after which Main Window is initialized with the UserType and NRIC."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "** Pros: Logic operations now handled by Logic class, UserType and NRIC can be final attribute to make sure no one gets the wrong account/ permission for each window."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "** Cons: Command from logging in should be different from \u0027command\u0027 class to prevent undos or redos from happening."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "// end::login[]"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/JsonAddressBookStorage.java[`JsonAddressBookStorage`] class."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `data/addressbook.json` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `JsonAdaptedPerson` class"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/JsonAdaptedPerson.java[`JsonAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new JSON field for `Remark`."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "mechome"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.json`, `typicalPersonsPersonnelDatabase.json`, `validAddressBook.json` etc., such that the JSON tests will not fail due to a missing `remark` field."
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "|`* * *` |Administrator |see Admin Help |refer to instructions specific to the administrator privileges"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "|`* * *` |Administrator |choose 2 users to swap duties |allow them to have their desired duty slot"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "|`* * *` |user |log in |access my information"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |add a new person |"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |delete a person |remove entries that I no longer need"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |find a person by name |locate details of persons without having to go through the entire list"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "|`* * *` |user |request an administrator to swap duty with another person |get my desired duty"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "|`*` |user with many persons in the address book |sort persons by name |locate a person easily"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Delete person"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "2.  AddressBook shows a list of persons"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to delete a specific person in the list"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "4.  AddressBook deletes the person"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 1,
      "yjpan47": 4,
      "-": 999,
      "mechome": 1,
      "exactlyprecise": 30
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Duty Planner - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/cs2103-ay1819s2-w15-4/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `CS2103 W15-4`      Since: `Feb 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mechome"
        },
        "content": "MINDEF Duty Planner is a platform to assist military units in the SAF in the assignment of daily duties amongst the servicemen. The application is optimized for those who prefer to work with a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). The software is designed to automate the process of fairly assigning duties to available servicemen for an entire month. It also enables servicemen to conveniently indicate the days they are unavailable for duty. It seeks to fairly distribute duties by taking into account the varying importance of each duty (e.g. Sunday duties are worth more than weekday duties)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ".  Log in into the system as an admin or a general user. NRIC corresponds to the username. Both the NRIC and the password are case-sensitive."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "* For admin account: NRIC is Admin, password is Admin"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "* For general account: NRIC is the user\u0027s NRIC, password is NRIC by default which can be changed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* *`list`* : lists all contacts"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "* **`add`**`n/John Doe nr/S9012345N p/98765432 c/Echo s/2 r/CFC t/injured`  : adds a personnel named `John Doe` to the Personnel Database."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* **`delete`**`3` : deletes the 3rd contact shown in the current list"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ".  Some commands can only be accessed by Admin type accounts and some by General type accounts."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Features"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "// tag::login[]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003d\u003d\u003d Log in"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "****"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "* For Practical Exam: You may use an administrator account with Username: Admin, and Password: Admin"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "* For Practical Exam: In personnel list, the password of the users will be listed for your convenience."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "* If you close the login window, you are still able to view the personnel list and the calendar duty list. However, you will not be able to use any commands."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "****"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "Logs user into account +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "NRIC and passwords are case-sensitive. +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "Enter in NRIC and password into the top and bottom text areas respectively, press enter. +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "****"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "* Can only be done in the login box at the start of the program."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "* By default, if your password has not been changed by you or an Admin, the password is your NRIC."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "* Contact an administrator if you have trouble logging in."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "* If you need to change your account, exit the program, then log back into a different account."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "* There are 2 types of accounts: General type accounts, and Admin (or Administrator) type accounts."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "* Admin accounts have access to more commands, or more functionalities for some kind of commands."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "****"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "// end::login[]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mechome"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `login nr/NRIC`, `NRIC` is a parameter which can be used as `add n/S01234567Z`."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `â¦`â after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "* An Admin and a User may have different formats for the same command"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003d\u003d\u003d Features for all users"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Lists out a list of commands \u0026 instructions +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003d\u003d\u003d\u003d List all the users: `list`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "Lists out all users with their details. +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003d\u003d\u003d\u003d View all duties for current month: `viewCurrent`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "Brings up calendar view, with all duties for the current month. +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "Format: `viewCurrent`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003d\u003d\u003d\u003d View all duties for enxt month: `viewNext`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "Brings up calendar view, with all duties for the next month. +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "Format: `viewNext`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "\u003d\u003d\u003d\u003d View duties assigned to user : `view`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "The user can see their details about their own duties assigned to them and their upcoming duties ranked by recency. +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `view`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "\u003d\u003d\u003d\u003d View duties assigned to other users : `view`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "The user can see their details about their own duties assigned to other users. +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "Format: `view NRIC`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "* `view S9012345L`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003d\u003d\u003d\u003d View roster : `roster` `Not implemented yet`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "The user can see the full duty rosters for particular months. +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `roster MONTH`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "* `roster February`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mechome"
        },
        "content": "\u003d\u003d\u003d\u003d Block dates : `bd`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mechome"
        },
        "content": "The user can block dates and set which dates they are unavailable to duties for the upcoming month. A user can block up to 15 days. +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mechome"
        },
        "content": "Format: `bd DATE DATE DATE ...`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mechome"
        },
        "content": "* `bd 3 6 15 21 30`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mechome"
        },
        "content": "\u003d\u003d\u003d\u003d View blocked dates : `block` (Coming in v2.0)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mechome"
        },
        "content": "The user can view the dates they have blocked for the upcoming month. +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mechome"
        },
        "content": "Format: `block`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003d\u003d\u003d\u003d Make a swap request with another user : `swap`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "The user can request for a duty swap with another user. This will be subject to the agreement of the other user and approval of the admin (i.e. commander). +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "The other user and admin will be notified upon login and they will be prompted to accept or decline the request. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "Format: `swap ad/CURRENTDUTYDATE rd/DESIREDDUTYDATE"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "* `swap ad/14022019 rd/21022019 t/Please help a bro out!`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003d\u003d\u003d\u003d Locating persons by name: `find`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "Finds persons whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* `find John` +"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy Tim John` +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "Returns any person having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003d\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003d\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Restores the address book to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Undoable commands: those commands that modify the address book\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003d\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003d\u003d\u003d\u003d Exit : `exit`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. User will be logged out automatically. +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003d\u003d\u003d General Features"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "// tag::editGeneral[]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003d\u003d\u003d\u003d Edit own details : `edit`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "Edits user\u0027s own details. Can edit one or more fields. +"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "Format: `edit INDEX [c/COMPANY] [s/SECTION] [r/RANK] [n/NAME] [p/PHONE] [t/TAG] [pw/PASSWORD]`"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "****"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "****"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "* `edit p/84523546 r/CPL +"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "Edits the phone number and rank of the user to be `84523546` and `CPL` respectively."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "* `edit c/Hotel t/ pw/pass` +"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "Edits the company of the user to be `Hotel`, clears all existing tags, and changes password to \u0027pass\u0027."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "// end::editGeneral[]"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003d\u003d\u003d Admin Features"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "// tag::add[]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a user : `add`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "mechome"
        },
        "content": "Add a user to the system with the corresponding NRIC, password, company, section, rank, name and contact number. +"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "Format: `add nr/NRIC c/COMPANY s/SECTION r/RANK n/NAME p/PHONE [t/TAG]`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "****"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "* By default, the user will be a General type account, and the password will be the NRIC."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "* Password and account type can be changed using the `edit` command."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "****"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "// end::add[]"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a person : `delete`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "Deletes the specified person from the duty planner. +"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "****"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "****"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "Deletes the 2nd person in the duty planner personnel list."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "Deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "Clears all entries from the duty planner. +"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "// tag::editAdmin[]"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003d\u003d\u003d\u003d Edit any userâs details : `edit`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "Edits an existing userâs details in the personnel list."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "Format: `edit INDEX [nr/NRIC] [c/COMPANY] [s/SECTION] [r/RANK] [n/NAME] [p/PHONE] [t/TAG] [pw/PASSWORD] [u/A or G]`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "****"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "* For account type field specified by `u/`, A corresponds to an Admin account, G corresponds to a general account."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "****"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "* `edit 2 p/84523546 r/CPL u/A` +"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "Edits the phone number and rank of the 2nd person to be `84523546` and `CPL` respectively, and grants the person\u0027s account administrator privileges."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "* `edit 1 c/Hotel t/ pw/pass` +"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "Edits the company of the 1st person to be `Hotel`, clears all existing tags, and changes passworrd to \u0027pass\u0027."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "// end::editAdmin[]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003d\u003d\u003d\u003d Scheduling duties : `schedule`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "This command invokes the scheduling algorithm for the upcoming month. It generates a viable duty schedule roster where each duty slot for the upcoming month will be filled by the people currently in the database. ++"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ".In order to ensure fair scheduling system,"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "mechome"
        },
        "content": ". We introduce a point system to each individual such that a servicemen can earn points by doing duties. The points awarded to servicemen are cumulative, thus the points awarded are carried over to the next month. +"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ". Each duty is worth a certain number of points and a person gains that amount of points by doing that duty. For example, if all Sunday duties are worth 4 points, a servicemen who is assigned a Sunday duty will by awarded 4 points. +"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ". Before the scheduling command is called, each person has the opportunity to indicate the days in which they are unavailable to do duty. (See 3.9 block command)  +"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "The algorithm is optimized such that persons with low points will be allocated to duties with high points. It automatically attempts to balance out the points of each person by the end of the month. +"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "The duty schedule generated by the schedule command is not deterministic, calling schedule command multiple times generates different duty allocation. +"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "Calling the schedule command merely generates a viable shedule, but does not finalize the schedule (i.e. points awarded to each person is yet to be added). Schedule generated is also not deterministic, calling schedule command multiple times generates different duty allocation. Thus, the admin can call schedule command continuously until a satisfactory schedule is produced. To finalize the schedule, use the confirm command. (See 4.8 confirm schedule) +"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "Format: `schedule`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003d\u003d\u003d\u003d Confirm a Schedule : `confirm`"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "Confirm and finalize the last generated duty schedule (from the schedule command) for the upcoming month. +"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "Subsequent attempts to call schedule command will not result in any new duty allocation produced. +"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "Format: `confirm`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "Duty roster personnel list and the duties allocated are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: What if I want to swap my duty with another person? +"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "*A*: Use \"swap\" command to request a swap. If you receive no updates about it, contact your administrator."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "mechome"
        },
        "content": "*Q*: What is the main feature of this app? +"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "*A*: The main feature is the automated scheduling algorithm, which significantly minimizes the amount of work that the admin has to do."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "mechome"
        },
        "content": "*Q*: What is my username and password? +"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "mechome"
        },
        "content": "*A*: Your username is by default your NRIC, used so prevalently in the SAF. +"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "Your password is also your NRIC by default, unless you or your administrator changed it. you can use the \u0027edit\u0027 command to edit your password later on. +"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "*Q*: What if I forgot my password? +"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "*A*: Contact your administrator for help."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "mechome"
        },
        "content": "*Q*: What should I do if I need help with the app? +"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "*A*: You can enter \u0027help\u0027 in the command line, or press Help \u003e Help, or simply press F1. This will open up the User Guide in a new window."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003d\u003d\u003d All Users"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "* *Viewing help* : `help` +"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "* *Viewing own duties* : `view` +"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "* *Viewing other\u0027s duties* : `view NRIC` +"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "mechome"
        },
        "content": "* *Blocking dates* : `bd DATE DATE DATE â¦` +"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "* *Make swap request* : `swap` +"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "* *List all the users* : `list` +"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "* *Locate person by name* : `find` +"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "* *List entered commands* : `history` +"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "* *Undo command* : `undo` +"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "* *Redo command* : `redo` +"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "* *Exit* : `exit` +"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003d\u003d\u003d General accounts"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "* *Edit own info* : `edit [c/COMPANY] [s/SECTION] [r/RANK] [n/NAME] [p/PHONE] [t/TAG] [pw/PASSWORD]` +"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003d\u003d\u003d Admin accounts"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "* *Add a user* : `add nr/NRIC c/COMPANY s/SECTION r/RANK n/NAME p/PHONE [t/TAG]` +"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "* *Edit any user* : `edit INDEX [nr/NRIC] [c/COMPANY] [s/SECTION] [r/RANK] [n/NAME] [p/PHONE] [t/TAG] [pw/PASSWORD] [u/A or G]` +"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "* *Delete a user* : `delete INDEX` +"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "* *Scheduling duties* : `schedule` +"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "* *Confirm schedule* : `confirm` +"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "* *Clear entries* : `clear` +"
      }
    ],
    "authorContributionMap": {
      "yjpan47": 18,
      "dreampursuer95": 19,
      "-": 186,
      "mechome": 17,
      "exactlyprecise": 131
    }
  },
  {
    "path": "docs/team/exactlyprecise.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003d Ng Wei Le - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003d\u003d PROJECT: MINDEF Duty Planner"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "Duty Planner is a desktop address book application used foradding MINDEF personnel, and assigning and handling duties for the personnel involed. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "* *Major enhancement*: added *accounts for different users, and other user functionalities*."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "** What it does: Different personnel stored in the Duty Planner can log in. Accounts have 2 types: General and Admin, which can act differently for some commands. Some commands target the specific user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "** Justification: This feature allows for commands that target the specific user (like swap duty, or edit own details). It also allows for commands like delete to be allowed for admins but not general users."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "** Highlights: The enhancement affects the Person model, and existing and future commands that may be added in the future.  Many design alternatives were considered, and the implementation was difficult since it affects current commands, models and test cases."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "* *Minor enhancement*: edited the edit command to allow user to edit his own information (except NRIC and account type)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "* *Code contributed*: [https://github.com/exactlyprecise/main/tree/master/src/main/java/seedu/address/logic/commands, https://github.com/exactlyprecise/main/blob/master/src/main/java/seedu/address/storage/JsonAdaptedPerson.java, https://github.com/exactlyprecise/main/blob/master/src/main/java/seedu/address/logic/Logic.java, https://github.com/exactlyprecise/main/blob/master/src/main/java/seedu/address/logic/LogicManager.java, https://github.com/exactlyprecise/main/tree/master/src/main/java/seedu/address/logic/parser, https://github.com/exactlyprecise/main/tree/master/src/main/java/seedu/address/model/person/Person,java, https://github.com/exactlyprecise/main/blob/master/src/main/java/seedu/address/model/person/Password.java, https://github.com/exactlyprecise/main/blob/master/src/main/java/seedu/address/model/Model.java, https://github.com/exactlyprecise/main/blob/master/src/main/java/seedu/address/model/ModelManager.java, https://github.com/exactlyprecise/main/blob/master/src/main/java/seedu/address/ui/UiManager.java, https://github.com/exactlyprecise/main/blob/master/src/main/java/seedu/address/ui/CalendarView.java, https://github.com/exactlyprecise/main/blob/master/src/main/java/seedu/address/ui/CommandBox.java, https://github.com/exactlyprecise/main/blob/master/src/main/java/seedu/address/ui/LoginBox.java, https://github.com/exactlyprecise/main/blob/master/src/main/java/seedu/address/ui/MainWindow.java, https://github.com/exactlyprecise/main/blob/master/src/main/java/seedu/address/ui/NricUserPair.java, https://github.com/exactlyprecise/main/blob/master/src/main/java/seedu/address/ui/PersonCard.java, https://github.com/exactlyprecise/main/blob/master/src/main/java/seedu/address/ui/Ui.java, https://github.com/exactlyprecise/main/blob/master/src/main/java/seedu/address/ui/UiManager.java]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "*** Helped in creating JAR file for team for version 1.3"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "*** Helped other members to write CalendarView.fxml and CalendarView.java"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "*** Helped group 15-3 in their UI component:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "https://github.com/CS2103-AY1819S2-W15-3/main/blob/master/src/main/resources/view/AnalyticsChart.fxml"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "include::../UserGuide.adoc[tag\u003dlogin]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "include::../UserGuide.adoc[tag\u003dadd]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "include::../UserGuide.adoc[tag\u003deditGeneral]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "include::../UserGuide.adoc[tag\u003deditAdmin]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dlogin]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "-": 41,
      "exactlyprecise": 24
    }
  },
  {
    "path": "docs/team/mechome.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mechome"
        },
        "content": "\u003d Cho Ming En - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mechome"
        },
        "content": "\u003d\u003d PROJECT: MINDEF Duty Planner"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mechome"
        },
        "content": "MINDEF Duty Planner is a platform to assist military units in the SAF in the assignment of daily duties amongst the servicemen. The application is optimized for those who prefer to work with a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). The software is designed to automate the process of fairly assigning duties to available servicemen for an entire month. It also enables servicemen to conveniently indicate the days they are unavailable for duty. It seeks to fairly distribute duties by taking into account the varying importance of each duty (e.g. Sunday duties are worth more than weekday duties)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mechome"
        },
        "content": "* *Major enhancement*: Added *the ability to request swapping of duties (using the \u0027swap\u0027 command), respond to swap requests (using the \u0027acceptswap\u0027 command) and approve or reject swap requests.*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mechome"
        },
        "content": "** What it does: allows a user who is a particular person in the personnel database to request for a swap of his duty with another person\u0027s duty. Both duties have to be in the current month or the next month."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mechome"
        },
        "content": "** Justification: This feature is very useful for a serviceman who is suddenly unavailable to perform guard duty due to ad hoc reasons. He can broadcast his swap request onto the app in the large panel on the bottom right and other servicemen can view his request and respond if they are willing and able to swap with him. After that, an admin user will approve or reject the swap."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mechome"
        },
        "content": "** Highlights: This functionality is very convenient for the users because it requires no verbal communication at all and the process is completely streamlined to be performed on the app. Physical or verbal communication is only necessary if there are disputes. This enhancement involves changes in logic (commands), UI (browser panel), storage (storing of requests) and model (structure of requests). Implementing this feature required understanding how and when saving to a json file happens so as to trigger the save event when needed. It was also difficult to convert the browser panel from an object that displays web pages to a text object, having no prior experience in GUI."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mechome"
        },
        "content": "** Credits: _Valavan for the idea of swap requests and my team for helping me to develop the idea_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mechome"
        },
        "content": "* *Minor enhancement*: Converted the Person class to one suitable for the duty planner. This means removing the email and address fields (which are classes in themselves) and adding in Company, Section, Rank and NRIC. This was very time-consuming, especially with having to adapt all the tests involving Person objects with no exception. We could theoretically have done away with the individual classes for each field but I decided to preserve the existing structure to reduce complications after analysis of the trade-offs."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mechome"
        },
        "content": "* *Minor enhancement*: Morphed the browser panel to display the list of open swap requests (i.e swap requests that are awaiting response) instead of a website."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mechome"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dmechome[Code]]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mechome"
        },
        "content": "*** Curated Issues Tracker"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mechome"
        },
        "content": "*** Renamed the internal address book class to personnel database to reflect our product differentiation: https://github.com/CS2103-AY1819S2-W15-4/main/pull/33[#33], https://github.com/CS2103-AY1819S2-W15-4/main/pull/70[#70], https://github.com/CS2103-AY1819S2-W15-4/main/pull/71[#71]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mechome"
        },
        "content": "*** Added and edited tests for existing features (example: JsonAdaptedPersonTest.java, see https://github.com/CS2103-AY1819S2-W15-4/main/pull/34[#34], https://github.com/CS2103-AY1819S2-W15-4/main/pull/70[#70], https://github.com/CS2103-AY1819S2-W15-4/main/pull/71[#71])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mechome"
        },
        "content": "*** Edited the User Guide to reflect our product: https://github.com/CS2103-AY1819S2-W15-4/main/pull/33[#33], https://github.com/CS2103-AY1819S2-W15-4/main/pull/71[#71]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mechome"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com/CS2103-AY1819S2-W13-3/main/issues/174[1], https://github.com/CS2103-AY1819S2-W13-3/main/issues/164[2], https://github.com/CS2103-AY1819S2-W13-3/main/issues/170[3], https://github.com/CS2103-AY1819S2-W13-3/main/issues/181[4])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Valatheking": 3,
      "-": 39,
      "mechome": 17
    }
  },
  {
    "path": "docs/team/valatheking.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "\u003d Valavan Rajarajan - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: Duty Planner"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "Duty Planner is a desktop application used to organise and plan duties for army personnel with various functions for commanders as well as duty personnel. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10kLoC"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "* *Major enhancement*: Added Block Date Command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "** What it does: Allows the user to block dates of duty for the upcoming month allowing them not to be scheduled for duties on those particular days"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "** Justification: This features allows personnel to have some flexibility on the days the do duties and to ensure that they can attend other events or not do duties when they are busy"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "** Highlights: This enhancement affected the scheduling algorithm and the algorithm and Duty system had to be modified to allow personnel to block Dates"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "** Credits: Thanks to my other group members for helping to figure out the block date command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "* *Minor enhancement*: Added a command to view blocked Dates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#search\u003dvalatheking\u0026sort\u003ddisplayName\u0026since\u003d2019-02-10\u0026until\u003d2019-04-03\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026repoSort\u003dtrue[Code]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed milestones and issue tracker for the project"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Edited the person class with NRIC and Rank (Pull requests https://github.com/CS2103-AY1819S2-W15-4/main/pull/31[#31], )"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide to modify it to a Duty Planner"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments):"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated Codacy and Appveyor to the team repo"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 9,
      "-": 43
    }
  },
  {
    "path": "docs/team/yjpan47.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "\u003d Pan Yongjing - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "MINDEF Duty Planner is a desktop application used to help military units in the Singapore Armed Forces organise and plan monthly duties for their servicemen. It has various features and functions for administator (i.e. commander) as well as the duty personnel (i.e. servicemen). The user interacts with the application using a Command Line Interface (CLI) with a Graphic User Interface (GUI) created with JavaFX. It is written in Java, and has about 10kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "The Duty Planner is modified and upgraded from SE-EDU Address Book 4."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "* *Major enhancement*: Creation of the duty package module"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "** What it does: A duty package with classes (i.e. Duty, DutyMonth, DutySettings, DutyStorage) in charge of setting up the duties of a month and assigning them to person, as well as contain vital functions needed for the duty features to be implemented."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "*** Duty : A duty class that characterizes the attributes of a duty including the exact date, points awarded, manpower needed and a list of person eventually being assigned to that duty."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "*** DutyMonth : Represents a month in the calendar and is the main driver class behind the scheduling of duties. It initializes all duties and assigns them to person. Stores vital information such as the list of duties and the blocked dates of each person."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "*** DutySettings : Classfied as a UserPref which contains information about the manpower needs and points assigned to duties from each day of the week. Enable modification to the the mnapower needs and points assigned to each duty based on the day of the week."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "*** DutyStorage : Accumulates and stores the duty points earned by all the persons."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "** Justification: The duty package provides the backend support for all duty-related features and commands."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "** Highlights: The package contain functions assessed by many commands (i.e. BlockDateCommmand, ViewCommand, ScheduleCommand, DutySettingCommand)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: {Fellow teammate Yoon Ki Hyun for working together on the DutyMonth and Duty}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "* *Major enhancement*: Schedule and confirm command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "** What it does: The schedule command that invokes the schedule algorithm to generate a viable duty allocation for the upcoming month. The confirm command finalizes the schedule and updates the existing duty points of each person."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "** Justification: Enable duties to be scheduled to persons."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "** Highlight: Need to ensure that the command references the correct dutyMonth and duty points of each person do not get updated until confirm command is called."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "* *Major enhancement*: Settings command"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "** What it does: Enable the administrator to adjust the desired manpower for duties based on the day of the week. Eanble the administrator to adjust the points to be awarded for doing duties based on the daty of the week."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "** Justification: Allows the user to have flexibility to change the duty allocation system."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "** Highlight: Need to ensure that the scheduling algorithm is compatible with adjustable duty points and duty capacities."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "* *Minor enhancement*: DateUtil common"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "** What it does: A class that contains static methods to assist in validation of date parameters and other date related functions."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "** Justification: Contains commonly used functionalities that aids the developers and prevent duplicate code."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "** https://github.com/yjpan47/main/blob/master/src/main/java/seedu/address/model/duty/Duty.java"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "** https://github.com/yjpan47/main/blob/master/src/main/java/seedu/address/model/duty/DutyMonth.java"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "** https://github.com/yjpan47/main/blob/master/src/main/java/seedu/address/model/duty/DutySettings.java"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "** https://github.com/yjpan47/main/blob/master/src/main/java/seedu/address/model/duty/DutyStorage.java"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "** https://github.com/yjpan47/main/blob/master/src/main/java/seedu/address/model/DutyCalendar.java"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "** https://github.com/yjpan47/main/blob/master/src/main/java/seedu/address/commons/util/DateUtil.java"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "** https://github.com/yjpan47/main/blob/master/src/main/java/seedu/address/logic/commands/ScheduleCommand.java"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "** https://github.com/yjpan47/main/blob/master/src/main/java/seedu/address/logic/commands/ConfirmScheduleCommand.java"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "** https://github.com/yjpan47/main/blob/master/src/main/java/seedu/address/logic/commands/DutySettingsCommand.java"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "** https://github.com/yjpan47/main/blob/master/src/main/java/seedu/address/logic/parser/DutySettingsCommandParser.java"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "** https://github.com/yjpan47/main/blob/master/src/main/java/seedu/address/model/UserPrefs.java"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "** https://github.com/yjpan47/main/blob/master/src/main/java/seedu/address/model/PersonnelDatabase.java"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Project management:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "** Managed releases `v1.1`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* Documentation:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "** Major updates to the User Guide: +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "https://github.com/yjpan47/main/blob/master/docs/UserGuide.adoc"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "** Updated developer guide to include explanation of the schedule algorithm: +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "https://github.com/yjpan47/main/blob/master/docs/DeveloperGuide.adoc"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Scheduling duties : `schedule`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "This command invokes the scheduling algorithm for the upcoming month. It generates a viable duty schedule roster where each duty slot for the upcoming month will be filled by the people currently in the database. ++"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".In order to ensure fair scheduling system,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ". We introduce a point system to each individual such that a servivemen can earn points by doing duties. The points awarded to servicemen are cumulative, thus the points awarded are carried over to the next month. +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ". Each duty is worth a certain number of points and a person gains that amount of points by doing that duty. For example, if all Sunday duties are worth 4 points, a servicemen who is assigned a Sunday duty will by awarded 4 points. +"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ". Before the scheduling command is called, each person has the opportunity to indicate the days in which they are unavailable to do duty. (See 3.9 block command)  +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The algorithm is optimized such that persons with low points will be allocated to duties with high points. It automatically attempts to balance out the points of each person by the end of the month. +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The duty schedule generated by the schedule command is not deterministic, calling schedule command multiple times generates different duty allocation. +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Calling the schedule command merely generates a viable shedule, but does not finalize the schedule (i.e. points awarded to each person is yet to be added). Schedule generated is also not deterministic, calling schedule command multiple times generates different duty allocation. Thus, the admin can call schedule command continuously until a satisfactory schedule is produced. To finalize the schedule, use the confirm command. (See 4.8 confirm schedule) +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `schedule`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Confirm a Schedule : `confirm`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Confirm and finalize the last generated duty schedule (from the schedule command) for the upcoming month. +"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Subsequent attempts to call schedule command will not result in any new duty allocation produced. +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `confirm`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "*Algorithm*"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "* Each Person is assigned a duty score that is initialized at a fixed value. Each Person can earn duty points by covering"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "duties. Weekday duties are worth 2 points; Friday duties are worth 3 points; Weekend duties are worth 4 points."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* Preparation of data"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "1. The list of persons will be sorted according to their points in ascending order."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "2. The list of duties will be sorted in the order Weekend \u003e\u003e Friday \u003e\u003e Weekday."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "3. Person with lower duty points will be assigned to weekend duties"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "* Assignment"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "1. Starting from the top of the duties list, the first person from the persons list who is available (didn\u0027t block out the date) for that day will be assigned"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "the duty. This ensures that lower score persons are given priority for weekend duties."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "2. The algorithm ensure that the duty score of the persons will be normalized as much as possible at the end of each month."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "---"
      }
    ],
    "authorContributionMap": {
      "yjpan47": 39,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.PersonnelDatabase;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import seedu.address.model.ReadOnlyPersonnelDatabase;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.storage.JsonPersonnelDatabaseStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import seedu.address.storage.PersonnelDatabaseStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 2, 1, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mechome"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing PersonnelDatabase ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mechome"
        },
        "content": "        PersonnelDatabaseStorage personnelDatabaseStorage \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mechome"
        },
        "content": "                new JsonPersonnelDatabaseStorage(userPrefs.getPersonnelDatabaseFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mechome"
        },
        "content": "        storage \u003d new StorageManager(personnelDatabaseStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Optional\u003cReadOnlyPersonnelDatabase\u003e personnelDatabaseOptional;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mechome"
        },
        "content": "        ReadOnlyPersonnelDatabase initialData;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mechome"
        },
        "content": "            personnelDatabaseOptional \u003d storage.readPersonnelDatabase();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mechome"
        },
        "content": "            if (!personnelDatabaseOptional.isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mechome"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample PersonnelDatabase\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mechome"
        },
        "content": "            initialData \u003d personnelDatabaseOptional.orElseGet(SampleDataUtil::getSamplePersonnelDatabase);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be \""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "                    + \"starting with an empty PersonnelDatabase and Calendar\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mechome"
        },
        "content": "            initialData \u003d new PersonnelDatabase();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "                    + \"starting with an empty PersonnelDatabase and Calendar\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mechome"
        },
        "content": "            initialData \u003d new PersonnelDatabase();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "            logger.warning(\"Problem while reading from the file. \""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "                    + \"Will be starting with an empty PersonnelDatabase\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mechome"
        },
        "content": "        logger.info(\"Starting PersonnelDatabase \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 8,
      "dreampursuer95": 1,
      "-": 167,
      "mechome": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/DateValidity.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjpan47"
        },
        "content": " * Helps to verify the validity of an input date given the year, month and day."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjpan47"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "class DateValidity {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    private static int MAX_VALID_YR \u003d 9999;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    private static int MIN_VALID_YR \u003d 2000;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    static boolean isLeap(int year) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return (((year % 4 \u003d\u003d 0) \u0026\u0026 (year % 100 !\u003d 0)) || (year % 400 \u003d\u003d 0));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Helps to verify if the Date is valid"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    static boolean isValidDate(int year, int month, int day) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        if (year \u003e MAX_VALID_YR || year \u003c MIN_VALID_YR) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        if (month \u003c 1 || month \u003e 12) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        if (day \u003c 1 || day \u003e 31) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        if (month \u003d\u003d 2 \u0026\u0026 isLeap(year)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            return (day \u003c\u003d 29);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        if (month \u003d\u003d 2 \u0026\u0026 !isLeap(year)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            return (day \u003c\u003d 28);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 6,
      "yjpan47": 21,
      "exactlyprecise": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command, type \u0027help\u0027 to see UserGuide\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE \u003d \"Date entered is invalid!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    //For parse exception when attempting to parse command that you have no authority over"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static final String MESSAGE_NO_AUTHORITY_PARSE \u003d \"Your do not have the authority to call this command!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    //Command exception, shouldn\u0027t be displayed if MESSAGE_NO_AUTHORITY_PARSE works."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static final String MESSAGE_NO_AUTHORITY \u003d \"You do not have the authority to access this command!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static final String MESSAGE_NO_USER \u003d \"No user found!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static final String MESSAGE_USER_NOT_FOUND \u003d \"Your username is not found!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public static final String MESSAGE_MASTERADMIN_ERROR \u003d \"Master admin cannot have duties!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 1,
      "dreampursuer95": 1,
      "-": 13,
      "exactlyprecise": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/UiCommandInteraction.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": " *  UiCommandInteractions that can be used"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": " *  \u003cli\u003e{@link #EXIT}\u003c/li\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": " *  \u003cli\u003e{@link #HELP}\u003c/li\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": " *  \u003cli\u003e{@link #PEOPLE_LIST}\u003c/li\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": " *  \u003cli\u003e{@link #CALENDAR_CURRENT}\u003c/li\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": " *  \u003cli\u003e{@link #CALENDAR_NEXT}\u003c/li\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "public enum UiCommandInteraction {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    EXIT,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    HELP,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    PEOPLE_LIST,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    CALENDAR_CURRENT,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    CALENDAR_NEXT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "exactlyprecise": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/UserType.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Valatheking"
        },
        "content": " *  Usertypes that can be used"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Valatheking"
        },
        "content": " *  \u003cli\u003e{@link #GENERAL}\u003c/li\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Valatheking"
        },
        "content": " *  \u003cli\u003e{@link #ADMIN}\u003c/li\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "public enum UserType {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    GENERAL,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    ADMIN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"UserType character must be \u0027A\u0027 or \u0027G\u0027 only.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final String DEFAULT_ADMIN_USERNAME \u003d \"Admin\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 3,
      "dreampursuer95": 2,
      "mechome": 1,
      "exactlyprecise": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/CalendarUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import java.util.GregorianCalendar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import java.util.TimeZone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": " * A container for Calendar specific utility functions."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "public class CalendarUtil {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public static int getCurrentMonth() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        GregorianCalendar calendar \u003d new GregorianCalendar();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        calendar.setTimeZone(TimeZone.getTimeZone(\"GMT+8\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        return calendar.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public static int getCurrentYear() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        GregorianCalendar calendar \u003d new GregorianCalendar();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        calendar.setTimeZone(TimeZone.getTimeZone(\"GMT+8\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return calendar.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * Gets current month in String format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public static String getMonthString(int monthIndex) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        String[] months \u003d {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            \"August\", \"September\", \"October\", \"November\", \"December\"};"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        return months[monthIndex];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * Returns the day of the week of the first day of the particular month"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * @param monthIndex the month to be passed in"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * @return the index of the day of the week of the first day"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public static int dayOfFirstDayOfMonth(int year, int monthIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        GregorianCalendar calendar \u003d new GregorianCalendar();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        calendar.setTimeZone(TimeZone.getTimeZone(\"GMT+8\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        calendar.set(year, monthIndex, 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        return calendar.get(Calendar.DAY_OF_WEEK);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjpan47": 4,
      "dreampursuer95": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/DateUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import java.security.InvalidParameterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Valatheking"
        },
        "content": " * Date Utility Class to check valid dates and days"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Valatheking"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "public class DateUtil {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    private static int MAX_VALID_YR \u003d 9999;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    private static int MIN_VALID_YR \u003d 2000;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    private static final String[] months \u003d {\"January\", \"February\", \"March\", \"April\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"};"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    private static final String[] daysOfWeek \u003d {\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        \"Thursday\", \"Friday\", \"Saturday\"};"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public static boolean isLeap(int year) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return (((year % 4 \u003d\u003d 0) \u0026\u0026 (year % 100 !\u003d 0)) || (year % 400 \u003d\u003d 0));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Checks if an input date is valid given year,month and date"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public static boolean isValidDate(int y, int m, int d) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        if (!isValidYear(y)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        if (!isValidMonth(m)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        if (d \u003c 1 || d \u003e 31) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        if (m \u003d\u003d 1 \u0026\u0026 isLeap(y)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            return (d \u003c\u003d 29);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        if (m \u003d\u003d 1 \u0026\u0026 !isLeap(y)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            return (d \u003c\u003d 28);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        if (m \u003d\u003d 3 || m \u003d\u003d 5 || m \u003d\u003d 8 || m \u003d\u003d 10) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            return (d \u003c\u003d 30);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public static boolean isValidYear(int y) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return y \u003e\u003d MIN_VALID_YR \u0026\u0026 y \u003c\u003d MAX_VALID_YR;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public static boolean isValidMonth(int m) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return m \u003e\u003d 0 \u0026\u0026 m \u003c\u003d 11;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public static boolean isValidDayOfWeek(int d) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return d \u003e\u003d 1 \u0026\u0026 d \u003c\u003d 7;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public static String getMonth(int m) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return months[m];"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public static String getDayOfWeek(int d) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return daysOfWeek[d - 1];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public static int getDayOfWeekIndex(String s) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        for (int i \u003d 0; i \u003c daysOfWeek.length; i++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            String day \u003d daysOfWeek[i];"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            if (day.equalsIgnoreCase(s) || day.substring(0, 2).equalsIgnoreCase(s.substring(0, 2))) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                return i + 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        throw new InvalidParameterException(\"Day of Week does not exist!\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public static int getNumOfDaysInMonth(int y, int m) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        if (!isValidYear(y) || !isValidMonth(m)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid Date\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        } else if (m \u003d\u003d 1 \u0026\u0026 isLeap(y)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            return 29;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        } else if (m \u003d\u003d 1 \u0026\u0026 !isLeap(y)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            return 28;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        } else if (m \u003d\u003d 3 || m \u003d\u003d 5 || m \u003d\u003d 8 || m \u003d\u003d 10) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            return 30;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            return 31;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Valatheking": 10,
      "yjpan47": 69,
      "exactlyprecise": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.UserType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.ReadOnlyPersonnelDatabase;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.duty.DutyMonth;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.model.duty.DutySettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    CommandResult execute(String commandText, UserType user, String userName) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Returns the PersonnelDatabase."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * @see seedu.address.model.Model#getPersonnelDatabase()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mechome"
        },
        "content": "    ReadOnlyPersonnelDatabase getPersonnelDatabase();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    /** returns an unmodifiable view of duty for dates */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    //ObservableList\u003cPerson\u003e getDutyForDates();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of commands entered by the user."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * The list is ordered from the least recent command to the most recent command."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cString\u003e getHistory();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mechome"
        },
        "content": "    Path getPersonnelDatabaseFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    DutySettings getDutySettings();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    void setDutySettings(DutySettings dutySettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selected person in the filtered person list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no person is selected."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#selectedPersonProperty()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the selected person in the filtered person list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedPerson(Person)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    void setSelectedPerson(Person person);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * Returns UserType of User if valid username and password, null otherwise."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    UserType findAccount(String userName, String password);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * Returns dutyMonth for current month"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    DutyMonth getCurrentDutyMonth();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * Returns DutyMonth for next month"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    DutyMonth getNextDutyMonth();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjpan47": 11,
      "dreampursuer95": 1,
      "-": 66,
      "mechome": 6,
      "exactlyprecise": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.UserType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.logic.commands.AdminCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.logic.commands.GeneralCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.logic.parser.PersonnelDatabaseParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.ReadOnlyPersonnelDatabase;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.duty.DutyMonth;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.model.duty.DutySettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private final PersonnelDatabaseParser personnelDatabaseParser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private boolean personnelDatabaseModified;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mechome"
        },
        "content": "        personnelDatabaseParser \u003d new PersonnelDatabaseParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // Set personnelDatabaseModified to true whenever the models\u0027 personnel database is modified."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mechome"
        },
        "content": "        model.getPersonnelDatabase().addListener(observable -\u003e personnelDatabaseModified \u003d true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public CommandResult execute(String commandText, UserType user, String userName)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throws CommandException, ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mechome"
        },
        "content": "        personnelDatabaseModified \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            if (user \u003d\u003d UserType.ADMIN) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                AdminCommand command \u003d personnelDatabaseParser.parseCommand(commandText, user, userName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                commandResult \u003d command.executeAdmin(model, history);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            } else if (user \u003d\u003d UserType.GENERAL) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                GeneralCommand command \u003d personnelDatabaseParser.parseCommand(commandText, user, userName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                commandResult \u003d command.executeGeneral(model, history);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_NO_USER);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mechome"
        },
        "content": "        if (personnelDatabaseModified) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mechome"
        },
        "content": "            logger.info(\"Personnel database modified, saving to file.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mechome"
        },
        "content": "                storage.savePersonnelDatabase(model.getPersonnelDatabase());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public ReadOnlyPersonnelDatabase getPersonnelDatabase() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return model.getPersonnelDatabase();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    //@Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    //public ObservableList\u003cPerson\u003e getDutyForDates() {return model.getDutyForDates(); }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public Path getPersonnelDatabaseFilePath() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return model.getPersonnelDatabaseFilePath();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public void setDutySettings(DutySettings dutySettings) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        model.setDutySettings(dutySettings);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public DutySettings getDutySettings() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return model.getDutySettings();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.selectedPersonProperty();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setSelectedPerson(person);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public UserType findAccount(String userName, String password) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return model.findAccount(userName, password);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public DutyMonth getCurrentDutyMonth() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return model.getCurrentDutyMonth();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public DutyMonth getNextDutyMonth() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return model.getNextDutyMonth();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjpan47": 12,
      "dreampursuer95": 2,
      "-": 89,
      "mechome": 16,
      "exactlyprecise": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/ViewCurrentCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.UiCommandInteraction;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Valatheking"
        },
        "content": " * Command to switch calendar view to current Month"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Valatheking"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "public class ViewCurrentCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewCurrent\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed Current Month Duty\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Executes the ViewCurrentCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, UiCommandInteraction.CALENDAR_CURRENT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public CommandResult executeGeneral(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return execute(model, history);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public CommandResult executeAdmin(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return execute(model, history);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 8,
      "exactlyprecise": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/ViewNextCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.UiCommandInteraction;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Valatheking"
        },
        "content": " * Command to switch calendar view to next Month"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Valatheking"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "public class ViewNextCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewNext\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed Next Month Duty\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Executes the ViewNextCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, UiCommandInteraction.CALENDAR_NEXT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public CommandResult executeGeneral(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return execute(model, history);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public CommandResult executeAdmin(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return execute(model, history);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 8,
      "exactlyprecise": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AcceptSwapCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mechome"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.duty.DutyMonth;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mechome"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mechome"
        },
        "content": " * Accepts a swap of duty dates (for users who are personnel only)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mechome"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mechome"
        },
        "content": "public class AcceptSwapCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"acceptswap\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mechome"
        },
        "content": "            + \": Accepts swap of duty from request list in browser panel. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mechome"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mechome"
        },
        "content": "            + \"INDEX\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mechome"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mechome"
        },
        "content": "            + \"2\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Accepted swap. Pending admin approval.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"There is no swap request of this index.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final String MESSAGE_SAME_PERSON \u003d \"You were the one who requested this swap.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final String MESSAGE_INVALID_DAY_ALLOCATED \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mechome"
        },
        "content": "            \"You already have duty on the requester\u0027s allocated date.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final String MESSAGE_INVALID_DAY_REQUESTED \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mechome"
        },
        "content": "            \"You do not have duty on the requester\u0027s requested date.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private final String userName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Creates a SwapCommand to swap the specified {@code Person}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public AcceptSwapCommand(String userName, Index index) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mechome"
        },
        "content": "        this.userName \u003d userName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mechome"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Executes the command"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mechome"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mechome"
        },
        "content": "        List\u003cRequest\u003e requests \u003d model.getPersonnelDatabase().getRequestList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mechome"
        },
        "content": "        List\u003cRequest\u003e filteredRequests \u003d requests.stream().filter(req -\u003e !req.isAccepterValid())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mechome"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mechome"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d filteredRequests.size()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mechome"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Request targetRequest \u003d filteredRequests.get(index.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mechome"
        },
        "content": "        LocalDate allocatedDate \u003d targetRequest.getAllocatedDate();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mechome"
        },
        "content": "        LocalDate requestedDate \u003d targetRequest.getRequestedDate();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mechome"
        },
        "content": "        DutyMonth nextMonth \u003d model.getDutyCalendar().getNextMonth();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mechome"
        },
        "content": "        int allocatedDateDay \u003d allocatedDate.getDayOfMonth();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mechome"
        },
        "content": "        int requestedDateDay \u003d requestedDate.getDayOfMonth();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mechome"
        },
        "content": "        if (userName.equals(targetRequest.getRequesterNric())) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mechome"
        },
        "content": "            throw new CommandException(MESSAGE_SAME_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mechome"
        },
        "content": "        if (nextMonth.isAssignedToDuty(userName, allocatedDateDay)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mechome"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_DAY_ALLOCATED);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mechome"
        },
        "content": "        if (!nextMonth.isAssignedToDuty(userName, requestedDateDay)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mechome"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_DAY_REQUESTED);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mechome"
        },
        "content": "        targetRequest.setAccepterNric(userName);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mechome"
        },
        "content": "        model.commitPersonnelDatabase();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public CommandResult executeGeneral(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return execute(model, history);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public CommandResult executeAdmin(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return execute(model, history);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mechome"
        },
        "content": "                || other instanceof AcceptSwapCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mechome"
        },
        "content": "                \u0026\u0026 userName.equals(((AcceptSwapCommand) other).userName)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mechome"
        },
        "content": "                \u0026\u0026 index.equals(((AcceptSwapCommand) other).index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mechome"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 9,
      "mechome": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RANK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SECTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the duty planner. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mechome"
        },
        "content": "            + PREFIX_NRIC + \"NRIC \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mechome"
        },
        "content": "            + PREFIX_COMPANY + \"COMPANY \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mechome"
        },
        "content": "            + PREFIX_SECTION + \"SECTION \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mechome"
        },
        "content": "            + PREFIX_RANK + \"RANK \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mechome"
        },
        "content": "            + PREFIX_NRIC + \"S9012345L \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mechome"
        },
        "content": "            + PREFIX_COMPANY + \"Echo \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mechome"
        },
        "content": "            + PREFIX_SECTION + \"1 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mechome"
        },
        "content": "            + PREFIX_RANK + \"CPL \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mechome"
        },
        "content": "            + PREFIX_NAME + \"Brandon Foo \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mechome"
        },
        "content": "            + PREFIX_TAG + \"injury\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            + \"Please run \\\"schedule\\\" again.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public CommandResult executeAdmin(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        model.getDutyCalendar().getNextMonth().unconfirm();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        model.getDutyCalendar().getDutyStorage().undo();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mechome"
        },
        "content": "        model.commitPersonnelDatabase();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public CommandResult executeGeneral(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        throw new CommandException(Messages.MESSAGE_NO_AUTHORITY);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 4,
      "yjpan47": 1,
      "dreampursuer95": 6,
      "-": 54,
      "mechome": 12,
      "exactlyprecise": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AdminCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Valatheking"
        },
        "content": " * Admin command interface"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Valatheking"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "public interface AdminCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * Executes the command for an Admin user and returns the result message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * @param commandHistory {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public CommandResult executeAdmin(Model model, CommandHistory commandHistory) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 4,
      "exactlyprecise": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/BlockDateCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import seedu.address.model.duty.DutyMonth;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Valatheking"
        },
        "content": " * A command to block dates for the next month of duties."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Valatheking"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "public class BlockDateCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"block\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" Blocks out certain duty dates for the upcoming \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "            + \"month for the current person using.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "            + \"Parameters: Dates in numbers for the next month\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 2 4 5 6 9 10\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    public static final String MESSAGE_BLOCK_DATES_SUCCESS \u003d \"Dates for next month have been successfully blocked!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    public static final String MESSAGE_TOO_MANY_BLOCKED_DATES \u003d \"Too many dates to block, number of blocked days \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "            + \"should be less than 15\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    private final List\u003cInteger\u003e blockedDates;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    private final String userName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    public BlockDateCommand(List\u003cInteger\u003e blockedDates, String userName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        this.blockedDates \u003d blockedDates;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        this.userName \u003d userName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Executes the command"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        Person person \u003d model.findPerson(userName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        DutyMonth nextMonth \u003d model.getDutyCalendar().getNextMonth();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        if (blockedDates.size() \u003e 15) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "            throw new CommandException(MESSAGE_TOO_MANY_BLOCKED_DATES);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        for (Integer blockedDay : blockedDates) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "            nextMonth.addBlockedDay(person, blockedDay);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        model.commitPersonnelDatabase();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_BLOCK_DATES_SUCCESS));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    public CommandResult executeGeneral(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        return execute(model, history);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    public CommandResult executeAdmin(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        return execute(model, history);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        if (!(other instanceof BlockDateCommand)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        BlockDateCommand e \u003d (BlockDateCommand) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return blockedDates.equals(e.blockedDates) \u0026\u0026 userName.equals(e.userName);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 72,
      "dreampursuer95": 3,
      "mechome": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import seedu.address.model.PersonnelDatabase;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public CommandResult executeAdmin(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mechome"
        },
        "content": "        model.setPersonnelDatabase(new PersonnelDatabase());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mechome"
        },
        "content": "        model.commitPersonnelDatabase();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public CommandResult executeGeneral(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        throw new CommandException(Messages.MESSAGE_NO_AUTHORITY);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 1,
      "-": 20,
      "mechome": 2,
      "exactlyprecise": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "public abstract class Command implements GeneralCommand, AdminCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "exactlyprecise": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import seedu.address.commons.core.UiCommandInteraction;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private final UiCommandInteraction uiCommandInteraction;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public CommandResult(String feedbackToUser, UiCommandInteraction uiCommandInteraction) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        this.uiCommandInteraction \u003d uiCommandInteraction;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        this(feedbackToUser, null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public UiCommandInteraction getUiCommandInteraction() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return uiCommandInteraction;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                \u0026\u0026 uiCommandInteraction \u003d\u003d otherCommandResult.getUiCommandInteraction();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return Objects.hash(feedbackToUser, uiCommandInteraction);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 2,
      "-": 52,
      "exactlyprecise": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ConfirmScheduleCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.commons.util.DateUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.model.duty.DutyMonth;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.model.duty.DutyStorage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Valatheking"
        },
        "content": " * Set the schedule generated into stone by confirming it"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Valatheking"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "public class ConfirmScheduleCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"confirm\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            + \"Confirms previously generated schedule\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public static final String SCHEDULE_SUCCESS \u003d \"Schedule for %s %s confirmed! See below for details\\n\\n%s\\n\\n%s\\n\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static final String SCHEDULE_ALREADY_CONFIRMED \u003d \"Schedule for %s %s already confirmed! \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            + \"See below for details\\n\\n%s\\n\\n%s\\n\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public static final String NO_SCHEDULE_YET \u003d \"No schedules found! Tye \u003cschedule\u003e to make a schedule!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public CommandResult executeAdmin(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        DutyMonth nextMonth \u003d model.getDutyCalendar().getNextMonth();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        DutyStorage dutyStorage \u003d model.getDutyStorage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        if (nextMonth.isConfirmed()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            return new CommandResult(String.format(SCHEDULE_ALREADY_CONFIRMED,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                    DateUtil.getMonth(nextMonth.getMonthIndex()),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                    nextMonth.getYear(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                    nextMonth.printDuties(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                    dutyStorage.printPoints()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        DutyMonth dummyMonth \u003d model.getDutyCalendar().getDummyNextMonth();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        if (dummyMonth.getScheduledDuties() \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            return new CommandResult(NO_SCHEDULE_YET);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        dutyStorage.update(dummyMonth.getScheduledDuties());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        model.getDutyCalendar().confirm();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        model.commitPersonnelDatabase();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return new CommandResult(String.format(SCHEDULE_SUCCESS,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                DateUtil.getMonth(dummyMonth.getMonthIndex()),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                dummyMonth.getYear(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                dummyMonth.printDuties(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                dutyStorage.printPoints()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public CommandResult executeGeneral(Model model, CommandHistory commandHistory) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        throw new CommandException(Messages.MESSAGE_NO_AUTHORITY);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 3,
      "yjpan47": 39,
      "dreampursuer95": 17,
      "exactlyprecise": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import seedu.address.model.duty.Duty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import seedu.address.model.duty.DutyMonth;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import seedu.address.model.duty.DutyStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            + \"Please run \\\"schedule\\\" again.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public CommandResult executeAdmin(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        DutyMonth dutyMonth \u003d model.getDutyCalendar().getNextMonth();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        DutyStorage dutyStorage \u003d model.getDutyStorage();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        for (Duty duty : dutyMonth.getScheduledDuties()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            duty.removePerson(personToDelete);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        dutyStorage.removePerson(personToDelete);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        dutyMonth.unconfirm();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        dutyStorage.undo();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mechome"
        },
        "content": "        model.commitPersonnelDatabase();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public CommandResult executeGeneral(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        throw new CommandException(Messages.MESSAGE_NO_AUTHORITY);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjpan47": 1,
      "dreampursuer95": 14,
      "-": 52,
      "mechome": 1,
      "exactlyprecise": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DutySettingsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.model.duty.DutySettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Valatheking"
        },
        "content": " * Allows admin to modify settings of the duties to allow different points and number of personnel for duties"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Valatheking"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "public class DutySettingsCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"settings\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" Update manpower needed and points awarded for duties \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"w/Sunday m/3 p/4\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public static final String VIEW_SETTINGS \u003d \"Duty Settings for each day of the week:\\n\\n%s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public static final String CHANGE_SETTINGS_SUCCESS \u003d \"Settings successfully changed!\\n\\n%s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    private boolean isView;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    private int dayOfWeek;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    private int capacity;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    private int points;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public DutySettingsCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.isView \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public DutySettingsCommand(int dayOfweek, int capacity, int points) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.dayOfWeek \u003d dayOfweek;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.capacity \u003d capacity;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.points \u003d points;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.isView \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public CommandResult executeAdmin(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        DutySettings dutySettings \u003d model.getDutySettings();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        if (isView) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            return new CommandResult(String.format(VIEW_SETTINGS,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                    dutySettings.printDayOfWeek()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            dutySettings.setCapacity(this.dayOfWeek, this.capacity);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            dutySettings.setPoints(this.dayOfWeek, this.points);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            return new CommandResult(String.format(CHANGE_SETTINGS_SUCCESS,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                    dutySettings.printDayOfWeek()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public CommandResult executeGeneral(Model model, CommandHistory commandHistory) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        throw new CommandException(Messages.MESSAGE_NO_AUTHORITY);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 3,
      "yjpan47": 50,
      "exactlyprecise": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RANK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SECTION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERTYPE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.UserType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import seedu.address.model.duty.Duty;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import seedu.address.model.duty.DutyMonth;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import seedu.address.model.duty.DutyStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.person.Password;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.person.Rank;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.person.Section;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mechome"
        },
        "content": " * Edits the details of an existing person in the personnel database."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static final String MESSAGE_USAGE_ADMIN \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mechome"
        },
        "content": "            + \"[\" + PREFIX_NRIC + \"NRIC] \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mechome"
        },
        "content": "            + \"[\" + PREFIX_COMPANY + \"COMPANY] \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mechome"
        },
        "content": "            + \"[\" + PREFIX_SECTION + \"SECTION] \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mechome"
        },
        "content": "            + \"[\" + PREFIX_RANK + \"RANK] \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG] \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            + \"[\" + PREFIX_PASSWORD + \"PASSWORD] \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            + \"[\" + PREFIX_USERTYPE + \"USERTYPE] ...\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            + PREFIX_RANK + \"CFC \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            + PREFIX_USERTYPE + \"A\";;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static final String MESSAGE_USAGE_GENERAL \u003d COMMAND_WORD + \": Edits the details of yourself. \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            + \"[\" + PREFIX_COMPANY + \"COMPANY] \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            + \"[\" + PREFIX_SECTION + \"SECTION] \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            + \"[\" + PREFIX_RANK + \"RANK] \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG] \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            + \"[\" + PREFIX_PASSWORD + \"PASSWORD] ...\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_PHONE + \"91234567 \" + PREFIX_RANK + \"CFC\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the personnel database.\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private final String userName;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * @param userName of person used to enter the command"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor, String userName) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        requireNonNull(userName);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        this.userName \u003d userName;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * @param userName of person used to enter the command"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public EditCommand(EditPersonDescriptor editPersonDescriptor, String userName) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        requireNonNull(userName);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        this.index \u003d null;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        this.userName \u003d userName;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public CommandResult executeAdmin(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        DutyMonth dutyMonth \u003d model.getDutyCalendar().getNextMonth();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        DutyStorage dutyStorage \u003d model.getDutyStorage();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        for (Duty duty : dutyMonth.getScheduledDuties()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            duty.replacePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        dutyStorage.replacePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mechome"
        },
        "content": "        model.commitPersonnelDatabase();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public CommandResult executeGeneral(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Person personToEdit \u003d model.findPerson(userName);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        if (personToEdit \u003d\u003d null) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_USER_NOT_FOUND);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        model.commitPersonnelDatabase();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Nric updatedNric \u003d editPersonDescriptor.getNric().orElse(personToEdit.getNric());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Company updatedCompany \u003d editPersonDescriptor.getCompany().orElse(personToEdit.getCompany());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Section updatedSection \u003d editPersonDescriptor.getSection().orElse(personToEdit.getSection());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Rank updatedRank \u003d editPersonDescriptor.getRank().orElse(personToEdit.getRank());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Password password \u003d editPersonDescriptor.getPassword().orElse(personToEdit.getPassword());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        UserType userType \u003d editPersonDescriptor.getUserType().orElse(personToEdit.getUserType());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return new Person(updatedNric, updatedCompany, updatedSection, updatedRank, updatedName,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                updatedPhone, updatedTags, password, userType);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        if (index \u003d\u003d null) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            if (e.index \u003d\u003d null) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                return editPersonDescriptor.equals(e.editPersonDescriptor)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                        \u0026\u0026 userName.equals(e.userName);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                \u0026\u0026 userName.equals(e.userName);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "mechome"
        },
        "content": "        private Nric nric;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "mechome"
        },
        "content": "        private Company company;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "mechome"
        },
        "content": "        private Section section;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "mechome"
        },
        "content": "        private Rank rank;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        private Password password;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        private UserType userType;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "mechome"
        },
        "content": "            setNric(toCopy.nric);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "mechome"
        },
        "content": "            setCompany(toCopy.company);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "mechome"
        },
        "content": "            setSection(toCopy.section);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "mechome"
        },
        "content": "            setRank(toCopy.rank);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            setPassword(toCopy.password);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            setUserType(toCopy.userType);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            return CollectionUtil.isAnyNonNull(nric, company, section, rank, name, phone, tags, password, userType);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "mechome"
        },
        "content": "        public void setNric(Nric nric) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "mechome"
        },
        "content": "            this.nric \u003d nric;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        public Optional\u003cNric\u003e getNric() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "            return Optional.ofNullable(nric);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        public void setCompany(Company company) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "            this.company \u003d company;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        public Optional\u003cCompany\u003e getCompany() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "            return Optional.ofNullable(company);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        public void setSection(Section section) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "            this.section \u003d section;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        public Optional\u003cSection\u003e getSection() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "            return Optional.ofNullable(section);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        public void setRank(Rank rank) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "            this.rank \u003d rank;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        public Optional\u003cRank\u003e getRank() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "            return Optional.ofNullable(rank);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        public void setPassword(Password password) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            this.password \u003d password;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        public Optional\u003cPassword\u003e getPassword() {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            return Optional.ofNullable(password);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        public void setUserType(UserType userType) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            this.userType \u003d userType;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        public Optional\u003cUserType\u003e getUserType() {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            return Optional.ofNullable(userType);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "mechome"
        },
        "content": "            return getNric().equals(e.getNric())"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "mechome"
        },
        "content": "                    \u0026\u0026 getCompany().equals(e.getCompany())"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "mechome"
        },
        "content": "                    \u0026\u0026 getSection().equals(e.getSection())"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "mechome"
        },
        "content": "                    \u0026\u0026 getRank().equals(e.getRank())"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "mechome"
        },
        "content": "                    \u0026\u0026 getName().equals(e.getName())"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags())"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                    \u0026\u0026 getPassword().equals(e.getPassword())"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                    \u0026\u0026 getUserType().equals(e.getUserType());"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 15,
      "yjpan47": 1,
      "dreampursuer95": 10,
      "-": 200,
      "mechome": 28,
      "exactlyprecise": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.UiCommandInteraction;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, UiCommandInteraction.EXIT);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public CommandResult executeGeneral(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return execute(model, history);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public CommandResult executeAdmin(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return execute(model, history);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "exactlyprecise": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Executes the command"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public CommandResult executeGeneral(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return execute(model, history);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public CommandResult executeAdmin(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return execute(model, history);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 3,
      "-": 41,
      "exactlyprecise": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GeneralCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Valatheking"
        },
        "content": " * General command interface"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Valatheking"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "public interface GeneralCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * Executes the command for a General user and returns the result message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * @param commandHistory {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public CommandResult executeGeneral(Model model, CommandHistory commandHistory) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 3,
      "exactlyprecise": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.UiCommandInteraction;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, UiCommandInteraction.HELP);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public CommandResult executeGeneral(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return execute(model, history);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public CommandResult executeAdmin(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return execute(model, history);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 21,
      "exactlyprecise": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Executes the command"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e previousCommands \u003d new ArrayList\u003c\u003e(history.getHistory());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public CommandResult executeGeneral(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return execute(model, history);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public CommandResult executeAdmin(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return execute(model, history);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 3,
      "-": 31,
      "exactlyprecise": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.UiCommandInteraction;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Executes the command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, UiCommandInteraction.PEOPLE_LIST);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public CommandResult executeGeneral(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return execute(model, history);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public CommandResult executeAdmin(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return execute(model, history);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 3,
      "-": 22,
      "exactlyprecise": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/PointsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.model.duty.DutyStorage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Valatheking"
        },
        "content": " * A command to view the points of the people in the Personnel Database"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Valatheking"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "public class PointsCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"points\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Display points accumulated by each person.\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public PointsCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.index \u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public PointsCommand(Index index) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public CommandResult executeAdmin(Model model, CommandHistory commandHistory) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        DutyStorage dutyStorage \u003d model.getDutyStorage();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        if (this.index \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            return new CommandResult(dutyStorage.printPoints());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        Person person \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return new CommandResult(dutyStorage.printDetails(person));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public CommandResult executeGeneral(Model model, CommandHistory commandHistory) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        throw new CommandException(Messages.MESSAGE_NO_AUTHORITY);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 3,
      "yjpan47": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Executes the command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mechome"
        },
        "content": "        if (!model.canRedoPersonnelDatabase()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mechome"
        },
        "content": "        model.redoPersonnelDatabase();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public CommandResult executeGeneral(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return execute(model, history);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public CommandResult executeAdmin(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return execute(model, history);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 3,
      "-": 27,
      "mechome": 2,
      "exactlyprecise": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ScheduleCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.commons.util.DateUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.model.duty.DutyMonth;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.model.duty.DutyStorage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Valatheking"
        },
        "content": " * Schedules the upcoming duties for the month"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Valatheking"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "public class ScheduleCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"schedule\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "            + \": Schedules the duties for the upcoming month.\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            + \"taking into account the duty points of each person and their blocked out dates. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            + \"It will sort by available dates and distribute duties accordingly. \\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public static final String SCHEDULE_SUCCESS \u003d \"%1$s\\n\\n%2$s\\n\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            + \"This schedule has yet been confirmed!\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            + \"Type \u003cconfirm\u003e to confirm this schedule or \u003cschedule\u003e to reassign!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static final String SCHEDULE_ALREADY_CONFIRMED \u003d \"Schedule for %s %s already confirmed! \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            + \"See below for details\\n%s\\n%s\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public CommandResult executeAdmin(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        DutyMonth nextMonth \u003d model.getDutyCalendar().getNextMonth();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        DutyStorage dutyStorage \u003d model.getDutyStorage();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        if (nextMonth.isConfirmed()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            return new CommandResult(String.format(SCHEDULE_ALREADY_CONFIRMED,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                    DateUtil.getMonth(nextMonth.getMonthIndex()), nextMonth.getYear(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                    nextMonth.printDuties(), dutyStorage.printPoints()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mechome"
        },
        "content": "        model.scheduleDutyForNextMonth();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        DutyMonth dummy \u003d model.getDummyNextMonth();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return new CommandResult(String.format(SCHEDULE_SUCCESS,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                dummy.printDuties(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                dummy.printPoints(dutyStorage)));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public CommandResult executeGeneral(Model model, CommandHistory commandHistory) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        throw new CommandException(Messages.MESSAGE_NO_AUTHORITY);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 4,
      "yjpan47": 38,
      "dreampursuer95": 9,
      "mechome": 1,
      "exactlyprecise": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Selects a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Selects the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Executes the command"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredPersonList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setSelectedPerson(filteredPersonList.get(targetIndex.getZeroBased()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public CommandResult executeGeneral(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return execute(model, history);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public CommandResult executeAdmin(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return execute(model, history);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 3,
      "-": 53,
      "exactlyprecise": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.UiCommandInteraction;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Sorts all persons in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons sorted by name\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Executes the command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mechome"
        },
        "content": "        model.sortPersonnelDatabase();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, UiCommandInteraction.PEOPLE_LIST);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public CommandResult executeGeneral(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return execute(model, history);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public CommandResult executeAdmin(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return execute(model, history);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 3,
      "-": 23,
      "mechome": 1,
      "exactlyprecise": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SwapCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mechome"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLOCATED_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REQUESTED_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mechome"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mechome"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mechome"
        },
        "content": " * Requests a swap of duty dates for next month (for users who are personnel only)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mechome"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mechome"
        },
        "content": "public class SwapCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"swap\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mechome"
        },
        "content": "            + \": Requests for swap of duty on allocated date for another date in next month. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mechome"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mechome"
        },
        "content": "            + PREFIX_ALLOCATED_DATE + \"DATE (ddmmyy) \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mechome"
        },
        "content": "            + PREFIX_REQUESTED_DATE + \"DATE (ddmmyy) \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mechome"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mechome"
        },
        "content": "            + PREFIX_ALLOCATED_DATE + \"010119 \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mechome"
        },
        "content": "            + PREFIX_REQUESTED_DATE + \"050119 \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Request submitted.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final String MESSAGE_UNMATCHING_MONTH \u003d \"Allocated month and requested month don\u0027t match.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final String MESSAGE_INVALID_YEAR \u003d \"Invalid year input.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final String MESSAGE_INVALID_MONTH \u003d \"Invalid month input.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final String MESSAGE_INVALID_DAY_ALLOCATED \u003d \"You do not have duty on the input allocated date.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final String MESSAGE_INVALID_DAY_REQUESTED \u003d \"You already have duty on the input requested date.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private final LocalDate allocatedDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private final LocalDate requestedDate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private final String userName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Creates a SwapCommand to swap the specified {@code Person}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public SwapCommand(LocalDate allocatedDate, LocalDate requestedDate, String userName) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mechome"
        },
        "content": "        requireNonNull(allocatedDate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mechome"
        },
        "content": "        requireNonNull(requestedDate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mechome"
        },
        "content": "        this.allocatedDate \u003d allocatedDate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mechome"
        },
        "content": "        this.requestedDate \u003d requestedDate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        this.userName \u003d userName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Executes the command"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mechome"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mechome"
        },
        "content": "        int currentMonthIndex \u003d model.getDutyCalendar().getCurrentMonth().getMonthIndex();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mechome"
        },
        "content": "        int nextMonthIndex \u003d model.getDutyCalendar().getNextMonth().getMonthIndex();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mechome"
        },
        "content": "        int currentYear \u003d model.getDutyCalendar().getCurrentYear();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mechome"
        },
        "content": "        int allocatedDateDay \u003d allocatedDate.getDayOfMonth();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mechome"
        },
        "content": "        int requestedDateDay \u003d requestedDate.getDayOfMonth();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mechome"
        },
        "content": "        int allocatedDateMonth \u003d allocatedDate.getMonthValue() - 1;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mechome"
        },
        "content": "        int requestedDateMonth \u003d requestedDate.getMonthValue() - 1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mechome"
        },
        "content": "        int allocatedDateYear \u003d allocatedDate.getYear();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mechome"
        },
        "content": "        int requestedDateYear \u003d requestedDate.getYear();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mechome"
        },
        "content": "        if (allocatedDateMonth !\u003d requestedDateMonth || allocatedDateYear !\u003d requestedDateYear) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mechome"
        },
        "content": "            throw new CommandException(MESSAGE_UNMATCHING_MONTH);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mechome"
        },
        "content": "        if (currentMonthIndex \u003d\u003d 11 \u0026\u0026 currentYear !\u003d requestedDateYear - 1"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mechome"
        },
        "content": "                || currentMonthIndex \u003c 11 \u0026\u0026 currentYear !\u003d requestedDateYear) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mechome"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_YEAR);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mechome"
        },
        "content": "        if (allocatedDateMonth !\u003d nextMonthIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mechome"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_MONTH);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mechome"
        },
        "content": "        if (!model.getDutyCalendar().getNextMonth().isAssignedToDuty(userName, allocatedDateDay)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mechome"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_DAY_ALLOCATED);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mechome"
        },
        "content": "        if (model.getDutyCalendar().getNextMonth().isAssignedToDuty(userName, requestedDateDay)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mechome"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_DAY_REQUESTED);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        model.addSwapRequest(userName, allocatedDate, requestedDate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mechome"
        },
        "content": "        model.commitPersonnelDatabase();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public CommandResult executeGeneral(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return execute(model, history);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public CommandResult executeAdmin(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return execute(model, history);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mechome"
        },
        "content": "                || other instanceof SwapCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mechome"
        },
        "content": "                \u0026\u0026 userName.equals(((SwapCommand) other).userName)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mechome"
        },
        "content": "                \u0026\u0026 allocatedDate.equals(((SwapCommand) other).allocatedDate)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mechome"
        },
        "content": "                \u0026\u0026 requestedDate.equals(((SwapCommand) other).requestedDate);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mechome"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 9,
      "mechome": 93,
      "exactlyprecise": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UnconfirmCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": " * Unconfirm the schedules. For debugging purposes only."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "public class UnconfirmCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"unconfirm\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public static final String SCHEDULE_SUCCESS \u003d \"Unconfirm successful!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public CommandResult executeAdmin(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        model.getDutyCalendar().unconfirm();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        model.getDutyCalendar().getDutyStorage().undo();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        model.commitPersonnelDatabase();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        return new CommandResult(SCHEDULE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public CommandResult executeGeneral(Model model, CommandHistory commandHistory) throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        throw new CommandException(Messages.MESSAGE_NO_AUTHORITY);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjpan47": 1,
      "dreampursuer95": 29,
      "exactlyprecise": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previous state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Executes the command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mechome"
        },
        "content": "        if (!model.canUndoPersonnelDatabase()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mechome"
        },
        "content": "        model.undoPersonnelDatabase();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public CommandResult executeGeneral(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return execute(model, history);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public CommandResult executeAdmin(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return execute(model, history);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 3,
      "-": 27,
      "mechome": 2,
      "exactlyprecise": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import seedu.address.model.duty.Duty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import seedu.address.model.duty.DutyMonth;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Valatheking"
        },
        "content": " * Allows user to view their duties for the current month"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Valatheking"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Viewing %1$s\u0027s duties!\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public static final String MESSAGE_NOSUCHPERSON \u003d \"This person does not exist in the personnel database\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    private final String userName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public ViewCommand(String userName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        this.userName \u003d userName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Executes the command"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        String messageDuty \u003d MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        if (!model.hasPerson(userName)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            throw new CommandException(MESSAGE_NOSUCHPERSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        List\u003cDuty\u003e duties \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        DutyMonth currentMonth \u003d model.getDutyCalendar().getCurrentMonth();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        duties.addAll(currentMonth.getScheduledDuties());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        DutyMonth nextMonth \u003d model.getDutyCalendar().getNextMonth();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        duties.addAll(nextMonth.getScheduledDuties());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        int dutyCounter \u003d 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        if (!duties.isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            for (Duty duty : duties) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                for (Person person : duty.getPersons()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                    if (person.getNric().toString().equals(userName)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                        dutyCounter++;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "                        messageDuty \u003d messageDuty + \"Duty \" + dutyCounter + \": Month: \" + duty.getMonthString()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                                + \", Day: \" + duty.getDayIndex() + \" with\" + duty.getPersonsString(userName) + \" \\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "            messageDuty \u003d \"%1$s has no duties!\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        return new CommandResult(String.format(messageDuty, userName));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public CommandResult executeAdmin(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        return execute(model, history);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public CommandResult executeGeneral(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        return execute(model, history);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                || (other instanceof ViewCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                \u0026\u0026 userName.equals(((ViewCommand) other).userName));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 10,
      "yjpan47": 3,
      "dreampursuer95": 67,
      "exactlyprecise": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AcceptSwapCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mechome"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NO_AUTHORITY_PARSE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.commons.core.UserType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.logic.commands.AcceptSwapCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mechome"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mechome"
        },
        "content": " * Parses input arguments and creates a new AcceptSwapCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mechome"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mechome"
        },
        "content": "public class AcceptSwapCommandParser implements Parser\u003cAcceptSwapCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AcceptSwapCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * and returns an AcceptSwapCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public AcceptSwapCommand parse(String args, UserType userType, String userName) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mechome"
        },
        "content": "        if (!userName.equals(UserType.DEFAULT_ADMIN_USERNAME)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mechome"
        },
        "content": "            return parseForPersonnelUser(args, userName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mechome"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mechome"
        },
        "content": "            throw new ParseException(MESSAGE_NO_AUTHORITY_PARSE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AcceptSwapCommand for accounts associated"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * with a personnel and returns an AcceptSwapCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public AcceptSwapCommand parseForPersonnelUser(String args, String userName) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mechome"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mechome"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mechome"
        },
        "content": "            return new AcceptSwapCommand(userName, index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mechome"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mechome"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mechome"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AcceptSwapCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mechome"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 3,
      "mechome": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RANK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SECTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.UserType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import seedu.address.model.person.Rank;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import seedu.address.model.person.Section;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public AddCommand parse(String args, UserType userType, String userName) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mechome"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NRIC, PREFIX_COMPANY, PREFIX_SECTION,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mechome"
        },
        "content": "                        PREFIX_RANK, PREFIX_NAME, PREFIX_PHONE, PREFIX_TAG);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mechome"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NRIC, PREFIX_COMPANY, PREFIX_SECTION,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mechome"
        },
        "content": "                PREFIX_RANK, PREFIX_NAME, PREFIX_PHONE)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Nric nric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Company company \u003d ParserUtil.parseCompany(argMultimap.getValue(PREFIX_COMPANY).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Section section \u003d ParserUtil.parseSection(argMultimap.getValue(PREFIX_SECTION).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Rank rank \u003d ParserUtil.parseRank(argMultimap.getValue(PREFIX_RANK).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Person person \u003d new Person(nric, company, section, rank, name, phone, tagList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 8,
      "-": 50,
      "mechome": 10,
      "exactlyprecise": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/BlockDateCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mechome"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import seedu.address.commons.core.UserType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import seedu.address.logic.commands.BlockDateCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Valatheking"
        },
        "content": " * Parses input arguments and creates a new BlockDateCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Valatheking"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "public class BlockDateCommandParser implements Parser\u003cBlockDateCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the BlockDateCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * and returns an BlockDateCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    public BlockDateCommand parse(String args, UserType userType, String userName) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, BlockDateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        String[] dates \u003d trimmedArgs.split(\" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        List\u003cInteger\u003e blockedDatesDuplicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        for (String date : dates) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "            Integer dateAdded \u003d Integer.parseInt(date);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "            if (dateAdded \u003e 31 || dateAdded \u003c 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mechome"
        },
        "content": "            blockedDatesDuplicates.add(dateAdded);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        Set\u003cInteger\u003e set \u003d new HashSet\u003c\u003e(blockedDatesDuplicates);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        List\u003cInteger\u003e blockedDates \u003d new ArrayList\u003c\u003e(set);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mechome"
        },
        "content": "        blockedDates.sort(new Comparator\u003cInteger\u003e() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mechome"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mechome"
        },
        "content": "            public int compare(Integer o1, Integer o2) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mechome"
        },
        "content": "                return o1 - o2;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mechome"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mechome"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        return new BlockDateCommand(blockedDates, userName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Checks if an input date is valid given year,month and date"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 42,
      "mechome": 8,
      "exactlyprecise": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final Prefix PREFIX_NRIC \u003d new Prefix(\"nr/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final Prefix PREFIX_COMPANY \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final Prefix PREFIX_SECTION \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final Prefix PREFIX_RANK \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static final Prefix PREFIX_PASSWORD \u003d new Prefix(\"pw/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static final Prefix PREFIX_USERTYPE \u003d new Prefix(\"u/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final Prefix PREFIX_ALLOCATED_DATE \u003d new Prefix(\"ad/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final Prefix PREFIX_REQUESTED_DATE \u003d new Prefix(\"rd/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"/d\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 1,
      "-": 13,
      "mechome": 7,
      "exactlyprecise": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NO_AUTHORITY_PARSE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.UserType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public DeleteCommand parse(String args, UserType userType, String userName) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        if (userType \u003d\u003d UserType.ADMIN) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            return adminParse(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throw new ParseException(MESSAGE_NO_AUTHORITY_PARSE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand for Admin accounts."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public DeleteCommand adminParse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 28,
      "exactlyprecise": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DutySettingsCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.commons.core.UserType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.commons.util.DateUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.logic.commands.DutySettingsCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Valatheking"
        },
        "content": " * Parses input arguments and creates a new DutySettingsCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Valatheking"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "public class DutySettingsCommandParser implements Parser\u003cDutySettingsCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    private static final Prefix PREFIX_DAY_OF_WEEK \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    private static final Prefix PREFIX_POINTS \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    private static final Prefix PREFIX_CAPACITY \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DutySettingsCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * and returns an DutySettingsCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public DutySettingsCommand parse(String args, UserType userType, String userName) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                PREFIX_DAY_OF_WEEK, PREFIX_CAPACITY, PREFIX_POINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_DAY_OF_WEEK).isPresent()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                \u0026\u0026 !argMultimap.getValue(PREFIX_CAPACITY).isPresent()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                \u0026\u0026 !argMultimap.getValue(PREFIX_POINTS).isPresent()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            return new DutySettingsCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            int dayOfWeek \u003d DateUtil.getDayOfWeekIndex(argMultimap.getValue(PREFIX_DAY_OF_WEEK).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            int capacity \u003d Integer.parseInt(argMultimap.getValue(PREFIX_CAPACITY).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            int points \u003d Integer.parseInt(argMultimap.getValue(PREFIX_POINTS).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            return new DutySettingsCommand(dayOfWeek, capacity, points);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DutySettingsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 8,
      "yjpan47": 33,
      "exactlyprecise": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NO_AUTHORITY_PARSE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RANK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SECTION;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERTYPE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.UserType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public EditCommand parse(String args, UserType userType, String userName) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        if (userType \u003d\u003d UserType.ADMIN) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            return adminParse(args, userName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        } else if (userType \u003d\u003d UserType.GENERAL) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            return generalParse(args, userName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throw new ParseException(MESSAGE_NO_AUTHORITY_PARSE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand (General)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public EditCommand generalParse(String args, String userName) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        ArgumentMultimap argMultimap \u003d initMultimapGeneral(args);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE_GENERAL));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COMPANY).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            editPersonDescriptor.setCompany(ParserUtil.parseCompany(argMultimap.getValue(PREFIX_COMPANY).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SECTION).isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            editPersonDescriptor.setSection(ParserUtil.parseSection(argMultimap.getValue(PREFIX_SECTION).get()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        if (argMultimap.getValue(PREFIX_RANK).isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            editPersonDescriptor.setRank(ParserUtil.parseRank(argMultimap.getValue(PREFIX_RANK).get()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PASSWORD).isPresent()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            editPersonDescriptor.setPassword(ParserUtil.parsePassword(argMultimap.getValue(PREFIX_PASSWORD).get()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return new EditCommand(editPersonDescriptor, userName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand (Admin)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public EditCommand adminParse(String args, String userName) throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        ArgumentMultimap argMultimap \u003d initMultimapAdmin(args);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                    EditCommand.MESSAGE_USAGE_ADMIN), pe);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mechome"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NRIC).isPresent()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mechome"
        },
        "content": "            editPersonDescriptor.setNric(ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mechome"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COMPANY).isPresent()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mechome"
        },
        "content": "            editPersonDescriptor.setCompany(ParserUtil.parseCompany(argMultimap.getValue(PREFIX_COMPANY).get()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mechome"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SECTION).isPresent()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mechome"
        },
        "content": "            editPersonDescriptor.setSection(ParserUtil.parseSection(argMultimap.getValue(PREFIX_SECTION).get()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mechome"
        },
        "content": "        if (argMultimap.getValue(PREFIX_RANK).isPresent()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mechome"
        },
        "content": "            editPersonDescriptor.setRank(ParserUtil.parseRank(argMultimap.getValue(PREFIX_RANK).get()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PASSWORD).isPresent()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            editPersonDescriptor.setPassword(ParserUtil.parsePassword(argMultimap.getValue(PREFIX_PASSWORD).get()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        if (argMultimap.getValue(PREFIX_USERTYPE).isPresent()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            editPersonDescriptor.setUserType(ParserUtil.parseUserType(argMultimap.getValue(PREFIX_USERTYPE).get()));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor, userName);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand (General)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * and returns an ArgumentMultimap object."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private ArgumentMultimap initMultimapGeneral(String args) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_COMPANY, PREFIX_SECTION, PREFIX_RANK,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                        PREFIX_NAME, PREFIX_PHONE, PREFIX_TAG, PREFIX_PASSWORD);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand (Admin)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * and returns an ArgumentMultimap object."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private ArgumentMultimap initMultimapAdmin(String args) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NRIC, PREFIX_COMPANY, PREFIX_SECTION, PREFIX_RANK,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                        PREFIX_NAME, PREFIX_PHONE, PREFIX_TAG, PREFIX_PASSWORD, PREFIX_USERTYPE);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 69,
      "mechome": 12,
      "exactlyprecise": 93
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.UserType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public FindCommand parse(String args, UserType userType, String userName) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 32,
      "exactlyprecise": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.UserType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    T parse(String userInput, UserType userType, String userName) throws ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "exactlyprecise": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mechome"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mechome"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mechome"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.UserType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.person.Password;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.person.Rank;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.person.Section;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_DATE \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mechome"
        },
        "content": "            \"Dates should be valid Gregorian dates of the format [ddmmyy].\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE \u003d \"Date is not a valid [ddmmyy] string.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final String VALIDATION_REGEX_DATE \u003d \"\\\\d{6}\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Parses a {@code String date} into a {@code LocalDate}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mechome"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static LocalDate parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mechome"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mechome"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mechome"
        },
        "content": "        if (!trimmedDate.matches(VALIDATION_REGEX_DATE)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mechome"
        },
        "content": "            throw new ParseException(MESSAGE_CONSTRAINTS_DATE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mechome"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"ddMMyy\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mechome"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mechome"
        },
        "content": "            LocalDate parsedDate \u003d LocalDate.parse(date, formatter);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mechome"
        },
        "content": "            return parsedDate;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mechome"
        },
        "content": "        } catch (DateTimeParseException dtpe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mechome"
        },
        "content": "            throw new ParseException(MESSAGE_CONSTRAINTS_DATE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Parses a {@code String nric} into a {@code Nric}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mechome"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * @throws ParseException if the given {@code nric} is invalid."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static Nric parseNric(String nric) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mechome"
        },
        "content": "        requireNonNull(nric);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mechome"
        },
        "content": "        String trimmedNric \u003d nric.trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mechome"
        },
        "content": "        if (!Nric.isValidNric(trimmedNric)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mechome"
        },
        "content": "            throw new ParseException(Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return new Nric(trimmedNric);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Parses a {@code String company} into a {@code Company}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mechome"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * @throws ParseException if the given {@code company} is invalid."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static Company parseCompany(String company) throws ParseException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mechome"
        },
        "content": "        requireNonNull(company);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mechome"
        },
        "content": "        String trimmedCompany \u003d company.trim();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mechome"
        },
        "content": "        if (!Company.isValidCompany(trimmedCompany)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mechome"
        },
        "content": "            throw new ParseException(Company.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return new Company(trimmedCompany);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Parses a {@code String section} into a {@code Section}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mechome"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * @throws ParseException if the given {@code section} is invalid."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static Section parseSection(String section) throws ParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mechome"
        },
        "content": "        requireNonNull(section);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mechome"
        },
        "content": "        String trimmedSection \u003d section.trim();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mechome"
        },
        "content": "        if (!Section.isValidSection(trimmedSection)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mechome"
        },
        "content": "            throw new ParseException(Section.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return new Section(trimmedSection);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Parses a {@code String rank} into a {@code Rank}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mechome"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * @throws ParseException if the given {@code rank} is invalid."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static Rank parseRank(String rank) throws ParseException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mechome"
        },
        "content": "        requireNonNull(rank);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mechome"
        },
        "content": "        String trimmedRank \u003d rank.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mechome"
        },
        "content": "        if (!Rank.isValidRank(trimmedRank)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mechome"
        },
        "content": "            throw new ParseException(Rank.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return new Rank(trimmedRank);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * Parses a {@code String password} into a {@code Password}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * @throws ParseException if the given {@code password} is invalid."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static Password parsePassword(String password) throws ParseException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        requireNonNull(password);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        String trimmedPassword \u003d password.trim();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        if (!Password.isValidPassword(trimmedPassword)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throw new ParseException(Password.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return new Password(trimmedPassword);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * Parses a {@code String userType} into a {@code UserType}."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     *"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * @throws ParseException if the given {@code userType} is invalid."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static UserType parseUserType (String userType) throws ParseException {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        requireNonNull(userType);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        String trimmedUserType \u003d userType.trim();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        if (trimmedUserType.matches(\"[A\\\\s].*\")) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            return UserType.ADMIN;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        } else if (trimmedUserType.matches(\"[G\\\\s].*\")) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            return UserType.GENERAL;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throw new ParseException(UserType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjpan47": 1,
      "-": 99,
      "mechome": 89,
      "exactlyprecise": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/PersonnelDatabaseParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.UserType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.logic.ViewCurrentCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.logic.ViewNextCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.logic.commands.AcceptSwapCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import seedu.address.logic.commands.BlockDateCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.logic.commands.ConfirmScheduleCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.logic.commands.DutySettingsCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.logic.commands.PointsCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.logic.commands.SwapCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import seedu.address.logic.commands.UnconfirmCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mechome"
        },
        "content": "public class PersonnelDatabaseParser {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public Command parseCommand(String userInput, UserType userType, String userName) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mechome"
        },
        "content": "        case AcceptSwapCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mechome"
        },
        "content": "            return new AcceptSwapCommandParser().parse(arguments, userType, userName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            return new AddCommandParser().parse(arguments, userType, userName);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        case BlockDateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            return new BlockDateCommandParser().parse(arguments, userType, userName);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            return new DeleteCommandParser().parse(arguments, userType, userName);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            return new EditCommandParser().parse(arguments, userType, userName);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            return new FindCommandParser().parse(arguments, userType, userName);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        case ScheduleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            return new ScheduleCommand();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            return new SelectCommandParser().parse(arguments, userType, userName);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            return new SortCommand();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        case ConfirmScheduleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            return new ConfirmScheduleCommand();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mechome"
        },
        "content": "        case SwapCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            return new SwapCommandParser().parse(arguments, userType, userName);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        case ViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            return new ViewCommandParser().parse(arguments, userType, userName);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        case UnconfirmCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            return new UnconfirmCommand();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        case DutySettingsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            return new DutySettingsCommandParser().parse(arguments, userType, userName);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        case PointsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            return new PointsCommandParser().parse(arguments, userType, userName);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        case ViewCurrentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            return new ViewCurrentCommand();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        case ViewNextCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            return new ViewNextCommand();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 2,
      "yjpan47": 15,
      "dreampursuer95": 26,
      "-": 78,
      "mechome": 8,
      "exactlyprecise": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/PointsCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.commons.core.UserType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.logic.commands.PointsCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Valatheking"
        },
        "content": " * Parses input arguments and creates a new PointsCommnad object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Valatheking"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "public class PointsCommandParser implements Parser\u003cPointsCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public PointsCommand parse(String args, UserType userType, String userName) throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            if (args.equals(\"\")) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                return new PointsCommand();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                return new PointsCommand(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, PointsCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 3,
      "yjpan47": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SelectCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.UserType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new SelectCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParser implements Parser\u003cSelectCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an SelectCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public SelectCommand parse(String args, UserType userType, String userName) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "exactlyprecise": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SwapCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mechome"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NO_AUTHORITY_PARSE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLOCATED_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REQUESTED_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mechome"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mechome"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import seedu.address.commons.core.UserType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import seedu.address.logic.commands.SwapCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mechome"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mechome"
        },
        "content": " * Parses input arguments and creates a new SwapCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mechome"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mechome"
        },
        "content": "public class SwapCommandParser implements Parser\u003cSwapCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SwapCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * and returns an SwapCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public SwapCommand parse(String args, UserType userType, String userName) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mechome"
        },
        "content": "        if (!userName.equals(UserType.DEFAULT_ADMIN_USERNAME)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mechome"
        },
        "content": "            return parseForPersonnelUser(args, userName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throw new ParseException(MESSAGE_NO_AUTHORITY_PARSE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SwapCommand for accounts associated with"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * a personnel and returns an SwapCommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public SwapCommand parseForPersonnelUser(String args, String userName) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mechome"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mechome"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ALLOCATED_DATE, PREFIX_REQUESTED_DATE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mechome"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ALLOCATED_DATE, PREFIX_REQUESTED_DATE)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mechome"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mechome"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SwapCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mechome"
        },
        "content": "        LocalDate currentDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_ALLOCATED_DATE).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mechome"
        },
        "content": "        LocalDate requestedDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_REQUESTED_DATE).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return new SwapCommand(currentDate, requestedDate, userName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mechome"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 6,
      "yjpan47": 1,
      "mechome": 44,
      "exactlyprecise": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ViewCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MASTERADMIN_ERROR;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import seedu.address.commons.core.UserType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Valatheking"
        },
        "content": " * Parses input arguments and creates a new ViewCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Valatheking"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "public class ViewCommandParser implements Parser\u003cViewCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * and returns an ViewCommand object for execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public ViewCommand parse(String args, UserType userType, String userName) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mechome"
        },
        "content": "            if (userName.equals(UserType.DEFAULT_ADMIN_USERNAME)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                throw new ParseException(MESSAGE_MASTERADMIN_ERROR);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            userName \u003d trimmedArgs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        return new ViewCommand(userName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 9,
      "dreampursuer95": 20,
      "mechome": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/DutyCalendar.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import seedu.address.commons.util.CalendarUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.model.duty.DutyMonth;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.duty.DutySettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.model.duty.DutyStorage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": " * Represents a Calendar that contains duties for the current and the following months"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "public class DutyCalendar {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private static final int NUMBER_OF_MONTHS_IN_YEAR \u003d 12;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    private int currentYear;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    private int currentMonthIndex;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    private DutyMonth currentMonth;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    private DutyMonth nextMonth;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    private DutyMonth dummyNextMonth;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    private DutyStorage dutyStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * Default constructor with no data contained within."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public DutyCalendar() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.currentYear \u003d CalendarUtil.getCurrentYear();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        this.currentMonthIndex \u003d CalendarUtil.getCurrentMonth();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.currentMonth \u003d new DutyMonth(this.currentYear, this.currentMonthIndex,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                CalendarUtil.dayOfFirstDayOfMonth(this.currentYear, this.currentMonthIndex));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        int yearOfNextMonth \u003d currentMonthIndex \u003d\u003d 11 ? currentYear + 1 : currentYear;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.nextMonth \u003d new DutyMonth(yearOfNextMonth, this.currentMonthIndex + 1 ,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                CalendarUtil.dayOfFirstDayOfMonth(yearOfNextMonth, this.currentMonthIndex + 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.dutyStorage \u003d new DutyStorage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public DutyCalendar(DutyMonth currentMonth, DutyMonth nextMonth, DutyStorage dutyStorage) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        this.currentYear \u003d CalendarUtil.getCurrentYear();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        this.currentMonthIndex \u003d CalendarUtil.getCurrentMonth();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        this.currentMonth \u003d currentMonth;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        this.nextMonth \u003d nextMonth;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.dutyStorage \u003d dutyStorage;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public int getCurrentMonthIndex() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return this.currentMonthIndex;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public DutyMonth getCurrentMonth() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return currentMonth;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public DutyMonth getNextMonth() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return nextMonth;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public DutyMonth getDummyNextMonth() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        return dummyNextMonth;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public DutyStorage getDutyStorage() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return dutyStorage;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public int getCurrentYear() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return currentYear;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     *  Sets Duty Calendar"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public void setDutyCalendar(DutyCalendar dutyCalendar) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        if (dutyCalendar.getCurrentMonth().getMonthIndex() \u003d\u003d CalendarUtil.getCurrentMonth()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            this.currentMonth \u003d dutyCalendar.getCurrentMonth();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            this.nextMonth \u003d dutyCalendar.getNextMonth();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            this.dutyStorage \u003d dutyCalendar.getDutyStorage();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            this.rollover(dutyCalendar);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Schedules the cuties for next Month"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void scheduleDutyForNextMonth(List\u003cPerson\u003e persons,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mechome"
        },
        "content": "                                         DutySettings dutySettings, DutyStorage dutyStorage) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        this.dummyNextMonth \u003d new DutyMonth(nextMonth);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        dummyNextMonth.schedule(persons, dutySettings, dutyStorage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Confirms Schedule"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public void confirm() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        this.nextMonth \u003d this.dummyNextMonth;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        this.nextMonth.confirm();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Unconfirms schedule"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public void unconfirm() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        int yearOfNextMonth \u003d currentMonthIndex \u003d\u003d 11 ? currentYear + 1 : currentYear;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        this.nextMonth \u003d new DutyMonth(yearOfNextMonth, this.currentMonthIndex + 1 ,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                CalendarUtil.dayOfFirstDayOfMonth(yearOfNextMonth, this.currentMonthIndex + 1));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * Replace currentMonth with nextMonth and create a new nextMonth class"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * @param dutyCalendar the dutyCalendar from the storage"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    private void rollover(DutyCalendar dutyCalendar) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        this.currentMonth \u003d dutyCalendar.getNextMonth();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        int yearOfNextMonth \u003d currentMonthIndex \u003d\u003d 11 ? currentYear + 1 : currentYear;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.nextMonth \u003d new DutyMonth(yearOfNextMonth, this.currentMonthIndex + 1 ,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                CalendarUtil.dayOfFirstDayOfMonth(yearOfNextMonth, this.currentMonthIndex + 1));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 14,
      "yjpan47": 40,
      "dreampursuer95": 53,
      "-": 1,
      "mechome": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mechome"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.UserType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.duty.DutyMonth;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.model.duty.DutySettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.model.duty.DutyStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "     * Returns the user prefs\u0027 Duty settings."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    DutySettings getDutySettings();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "     * Sets the user prefs\u0027 Duty settings."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    void setDutySettings(DutySettings dutySettings);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Returns the user prefs\u0027 personnel database file path."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mechome"
        },
        "content": "    Path getPersonnelDatabaseFilePath();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Sets the user prefs\u0027 personnel database file path."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mechome"
        },
        "content": "    void setPersonnelDatabaseFilePath(Path personnelDatabaseFilePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Replaces personnel database data with the data in {@code personnelDatabase}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mechome"
        },
        "content": "    void setPersonnelDatabase(ReadOnlyPersonnelDatabase personnelDatabase);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * Returns the PersonnelDatabase"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mechome"
        },
        "content": "    ReadOnlyPersonnelDatabase getPersonnelDatabase();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "     * Returns Duty Storage"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    DutyStorage getDutyStorage();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * Sorts the PersonnelDatabase by name"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mechome"
        },
        "content": "    void sortPersonnelDatabase();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the personnel database."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the personnel database,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * using the NRIC value"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    boolean hasPerson(String nric);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * The person must exist in the personnel database."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * {@code person} must not already exist in the personnel database."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * {@code target} must exist in the personnel database."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * in the personnel database."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * Returns an unmodifiable view of the filtered person list"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    /** Returns an unmodifiable view of the duty for dates */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    //ObservableList\u003cPerson\u003e getDutyForDates();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Returns true if the model has previous personnel database states to restore."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mechome"
        },
        "content": "    boolean canUndoPersonnelDatabase();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Returns true if the model has undone personnel database states to restore."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mechome"
        },
        "content": "    boolean canRedoPersonnelDatabase();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Restores the model\u0027s personnel database to its previous state."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mechome"
        },
        "content": "    void undoPersonnelDatabase();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Restores the model\u0027s personnel database to its previously undone state."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mechome"
        },
        "content": "    void redoPersonnelDatabase();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Saves the current personnel database state for undo/redo."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mechome"
        },
        "content": "    void commitPersonnelDatabase();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selected person in the filtered person list."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no person is selected."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the selected person in the filtered person list."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no person is selected."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    Person getSelectedPerson();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the selected person in the filtered person list."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    void setSelectedPerson(Person person);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * Returns UserType of account if found, null otherwise."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    UserType findAccount(String userName, String password);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * Returns Person of account if found, null otherwise."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    Person findPerson(String userName);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * Returns the duty calendar of current personnel database."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    DutyCalendar getDutyCalendar();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Add a swap request to the model"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "mechome"
        },
        "content": "    void addSwapRequest(String nric, LocalDate allocatedDate, LocalDate requestedDate);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Schedule the next duty month in the model."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "mechome"
        },
        "content": "    void scheduleDutyForNextMonth();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * Returns DutyMonth for next month"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    DutyMonth getNextDutyMonth();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * Returns DutyMonth for current month"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    DutyMonth getCurrentDutyMonth();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * Returns dummy DutyMonth"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    DutyMonth getDummyNextMonth();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjpan47": 18,
      "dreampursuer95": 28,
      "-": 108,
      "mechome": 34,
      "exactlyprecise": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mechome"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.UserType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.duty.DutyMonth;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.model.duty.DutySettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.model.duty.DutyStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    private final VersionedPersonnelDatabase versionedPersonnelDatabase;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final SimpleObjectProperty\u003cPerson\u003e selectedPerson \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * Initializes a ModelManager with the given personnelDatabase, dutyCalendar and userPrefs."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public ModelManager(ReadOnlyPersonnelDatabase personnelDatabase, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        requireAllNonNull(personnelDatabase, userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        logger.fine(\"Initializing with personnel database: \" + personnelDatabase + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        versionedPersonnelDatabase \u003d new VersionedPersonnelDatabase(personnelDatabase);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedPersonnelDatabase.getPersonList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.addListener(this::ensureSelectedPersonIsValid);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mechome"
        },
        "content": "        this(new PersonnelDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public DutySettings getDutySettings() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return userPrefs.getDutySettings();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public void setDutySettings(DutySettings dutySettings) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        requireNonNull(dutySettings);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        userPrefs.setDutySettings(dutySettings);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public Path getPersonnelDatabaseFilePath() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return userPrefs.getPersonnelDatabaseFilePath();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void setPersonnelDatabaseFilePath(Path personnelDatabaseFilePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mechome"
        },
        "content": "        requireNonNull(personnelDatabaseFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mechome"
        },
        "content": "        userPrefs.setPersonnelDatabaseFilePath(personnelDatabaseFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mechome"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PersonnelDatabase \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void setPersonnelDatabase(ReadOnlyPersonnelDatabase personnelDatabase) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mechome"
        },
        "content": "        versionedPersonnelDatabase.resetData(personnelDatabase);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public ReadOnlyPersonnelDatabase getPersonnelDatabase() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        return versionedPersonnelDatabase;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public DutyCalendar getDutyCalendar() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        return versionedPersonnelDatabase.getDutyCalendar();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public DutyStorage getDutyStorage() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return versionedPersonnelDatabase.getDutyCalendar().getDutyStorage();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void sortPersonnelDatabase() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        versionedPersonnelDatabase.sort();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        return versionedPersonnelDatabase.hasPerson(person);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public boolean hasPerson(String nric) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        return versionedPersonnelDatabase.hasPerson(nric);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        versionedPersonnelDatabase.removePerson(target);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        versionedPersonnelDatabase.addPerson(person);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        versionedPersonnelDatabase.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public DutyMonth getCurrentDutyMonth() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return getDutyCalendar().getCurrentMonth();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public DutyMonth getNextDutyMonth() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return getDutyCalendar().getNextMonth();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public DutyMonth getDummyNextMonth() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        return getDutyCalendar().getDummyNextMonth();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void scheduleDutyForNextMonth() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mechome"
        },
        "content": "        versionedPersonnelDatabase.scheduleDutyForNextMonth(getFilteredPersonList(),"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mechome"
        },
        "content": "                getDutySettings(), getDutyStorage());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mechome"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Swap Requests \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void addSwapRequest(String nric, LocalDate allocatedDate, LocalDate requestedDate) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "mechome"
        },
        "content": "        versionedPersonnelDatabase.addRequest(nric, allocatedDate, requestedDate);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public boolean canUndoPersonnelDatabase() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        return versionedPersonnelDatabase.canUndo();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public boolean canRedoPersonnelDatabase() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        return versionedPersonnelDatabase.canRedo();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void undoPersonnelDatabase() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        versionedPersonnelDatabase.undo();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void redoPersonnelDatabase() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        versionedPersonnelDatabase.redo();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void commitPersonnelDatabase() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        versionedPersonnelDatabase.commit();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected person \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        return selectedPerson;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person getSelectedPerson() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        return selectedPerson.getValue();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        if (person !\u003d null \u0026\u0026 !filteredPersons.contains(person)) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        selectedPerson.setValue(person);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * Returns UserType of account given username and password, returns null if no account found."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public UserType findAccount(String userName, String password) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        for (Person person: versionedPersonnelDatabase.getPersonList()) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            String passHash \u003d Integer.toString(password.hashCode());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            if (userName.equals(person.getNric().value) \u0026\u0026 passHash.equals(person.getPassword().value)) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                return person.getUserType();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * Returns Person of account given username, returns null if no person found."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public Person findPerson(String userName) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        for (Person person: versionedPersonnelDatabase.getPersonList()) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            if (userName.equals(person.getNric().value)) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                return person;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ensures {@code selectedPerson} is a valid person in {@code filteredPersons}."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    private void ensureSelectedPersonIsValid(ListChangeListener.Change\u003c? extends Person\u003e change) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            if (selectedPerson.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "                // null is always a valid selected person, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean wasSelectedPersonReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedPerson.getValue());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "            if (wasSelectedPersonReplaced) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "                // Update selectedPerson to its new value."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedPerson.getValue());"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedPerson.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean wasSelectedPersonRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "                    .anyMatch(removedPerson -\u003e selectedPerson.getValue().isSamePerson(removedPerson));"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "            if (wasSelectedPersonRemoved) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "                // Select the person that came before it in the list,"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "                // or clear the selection if there is no such person."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedPerson.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        return versionedPersonnelDatabase.equals(other.versionedPersonnelDatabase)"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedPerson.get(), other.selectedPerson.get());"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjpan47": 16,
      "dreampursuer95": 29,
      "-": 216,
      "mechome": 28,
      "exactlyprecise": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/model/PersonnelDatabase.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mechome"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mechome"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.duty.DutySettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.duty.DutyStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mechome"
        },
        "content": " * Wraps all data at the personnel database level"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mechome"
        },
        "content": "public class PersonnelDatabase implements ReadOnlyPersonnelDatabase {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    private final DutyCalendar dutyCalendar;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private final List\u003cRequest\u003e requests;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        dutyCalendar \u003d new DutyCalendar();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mechome"
        },
        "content": "        requests \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public PersonnelDatabase() {}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Creates an PersonnelDatabase using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public PersonnelDatabase(ReadOnlyPersonnelDatabase toBeCopied) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Replaces the contents of the duty calendar with {@code dutyCalendar}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * {@code dutyCalendar} must not contain duplicate duties."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public void setDutyCalendar(DutyCalendar dutyCalendar) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        this.dutyCalendar.setDutyCalendar(dutyCalendar);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mechome"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Replaces the contents of the request list with {@code requestList}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void setRequests(List\u003cRequest\u003e requestList) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mechome"
        },
        "content": "        this.requests.clear();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mechome"
        },
        "content": "        this.requests.addAll(requestList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mechome"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Schedules duty for next month in {@code dutyCalendar}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void scheduleDutyForNextMonth(List\u003cPerson\u003e persons,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mechome"
        },
        "content": "                                         DutySettings dutySettings, DutyStorage dutyStorage) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mechome"
        },
        "content": "        this.dutyCalendar.scheduleDutyForNextMonth(persons, dutySettings, dutyStorage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Resets the existing data of this {@code PersonnelDatabase} with {@code newData}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void resetData(ReadOnlyPersonnelDatabase newData) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        setDutyCalendar(newData.getDutyCalendar());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mechome"
        },
        "content": "        setRequests(newData.getRequestList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Sorts the persons in the personnal database by name"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.sort();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mechome"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the personnel database."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the personnel database,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * using the NRIC value"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public boolean hasPerson(String nric) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        boolean found \u003d false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        for (Person person : persons) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            if (person.getNric().toString().equals(nric)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                found \u003d true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        return found;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Adds a person to the personnel database."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * The person must not already exist in the personnel database."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * {@code target} must exist in the personnel database."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * The person identity of {@code editedPerson}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * must not be the same as another existing person in the personnel database."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Removes {@code key} from this {@code PersonnelDatabase}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * {@code key} must exist in the personnel database."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Adds a swap request to the request list by fields."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void addRequest(String nric, LocalDate allocatedDate, LocalDate requestedDate) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mechome"
        },
        "content": "        requests.add(new Request(nric, allocatedDate, requestedDate));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mechome"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Adds a swap request to the request list."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void addRequest(Request request) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mechome"
        },
        "content": "        requests.add(request);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mechome"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Notifies listeners that the personnel database has been modified."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void indicateModified() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public DutyCalendar getDutyCalendar() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return this.dutyCalendar;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public List\u003cRequest\u003e getRequestList() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return this.requests;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "mechome"
        },
        "content": "                || (other instanceof PersonnelDatabase // instanceof handles nulls"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "mechome"
        },
        "content": "                \u0026\u0026 persons.equals(((PersonnelDatabase) other).persons));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 6,
      "yjpan47": 1,
      "dreampursuer95": 26,
      "-": 133,
      "mechome": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyPersonnelDatabase.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mechome"
        },
        "content": " * Unmodifiable view of a personnel database"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mechome"
        },
        "content": "public interface ReadOnlyPersonnelDatabase extends Observable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "     * Returns an unmodifiable view of the duty duty."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "     * This duty will not contain any duplicate duties."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    DutyCalendar getDutyCalendar();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Returns a list of requests."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mechome"
        },
        "content": "    List\u003cRequest\u003e getRequestList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 4,
      "yjpan47": 2,
      "dreampursuer95": 4,
      "-": 13,
      "mechome": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.model.duty.DutySettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    DutySettings getDutySettings();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mechome"
        },
        "content": "    Path getPersonnelDatabaseFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjpan47": 3,
      "-": 16,
      "mechome": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.model.duty.DutySettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    private DutySettings dutySettings \u003d new DutySettings();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private Path personnelDatabaseFilePath \u003d Paths.get(\"data\" , \"personneldatabase.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        setDutySettings(newUserPrefs.getDutySettings());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mechome"
        },
        "content": "        setPersonnelDatabaseFilePath(newUserPrefs.getPersonnelDatabaseFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public DutySettings getDutySettings() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return dutySettings;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public void setDutySettings(DutySettings dutySettings) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        requireNonNull(dutySettings);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.dutySettings \u003d dutySettings;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public Path getPersonnelDatabaseFilePath() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return personnelDatabaseFilePath;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void setPersonnelDatabaseFilePath(Path personnelDatabaseFilePath) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mechome"
        },
        "content": "        requireNonNull(personnelDatabaseFilePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mechome"
        },
        "content": "        this.personnelDatabaseFilePath \u003d personnelDatabaseFilePath;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                \u0026\u0026 personnelDatabaseFilePath.equals(o.personnelDatabaseFilePath)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                \u0026\u0026 dutySettings.equals(o.dutySettings);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return Objects.hash(guiSettings, personnelDatabaseFilePath, dutySettings);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mechome"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + personnelDatabaseFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        sb.append(\"\\nDuty : \" + dutySettings);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjpan47": 14,
      "-": 79,
      "mechome": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedPersonnelDatabase.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mechome"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mechome"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mechome"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mechome"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mechome"
        },
        "content": " * {@code PersonnelDatabase} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mechome"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mechome"
        },
        "content": "public class VersionedPersonnelDatabase extends PersonnelDatabase {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private final List\u003cReadOnlyPersonnelDatabase\u003e personnelDatabaseStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public VersionedPersonnelDatabase(ReadOnlyPersonnelDatabase initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mechome"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mechome"
        },
        "content": "        personnelDatabaseStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mechome"
        },
        "content": "        personnelDatabaseStateList.add(new PersonnelDatabase(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mechome"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Saves a copy of the current {@code PersonnelDatabase} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mechome"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mechome"
        },
        "content": "        personnelDatabaseStateList.add(new PersonnelDatabase(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mechome"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mechome"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mechome"
        },
        "content": "        personnelDatabaseStateList.subList(currentStatePointer + 1, personnelDatabaseStateList.size()).clear();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Restores the personnel database to its previous state."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mechome"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mechome"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mechome"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mechome"
        },
        "content": "        resetData(personnelDatabaseStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Restores the personnel database to its previously undone state."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mechome"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mechome"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mechome"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mechome"
        },
        "content": "        resetData(personnelDatabaseStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Returns true if {@code undo()} has personnel database states to undo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Returns true if {@code redo()} has personnel database states to redo."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return currentStatePointer \u003c personnelDatabaseStateList.size() - 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mechome"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mechome"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mechome"
        },
        "content": "        if (!(other instanceof VersionedPersonnelDatabase)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mechome"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mechome"
        },
        "content": "        VersionedPersonnelDatabase otherVersionedPersonnelDatabase \u003d (VersionedPersonnelDatabase) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return super.equals(otherVersionedPersonnelDatabase)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mechome"
        },
        "content": "                \u0026\u0026 personnelDatabaseStateList.equals(otherVersionedPersonnelDatabase.personnelDatabaseStateList)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mechome"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedPersonnelDatabase.currentStatePointer;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mechome"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mechome"
        },
        "content": "            super(\"Current state pointer at start of personnelDatabaseState list, unable to undo.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mechome"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mechome"
        },
        "content": "            super(\"Current state pointer at end of personnelDatabaseState list, unable to redo.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mechome"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mechome": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/model/duty/Duty.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "package seedu.address.model.duty;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import java.security.InvalidParameterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.commons.util.DateUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Valatheking"
        },
        "content": " * Duty class has indexes for current month day and duty class methods"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjpan47"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "public class Duty {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    //  Year"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    //  Represent month (i.e. 1, 2, 3, ... , 12)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    private int monthIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    //  Represent the day of the month (1, 2, 3 ... 31)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    private int dayIndex;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    //  Represent the day of the week (1, 2, 3 ... 7)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    private int dayOfWeekIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    //  List of persons assigned to this duty"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    private List\u003cPerson\u003e persons;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    // Total number of persons needed for this duty"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    private int capacity;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    // Number of people still needed"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    private int vacancies;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    // Points awarded for doing this duty"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    private int points;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public Duty(int year, int monthIndex, int dayIndex, int dayOfWeekIndex, int capacity, int points) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        if (DateUtil.isValidDate(year, monthIndex, dayIndex) \u0026\u0026 DateUtil.isValidDayOfWeek(dayOfWeekIndex)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            this.year \u003d year;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            this.monthIndex \u003d monthIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            this.dayIndex \u003d dayIndex;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            this.dayOfWeekIndex \u003d dayOfWeekIndex;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            this.capacity \u003d capacity;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            this.points \u003d points;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            this.persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            throw new InvalidParameterException(\"Invalid Date\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * Constructor for reconstruction of Duty object from json storage"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * @param year this year"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * @param monthIndex this monthIndex"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * @param dayIndex this dayIndex"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * @param dayOfWeekIndex this dayOfWeekIndex"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * @param capacity this capacity"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * @param vacancies this vacancies"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * @param points this points"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * @param personList this personList"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public Duty(int year, int monthIndex, int dayIndex, int dayOfWeekIndex, int capacity,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                int vacancies, int points, List\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        if (DateUtil.isValidDate(year, monthIndex, dayIndex) \u0026\u0026 DateUtil.isValidDayOfWeek(dayOfWeekIndex)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            this.year \u003d year;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            this.monthIndex \u003d monthIndex;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            this.dayIndex \u003d dayIndex;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            this.dayOfWeekIndex \u003d dayOfWeekIndex;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            this.capacity \u003d capacity;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            this.vacancies \u003d vacancies;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            this.points \u003d points;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            this.persons \u003d new ArrayList\u003c\u003e(personList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            throw new InvalidParameterException(\"Invalid Date\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Adds the input person into the duty"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        if (this.persons.contains(person)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            throw new InvalidParameterException(person + \" is already assigned \" + this);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        } else if (this.isFilled()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            throw new InvalidParameterException(this + \" is already filled \");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            this.persons.add(person);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public boolean contains(Person person) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        return this.persons.contains(person);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Remove person from duty"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public void removePerson(Person remove) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        Person target \u003d null;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        for (Person person : this.getPersons()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            if (remove.getNric().toString().equals(person.getNric().toString())) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                target \u003d person;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        if (target !\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            this.persons.remove(target);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Replace person in duty"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public void replacePerson(Person remove, Person replace) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        Person target \u003d null;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        for (Person person : this.getPersons()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            if (remove.getNric().toString().equals(person.getNric().toString())) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                target \u003d person;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        if (target !\u003d null) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            this.persons.remove(target);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            this.persons.add(replace);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public boolean isFilled() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return this.persons.size() \u003d\u003d this.capacity;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public int getYear() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        return this.year;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public int getMonthIndex() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return this.monthIndex;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public String getMonthString() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return DateUtil.getMonth(this.monthIndex);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public int getDayIndex() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return this.dayIndex;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public int getDayOfWeekIndex() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return this.dayOfWeekIndex;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public String getdayOfWeek() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return DateUtil.getDayOfWeek(this.dayOfWeekIndex);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public List\u003cPerson\u003e getPersons() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return this.persons;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * Returns the string of all the persons in the duty minus the current person."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * @param nric"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public String getPersonsString(String nric) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        String personString \u003d \"\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        for (Person person : this.persons) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            if (!person.getNric().toString().equals(nric)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                personString \u003d personString + \"  \" + person.getName().toString();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        return personString;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public int getCapacity() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return this.capacity;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public int getVacancies() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return this.vacancies;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public int getPoints() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return this.points;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        return String.format(\"Duty : %d %s %d | \", this.getDayIndex(), this.getMonthString(), this.getYear())"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "                + String.format(\"%s | \", this.getdayOfWeek())"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "                + String.format(\"%d points\\n\", this.getPoints());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Valatheking": 13,
      "yjpan47": 125,
      "dreampursuer95": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/duty/DutyMonth.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "package seedu.address.model.duty;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import java.security.InvalidParameterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import java.util.PriorityQueue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.commons.util.DateUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Valatheking"
        },
        "content": " * Duty month class has a month of duties for the current month"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Valatheking"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "public class DutyMonth {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    private boolean confirmed \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    private int monthIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    private int firstDayOfWeekIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    private List\u003cDuty\u003e scheduledDuties \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    private HashMap\u003cPerson, List\u003cInteger\u003e\u003e blockedDays \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * Default constructor"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * @param year current year"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * @param monthIndex current index of month (0 - 11)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * @param firstDayOfWeekIndex day of the week of first day of current month (1 for Sunday - 7 for Saturday)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public DutyMonth(int year, int monthIndex, int firstDayOfWeekIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        if (DateUtil.isValidYear(year) \u0026\u0026 DateUtil.isValidMonth(monthIndex)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                \u0026\u0026 DateUtil.isValidDayOfWeek(firstDayOfWeekIndex)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            this.year \u003d year;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            this.monthIndex \u003d monthIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            this.firstDayOfWeekIndex \u003d firstDayOfWeekIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            throw new InvalidParameterException(\"Invalid Date\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * Constructor for reconstructing DutyMonth object from json"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * @param year current year"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * @param monthIndex current index of month (0 - 11)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * @param firstDayOfWeekIndex day of the week of first day of current month (1 for Sunday - 7 for Saturday)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * @param duties the list of the duties"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * @param blockedDays the list of blocked dates"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public DutyMonth(boolean confirmed, int year, int monthIndex, int firstDayOfWeekIndex,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                     List\u003cDuty\u003e duties, HashMap\u003cPerson, List\u003cInteger\u003e\u003e blockedDays) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        this.confirmed \u003d confirmed;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        this.monthIndex \u003d monthIndex;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        this.firstDayOfWeekIndex \u003d firstDayOfWeekIndex;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        this.scheduledDuties.addAll(duties);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        this.blockedDays.putAll(blockedDays);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * Constructor for making a dummy copy of the dutyMonth for the purpose of scheduling"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * @param dutyMonth to be copied."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public DutyMonth(DutyMonth dutyMonth) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        this.year \u003d dutyMonth.getYear();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        this.monthIndex \u003d dutyMonth.getMonthIndex();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        this.firstDayOfWeekIndex \u003d dutyMonth.getFirstDayOfWeekIndex();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        this.blockedDays \u003d new HashMap\u003c\u003e(dutyMonth.getBlockedDates());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Adds a day to the blocked list for the person inputted"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public void addBlockedDay(Person person, int day) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        if (DateUtil.isValidDate(this.year, this.monthIndex, day)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            this.blockedDays.putIfAbsent(person, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            if (!this.blockedDays.get(person).contains(day)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                this.blockedDays.get(person).add(day);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            throw new InvalidParameterException(\"Invalid Date\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * Schedule allocates duties for the DutyMonth"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public void schedule(List\u003cPerson\u003e persons, DutySettings dutySettings, DutyStorage dutyStorage) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        // Temporary Storage for points earned"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        HashMap\u003cPerson, Integer\u003e points \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        for (Person person : persons) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "            points.put(person, dutyStorage.getDutyPoints().getOrDefault(person, 0));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        // List of Duties"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        List\u003cDuty\u003e dutyList \u003d generateAllDuties(dutySettings);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        // Priority Queue of Persons"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        PriorityQueue\u003cPerson\u003e personQueue \u003d new PriorityQueue\u003c\u003e(Comparator.comparingInt(points::get));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        personQueue.addAll(persons);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        if (personQueue.isEmpty()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            this.scheduledDuties.addAll(dutyList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            this.scheduledDuties.sort(Comparator.comparingInt(Duty::getDayIndex));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        for (Duty duty : dutyList) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            while (!duty.isFilled()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                boolean hasAssignable \u003d true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                Person person \u003d personQueue.poll();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                List\u003cPerson\u003e tempList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                while (!this.isAssignable(person, duty)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                    if (personQueue.isEmpty()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                        hasAssignable \u003d false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                    tempList.add(person);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                    person \u003d personQueue.poll();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                personQueue.addAll(tempList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                if (hasAssignable) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                    duty.addPerson(person);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                    points.replace(person, points.get(person) + duty.getPoints());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                    personQueue.add(person);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                    personQueue.add(person);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.scheduledDuties.clear();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        this.scheduledDuties.addAll(dutyList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.scheduledDuties.sort(Comparator.comparingInt(Duty::getDayIndex));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Checks if a person can be assigned to a duty on a given day"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    private boolean isAssignable(Person person, Duty duty) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        if (duty.isFilled()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        } else if ((duty.getPersons().contains(person))) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            return !this.blockedDays.containsKey(person)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                    || !this.blockedDays.get(person).contains(duty.getDayIndex());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Generates duty object for the month"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    private List\u003cDuty\u003e generateAllDuties(DutySettings dutySettings) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        List\u003cDuty\u003e duties \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        int dayOfWeek \u003d this.getFirstDayOfWeekIndex();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        for (int day \u003d 1; day \u003c\u003d this.getNumOfDays(); day++) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            int capacity \u003d dutySettings.getCapacity(this.monthIndex, day, dayOfWeek);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            int points \u003d dutySettings.getPoints(this.monthIndex, day, dayOfWeek);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            Duty duty \u003d new Duty(this.year, this.monthIndex, day, dayOfWeek, capacity, points);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            duties.add(duty);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            dayOfWeek \u003d (dayOfWeek \u003d\u003d 7) ? 1 : dayOfWeek + 1;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        Collections.shuffle(duties);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        duties.sort((d1, d2) -\u003e (d2.getPoints() - d1.getPoints()));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return duties;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public int getFirstDayOfWeekIndex() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return firstDayOfWeekIndex;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public int getMonthIndex() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return monthIndex;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public int getYear() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return year;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public int getNumOfDays() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return DateUtil.getNumOfDaysInMonth(this.year, this.monthIndex);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public List\u003cDuty\u003e getScheduledDuties() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return this.scheduledDuties;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public HashMap\u003cPerson, List\u003cInteger\u003e\u003e getBlockedDates() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        return this.blockedDays;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Prints the scheduled duties for the DutyMonth"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public String printDuties() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        sb.append(String.format(\"---- Duty Roster for %1$s %2$s  ---- \\n\","
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                DateUtil.getMonth(this.monthIndex), this.year));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        for (Duty duty : this.getScheduledDuties()) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            sb.append(String.format(\"%-3d %-10s (%d/%d) : [\","
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                    duty.getDayIndex(), DateUtil.getDayOfWeek(duty.getDayOfWeekIndex()),"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                    duty.getPersons().size(), duty.getCapacity()));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            for (Person person : duty.getPersons()) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                sb.append(String.format(\"%s %s , \", person.getRank(), person.getName()));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            sb.append(\" ]\\n\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Prints the points allocated to the duty personnel for that month"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public String printPoints(DutyStorage dutyStorage) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        sb.append(\"--- Points Awarded ----\\n\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        Set\u003cPerson\u003e personsThisMonth \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        for (Duty duty : this.scheduledDuties) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "            personsThisMonth.addAll(duty.getPersons());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        for (Person person : personsThisMonth) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            int pointsInThePast \u003d dutyStorage.getPoints(person);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            int pointsThisMonth \u003d this.getScheduledDuties().stream()"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                    .filter(duty -\u003e duty.getPersons().contains(person))"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                    .mapToInt(Duty::getPoints)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                    .sum();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            sb.append(String.format(\"%3s %-20s %3d       + %-2d\\n\","
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                    person.getRank(), person.getName(),"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                    pointsInThePast,"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                    pointsThisMonth));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public boolean isConfirmed() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return confirmed;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public void confirm() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        this.confirmed \u003d true;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public void unconfirm() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        this.confirmed \u003d false;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Checks if a person has a duty on a given day"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public boolean isAssignedToDuty(String nric, int day) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "mechome"
        },
        "content": "        List\u003cPerson\u003e personsOnDuty \u003d scheduledDuties.get(day - 1).getPersons();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "mechome"
        },
        "content": "        for (Person person : personsOnDuty) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "mechome"
        },
        "content": "            if (person.getNric().toString().equals(nric)) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "mechome"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "mechome"
        },
        "content": "            }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Swaps duty for two persons"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public void swap(Person t1, Person t2, DutyStorage dutyStorage) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        for (Duty duty : this.getScheduledDuties()) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            duty.replacePerson(t1, t2);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            duty.replacePerson(t2, t1);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        dutyStorage.undo();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        dutyStorage.update(this.getScheduledDuties());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 30,
      "yjpan47": 191,
      "dreampursuer95": 48,
      "mechome": 9,
      "exactlyprecise": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/duty/DutySettings.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "package seedu.address.model.duty;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.commons.util.DateUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Valatheking"
        },
        "content": " * Duty Settings class to hold all the duty settings"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Valatheking"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "public class DutySettings implements Serializable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    private static final int[] DEFAULT_DUTY_POINTS_IN_WEEK \u003d {4, 2 , 2 , 2 , 2 , 3 , 4};"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    private static final int[] DEFAULT_DUTY_CAPACITY_IN_WEEK \u003d {3, 2 , 2 , 2 , 2 , 2 , 3};"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    private int[] dutyPointsInWeek;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    private int[] dutyCapacityInWeek;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    private HashMap\u003cInteger, HashMap\u003cInteger, Integer\u003e\u003e dutyPointsException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    private HashMap\u003cInteger, HashMap\u003cInteger, Integer\u003e\u003e dutyCapacityException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public DutySettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.dutyPointsInWeek \u003d DEFAULT_DUTY_POINTS_IN_WEEK;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.dutyCapacityInWeek \u003d DEFAULT_DUTY_CAPACITY_IN_WEEK;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.dutyPointsException \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.dutyCapacityException \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public DutySettings(int[] dutyPointsInWeek, int[] dutyCapacityInWeek) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.dutyPointsInWeek \u003d dutyCapacityInWeek;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.dutyCapacityInWeek \u003d dutyCapacityInWeek;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public void setPoints(int dayOfWeek, int points) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.dutyPointsInWeek[dayOfWeek - 1] \u003d points;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public void setPoints(int month, int day, int points) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.dutyPointsException.putIfAbsent(month, new HashMap\u003c\u003e());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.dutyPointsException.get(month).put(day, points);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public void setCapacity(int dayOfWeek, int capacity) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.dutyCapacityInWeek[dayOfWeek - 1] \u003d capacity;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public void setCapacity(int month, int day, int capacity) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.dutyCapacityException.putIfAbsent(month, new HashMap\u003c\u003e());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.dutyCapacityException.get(month).put(day, capacity);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public int getPoints(int month, int day, int dayOfWeek) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        if (this.dutyPointsException.containsKey(month) \u0026\u0026 this.dutyPointsException.get(month).containsKey(day)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            return this.dutyPointsException.get(month).get(day);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            return this.dutyPointsInWeek[dayOfWeek - 1];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public int getCapacity(int month, int day, int dayOfWeek) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        if (this.dutyCapacityException.containsKey(month) \u0026\u0026 this.dutyCapacityException.get(month).containsKey(day)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            return this.dutyCapacityException.get(month).get(day);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            return this.dutyCapacityInWeek[dayOfWeek - 1];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Prints the duty settings for each day of the week"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public String printDayOfWeek() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            sb.append(String.format(\"%15s : [Manpower Needed \u003d %2d] [Points Awarded \u003d %2d]\\n\" ,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                    DateUtil.getDayOfWeek(i + 1), this.dutyCapacityInWeek[i], this.dutyPointsInWeek[i]));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        if (!(other instanceof DutySettings)) { //this handles null as well."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        DutySettings o \u003d (DutySettings) other;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return (Arrays.equals(this.dutyPointsInWeek, o.dutyPointsInWeek))"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            \u0026\u0026 (Arrays.equals(this.dutyCapacityInWeek, o.dutyCapacityInWeek))"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            \u0026\u0026 (this.dutyPointsException.equals(o.dutyPointsException))"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                \u0026\u0026 (this.dutyCapacityException.equals(o.dutyCapacityException));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return Objects.hash(this.dutyPointsInWeek, this.dutyCapacityInWeek,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                this.dutyPointsException, this.dutyCapacityException);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 6,
      "yjpan47": 97
    }
  },
  {
    "path": "src/main/java/seedu/address/model/duty/DutyStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "package seedu.address.model.duty;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Valatheking"
        },
        "content": " * DutyStorage class to see the points of each person and update Duties"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Valatheking"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "public class DutyStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    private HashMap\u003cPerson, Integer\u003e dutyPoints;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    private HashMap\u003cPerson, List\u003cString\u003e\u003e dutyRecords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    private HashMap\u003cPerson, Integer\u003e prevDutyPoints;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    private HashMap\u003cPerson, List\u003cString\u003e\u003e prevDutyRecords;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public DutyStorage() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.dutyPoints \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.dutyRecords \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.prevDutyPoints \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.prevDutyRecords \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public DutyStorage(HashMap\u003cPerson, Integer\u003e dutyPoints, HashMap\u003cPerson, List\u003cString\u003e\u003e dutyRecords,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                       HashMap\u003cPerson, Integer\u003e prevDutyPoints, HashMap\u003cPerson, List\u003cString\u003e\u003e prevDutyRecords) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.dutyPoints \u003d dutyPoints;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.dutyRecords \u003d dutyRecords;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.prevDutyPoints \u003d prevDutyPoints;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.prevDutyRecords \u003d prevDutyRecords;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Updates points for each duty done by person"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public void update(List\u003cDuty\u003e duties) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        // Store dutyPoints in a previous pointer"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.prevDutyPoints.clear();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        for (Person person : this.dutyPoints.keySet()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            this.prevDutyPoints.put(person, this.dutyPoints.get(person));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        // Store dutyRecords in a previous pointer"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.prevDutyRecords.clear();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        for (Person person : this.dutyRecords.keySet()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            this.prevDutyRecords.put(person, new ArrayList\u003c\u003e(this.dutyRecords.get(person)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        for (Duty duty : duties) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            for (Person person : duty.getPersons()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                this.dutyPoints.putIfAbsent(person, 0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                this.dutyPoints.replace(person, this.dutyPoints.get(person) + duty.getPoints());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                this.dutyRecords.putIfAbsent(person, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                this.dutyRecords.get(person).add(duty.toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Undoes the storage for dutyPoints"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.dutyPoints.clear();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        for (Person person : this.prevDutyPoints.keySet()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            this.dutyPoints.put(person, this.prevDutyPoints.get(person));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.dutyRecords.clear();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        for (Person person : this.prevDutyRecords.keySet()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            this.dutyRecords.put(person, new ArrayList\u003c\u003e(this.prevDutyRecords.get(person)));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public int getPoints(Person person) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return dutyPoints.getOrDefault(person, 0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    public HashMap\u003cPerson, Integer\u003e getDutyPoints() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        return dutyPoints;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public HashMap\u003cPerson, List\u003cString\u003e\u003e getDutyRecords() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return dutyRecords;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public HashMap\u003cPerson, Integer\u003e getPrevDutyPoints() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return prevDutyPoints;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public HashMap\u003cPerson, List\u003cString\u003e\u003e getPrevDutyRecords() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return prevDutyRecords;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Prints the points accumulated by each person"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public String printPoints() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        sb.append(\"--- Points Accumulated ----\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        for (Person person : this.dutyPoints.keySet()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            int points \u003d this.dutyPoints.get(person);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            sb.append(String.format(\"%3s %-20s %3d\\n\","
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                    person.getRank(), person.getName(),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                    points));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Prints the duties for that month"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public String printDetails(Person person) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        sb.append(String.format(\"Points : %d\\n\", this.dutyPoints.getOrDefault(person, 0)));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        sb.append(\"--- All Duties ---\\n\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        for (String dutyDetails : this.dutyRecords.getOrDefault(person, new ArrayList\u003c\u003e())) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            sb.append(dutyDetails);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Comparator method to compare person by points"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public Comparator\u003cPerson\u003e comparebyPoints() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return (p1, p2) -\u003e {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            if (!this.dutyPoints.containsKey(p1) \u0026\u0026 !this.dutyPoints.containsKey(p2)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            } else if (!this.dutyPoints.containsKey(p1)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            } else if (!this.dutyPoints.containsKey(p2)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                return this.dutyPoints.get(p1) - this.dutyPoints.get(p2);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        };"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Removes Person for Duty Storage"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public void removePerson(Person remove) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        for (Person p : this.dutyPoints.keySet()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            if (remove.getNric().toString().equals(p.getNric().toString())) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                this.dutyPoints.remove(p);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        for (Person p : this.prevDutyPoints.keySet()) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            if (remove.getNric().toString().equals(p.getNric().toString())) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                this.prevDutyPoints.remove(p);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        for (Person p : this.dutyRecords.keySet()) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            if (remove.getNric().toString().equals(p.getNric().toString())) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                this.dutyRecords.remove(p);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        for (Person p : this.prevDutyRecords.keySet()) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            if (remove.getNric().toString().equals(p.getNric().toString())) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                this.prevDutyRecords.remove(p);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Replaces person for duty storage"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public void replacePerson(Person personToEdit, Person editedPerson) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        Set\u003cPerson\u003e persons \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        persons.addAll(this.dutyPoints.keySet());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        persons.addAll(this.dutyRecords.keySet());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        persons.addAll(this.prevDutyPoints.keySet());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        persons.addAll(this.prevDutyRecords.keySet());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        Person target \u003d null;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        for (Person p : persons) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            if (personToEdit.getNric().toString().equals(p.getNric().toString())) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                target \u003d p;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        if (target !\u003d null) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            this.dutyPoints.put(editedPerson, this.dutyPoints.get(target));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            this.dutyRecords.put(editedPerson, this.dutyRecords.get(target));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            this.prevDutyPoints.put(editedPerson, this.prevDutyPoints.get(target));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            this.prevDutyRecords.put(editedPerson, this.prevDutyRecords.get(target));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            this.dutyPoints.remove(target);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            this.dutyRecords.remove(target);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            this.prevDutyPoints.remove(target);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            this.prevDutyRecords.remove(target);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Valatheking": 28,
      "yjpan47": 179,
      "dreampursuer95": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Company.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mechome"
        },
        "content": " * Represents a Person\u0027s company in the duty planner."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mechome"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCompany(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mechome"
        },
        "content": "public class Company {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Company can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * The first character of the company must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Constructs a {@code Company}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * @param company A valid company."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public Company(String company) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mechome"
        },
        "content": "        requireNonNull(company);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mechome"
        },
        "content": "        checkArgument(isValidCompany(company), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mechome"
        },
        "content": "        value \u003d company;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Returns true if a given string is a valid company."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static boolean isValidCompany(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mechome"
        },
        "content": "                || (other instanceof Company // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mechome"
        },
        "content": "                \u0026\u0026 value.equals(((Company) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 42,
      "mechome": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Nric.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mechome"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mechome"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": " * Represents a Person\u0027s NRIC in the duty planner."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidNric(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mechome"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "public class Nric {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"NRICs should be of the format [S/T/F/G][7 digits][A-Z]\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[STFG]\\\\d{7}[A-Z]\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * Constructs an {@code Nric}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mechome"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * @param nric A valid nric."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public Nric(String nric) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mechome"
        },
        "content": "        requireNonNull(nric);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        checkArgument(isValidNric(nric), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mechome"
        },
        "content": "        value \u003d nric;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * Returns if a given string is a valid nric."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public static boolean isValidNric(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                || (other instanceof Nric // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                \u0026\u0026 value.equals(((Nric) other).value)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mechome"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dreampursuer95": 12,
      "mechome": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Password.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": " * Represents a Person\u0027s password in the duty planner."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPassword(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "public class Password {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Password should contain at least one non-space character\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public Password(String password) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        this(password, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     *  Creates password, can choose if hashing required"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private Password(String password, Boolean toHash) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        requireNonNull(password);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        checkArgument(isValidPassword(password), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        if (toHash) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            value \u003d Integer.toString(password.hashCode());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            value \u003d password;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * Creates password using text into the value itself"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static Password hashlessPassword(String password) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return new Password(password, false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * Returns true if a given string is a valid nric."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static boolean isValidPassword(String test) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                || (other instanceof Password // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                \u0026\u0026 value.equals(((Password) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "exactlyprecise": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.UserType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mechome"
        },
        "content": " * Represents a Person in the duty planner."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private final Nric nric;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private final Company company;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private final Section section;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private final Rank rank;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    // Account fields"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private final Password password;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private final UserType userType;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public Person(Nric nric, Company company, Section section, Rank rank, Name name,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mechome"
        },
        "content": "                  Phone phone, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mechome"
        },
        "content": "        requireAllNonNull(nric, company, section, rank, name, phone, tags);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mechome"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mechome"
        },
        "content": "        this.company \u003d company;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mechome"
        },
        "content": "        this.section \u003d section;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mechome"
        },
        "content": "        this.rank \u003d rank;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        this.password \u003d new Password(nric.value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        this.userType \u003d UserType.GENERAL;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public Person(Nric nric, Company company, Section section, Rank rank, Name name,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                  Phone phone, Set\u003cTag\u003e tags, Password password, UserType userType) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        requireAllNonNull(nric, company, section, rank, name, phone, tags, password, userType);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        this.company \u003d company;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        this.section \u003d section;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        this.rank \u003d rank;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        this.userType \u003d userType;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    public Nric getNric() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        return nric;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    public Company getCompany() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        return company;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    public Section getSection() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        return section;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    public Rank getRank() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        return rank;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public Password getPassword() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return password;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public UserType getUserType() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return userType;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Returns true if both persons of the same name have the same NRIC."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        if (otherPerson \u003d\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        if (otherPerson.equals(this)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                \u0026\u0026 otherPerson.getNric().equals(this.getNric());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return otherPerson.getNric().equals(getNric())"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mechome"
        },
        "content": "                \u0026\u0026 otherPerson.getCompany().equals(getCompany())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mechome"
        },
        "content": "                \u0026\u0026 otherPerson.getSection().equals(getSection())"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mechome"
        },
        "content": "                \u0026\u0026 otherPerson.getRank().equals(getRank())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mechome"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                \u0026\u0026 otherPerson.getPassword().equals(getPassword())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                \u0026\u0026 otherPerson.getUserType().equals(getUserType());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return Objects.hash(nric, company, section, rank, name, phone, tags, password, userType);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        builder.append(this.getRank().toString() + \" \" + this.getName().toString());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 11,
      "yjpan47": 1,
      "dreampursuer95": 5,
      "-": 98,
      "mechome": 24,
      "exactlyprecise": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Phone.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            \"Phone numbers should only contain numbers and a plus in front , and it should be at least 3 digits long \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                    + \"and maximum of 20 digits\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\+?\\\\d{3,20}\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 1,
      "dreampursuer95": 2,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Rank.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mechome"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mechome"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mechome"
        },
        "content": " * Represents a Person\u0027s rank in the duty planner."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mechome"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidRank(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mechome"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mechome"
        },
        "content": "public class Rank {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Rank must be composed of 3 alphanumerical characters, \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mechome"
        },
        "content": "        + \"either digits or uppercase letters\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[A-Z0-9]{3}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Constructs a {@code Rank}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mechome"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * @param rank A valid rank."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public Rank(String rank) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mechome"
        },
        "content": "        requireNonNull(rank);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mechome"
        },
        "content": "        checkArgument(isValidRank(rank), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mechome"
        },
        "content": "        value \u003d rank;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Returns true if a given string is a valid rank."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static boolean isValidRank(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mechome"
        },
        "content": "                || (other instanceof Rank // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mechome"
        },
        "content": "                \u0026\u0026 value.equals(((Rank) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mechome"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mechome": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Section.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mechome"
        },
        "content": " * Represents a Person\u0027s section in the duty planner."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mechome"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidSection(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mechome"
        },
        "content": "public class Section {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Section can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * The first character of the section must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Constructs a {@code Section}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * @param section A valid section."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public Section(String section) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mechome"
        },
        "content": "        requireNonNull(section);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mechome"
        },
        "content": "        checkArgument(isValidSection(section), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mechome"
        },
        "content": "        value \u003d section;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Returns true if a given string is a valid section."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static boolean isValidSection(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mechome"
        },
        "content": "                || (other instanceof Section // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mechome"
        },
        "content": "                \u0026\u0026 value.equals(((Section) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 42,
      "mechome": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    // Sort the list by name"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.internalList.sort((p1, p2) -\u003e p1.getName().fullName.compareToIgnoreCase(p2.getName().fullName));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dreampursuer95": 4,
      "-": 141
    }
  },
  {
    "path": "src/main/java/seedu/address/model/request/Request.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mechome"
        },
        "content": "package seedu.address.model.request;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mechome"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mechome"
        },
        "content": " * Request class to get requested info such as duty dates and requesterNric"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Valatheking"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mechome"
        },
        "content": "public class Request {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final String EMPTY_ACCEPTER_FIELD \u003d \"EMPTY\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private String requesterNric;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private LocalDate allocatedDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private LocalDate requestedDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private String accepterNric;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public Request(String requesterNric, LocalDate allocatedDate, LocalDate requestedDate) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mechome"
        },
        "content": "        this.requesterNric \u003d requesterNric;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mechome"
        },
        "content": "        this.allocatedDate \u003d allocatedDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mechome"
        },
        "content": "        this.requestedDate \u003d requestedDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mechome"
        },
        "content": "        this.accepterNric \u003d EMPTY_ACCEPTER_FIELD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public Request(String requesterNric, LocalDate allocatedDate, LocalDate requestedDate, String accepterNric) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mechome"
        },
        "content": "        this.requesterNric \u003d requesterNric;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mechome"
        },
        "content": "        this.allocatedDate \u003d allocatedDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mechome"
        },
        "content": "        this.requestedDate \u003d requestedDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mechome"
        },
        "content": "        this.accepterNric \u003d accepterNric;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public String getRequesterNric() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return requesterNric;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public LocalDate getAllocatedDate() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return allocatedDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public LocalDate getRequestedDate() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return requestedDate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public boolean isAccepterValid() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return !getAccepterNric().equals(EMPTY_ACCEPTER_FIELD);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public String getAccepterNric() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return accepterNric;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void setAccepterNric(String accepterNric) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mechome"
        },
        "content": "        this.accepterNric \u003d accepterNric;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mechome"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 2,
      "mechome": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.PersonnelDatabase;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.ReadOnlyPersonnelDatabase;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mechome"
        },
        "content": " * Contains utility methods for populating {@code PersonnelDatabase} with sample data."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[]{"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mechome"
        },
        "content": "        //new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mechome"
        },
        "content": "        //getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mechome"
        },
        "content": "        //new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mechome"
        },
        "content": "        //new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mechome"
        },
        "content": "        //getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mechome"
        },
        "content": "        //new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mechome"
        },
        "content": "        //new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mechome"
        },
        "content": "        //getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mechome"
        },
        "content": "        //new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mechome"
        },
        "content": "        //new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mechome"
        },
        "content": "        //getTagSet(\"family\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mechome"
        },
        "content": "        //new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mechome"
        },
        "content": "        //new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mechome"
        },
        "content": "        //getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mechome"
        },
        "content": "        //new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        //new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        //getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static ReadOnlyPersonnelDatabase getSamplePersonnelDatabase() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mechome"
        },
        "content": "        PersonnelDatabase sampleAb \u003d new PersonnelDatabase();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 2,
      "-": 33,
      "mechome": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedDuty.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.model.duty.Duty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": " * Jackson-friendly version of {@link Duty}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "public class JsonAdaptedDuty {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    //public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Duty\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    private final int year;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    private final int monthIndex;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    private final int dayIndex;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    private final int dayOfWeekIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    private final int capacity;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    private final int vacancies;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    private final int points;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    private List\u003cString\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * Constucts a {@code JsonAdaptedDuty} with the given duty details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public JsonAdaptedDuty(@JsonProperty(\"year\") int year, @JsonProperty(\"monthIndex\") int monthIndex,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                           @JsonProperty(\"dayIndex\") int dayIndex, @JsonProperty(\"dayOfWeekIndex\") int dayOfWeekIndex,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                           @JsonProperty(\"capacity\") int capacity, @JsonProperty(\"vacancies\") int vacancies,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                           @JsonProperty(\"points\") int points, @JsonProperty(\"persons\") List\u003cString\u003e persons) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        this.monthIndex \u003d monthIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        this.dayIndex \u003d dayIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        this.dayOfWeekIndex \u003d dayOfWeekIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        this.capacity \u003d capacity;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        this.vacancies \u003d vacancies;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        this.points \u003d points;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        if (persons !\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            this.persons.addAll(persons);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * Converts a given {@code Duty} into this class for Jackson use."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public JsonAdaptedDuty(Duty source) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        year \u003d source.getYear();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        monthIndex \u003d source.getMonthIndex();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        dayIndex \u003d source.getDayIndex();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        dayOfWeekIndex \u003d source.getDayOfWeekIndex();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        capacity \u003d source.getCapacity();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        vacancies \u003d source.getVacancies();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        points \u003d source.getPoints();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        for (Person person : source.getPersons()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            this.persons.add(person.getNric().toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * Converts this Jackson-friendly adapted duty object into the model\u0027s {@code Duty} object."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public Duty toModelType(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        final int modelYear \u003d year;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        final int modelMonthIndex \u003d monthIndex;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        final int modelDayIndex \u003d dayIndex;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        final int modelDayOfWeekIndex \u003d dayOfWeekIndex;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        final int modelCapacity \u003d capacity;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        final int modelVacancies \u003d vacancies;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        final int modelPoints \u003d points;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        final List\u003cPerson\u003e modelPersonList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        for (String nric : persons) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            for (Person person : personList) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                if (person.getNric().toString().equals(nric)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                    modelPersonList.add(person);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        return new Duty(modelYear, modelMonthIndex, modelDayIndex, modelDayOfWeekIndex,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                modelCapacity, modelVacancies, modelPoints, modelPersonList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjpan47": 1,
      "dreampursuer95": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedDutyMonth.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.model.duty.Duty;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.model.duty.DutyMonth;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": " * Jackson-friendly version of {@link DutyMonth}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "public class JsonAdaptedDutyMonth {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public static final String INVALID_BOOLEAN_VALUE \u003d \"Invalid boolean value!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    private final String confirmed;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    private final int year;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    private final int monthIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    private final int firstDayWeekIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    private final List\u003cJsonAdaptedDuty\u003e duties \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    private final List\u003cJsonAdaptedHashMapUnit\u003e hashMap \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * Constructs a {@code JsonAdaptedDutyMonth} with the given duty month details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public JsonAdaptedDutyMonth(@JsonProperty(\"year\") int year, @JsonProperty(\"monthIndex\") int monthIndex,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                           @JsonProperty(\"firstDayWeekIndex\") int firstDayWeekIndex,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                           @JsonProperty(\"confirmed\") String confirmed,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                           @JsonProperty(\"duties\") List\u003cJsonAdaptedDuty\u003e duties,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                                @JsonProperty(\"hashMap\") List\u003cJsonAdaptedHashMapUnit\u003e hashMap) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        this.monthIndex \u003d monthIndex;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        this.firstDayWeekIndex \u003d firstDayWeekIndex;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        this.confirmed \u003d confirmed;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        if (duties !\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            this.duties.addAll(duties);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        if (hashMap !\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            this.hashMap.addAll(hashMap);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * Converts a given {@code DutyMonth} into this class for Jackson use."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public JsonAdaptedDutyMonth(DutyMonth source) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        if (source.isConfirmed()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            confirmed \u003d \"true\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            confirmed \u003d \"false\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        year \u003d source.getYear();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        monthIndex \u003d source.getMonthIndex();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        firstDayWeekIndex \u003d source.getFirstDayOfWeekIndex();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        if (source.getScheduledDuties() !\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            duties.addAll(source.getScheduledDuties().stream()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                    .map(JsonAdaptedDuty::new)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                    .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        if (source.getBlockedDates() !\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            for (Map.Entry\u003cPerson, List\u003cInteger\u003e\u003e mapValue : source.getBlockedDates().entrySet()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                String nric \u003d mapValue.getKey().getNric().toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                List\u003cInteger\u003e dates \u003d mapValue.getValue();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                hashMap.add(new JsonAdaptedHashMapUnit(nric, dates));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * Converts this Jackson-friendly adapted dutyMonth object into the model\u0027s {@code DutyMonth} object."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public DutyMonth toModelType (ObservableList\u003cPerson\u003e personList) throws IllegalValueException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        boolean modelConfirmed \u003d false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        if (this.confirmed.equals(\"true\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            modelConfirmed \u003d true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        } else if (!this.confirmed.equals(\"false\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            throw new IllegalValueException(INVALID_BOOLEAN_VALUE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        final List\u003cDuty\u003e monthDuties \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        final HashMap\u003cPerson, List\u003cInteger\u003e\u003e modelHashMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        for (JsonAdaptedDuty duty : duties) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            monthDuties.add(duty.toModelType(personList));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        for (JsonAdaptedHashMapUnit hashUnit : hashMap) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            Person key \u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            for (Person person : personList) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                if (person.getNric().toString().equals(hashUnit.getPerson())) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                    key \u003d person;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            List\u003cInteger\u003e modelBlockedList \u003d new ArrayList\u003c\u003e(hashUnit.getBlockedDates());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            if (key !\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                modelHashMap.put(key, modelBlockedList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        return new DutyMonth(modelConfirmed, year, monthIndex, firstDayWeekIndex, monthDuties, modelHashMap);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjpan47": 2,
      "dreampursuer95": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedDutyStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.model.duty.DutyStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjpan47"
        },
        "content": " * Jackson-friendly version of {@link DutyStorage}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjpan47"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "public class JsonAdaptedDutyStorage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    private final List\u003cJsonAdaptedDutyStoragePerson\u003e dutyStorageList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "     * Constructs a {@code JsonAdaptedDutyStoragePerson} with the given details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public JsonAdaptedDutyStorage(@JsonProperty(\"dutyStorageList\") List\u003cJsonAdaptedDutyStoragePerson\u003e dutyStorageList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.dutyStorageList.addAll(dutyStorageList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "     * Constucts a {@code JsonAdaptedHashMapUnit} with the given hashmap details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public JsonAdaptedDutyStorage(DutyStorage source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        Set\u003cPerson\u003e persons \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        persons.addAll(source.getDutyPoints().keySet());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        persons.addAll(source.getDutyRecords().keySet());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        persons.addAll(source.getPrevDutyPoints().keySet());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        persons.addAll(source.getPrevDutyRecords().keySet());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        for (Person person : persons) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            String nric \u003d person.getNric().toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            int dutyPoints \u003d source.getDutyPoints().getOrDefault(person, 0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            List\u003cString\u003e dutyRecords \u003d source.getDutyRecords().getOrDefault(person, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            int prevDutyPoints \u003d source.getPrevDutyPoints().getOrDefault(person, 0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            List\u003cString\u003e prevDutyRecords \u003d source.getPrevDutyRecords().getOrDefault(person, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "            JsonAdaptedDutyStoragePerson jsonAdaptedDutyStoragePerson \u003d new JsonAdaptedDutyStoragePerson(nric,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "                    dutyPoints, dutyRecords, prevDutyPoints, prevDutyRecords);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            this.dutyStorageList.add(jsonAdaptedDutyStoragePerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "     * Converts this Jackson-friendly adapted dutyMonth object into the model\u0027s {@code DutyMonth} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public DutyStorage toModelType (ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        HashMap\u003cPerson, Integer\u003e dutyPoints \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        HashMap\u003cPerson, List\u003cString\u003e\u003e dutyRecords \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        HashMap\u003cPerson, Integer\u003e prevDutyPoints \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        HashMap\u003cPerson, List\u003cString\u003e\u003e prevDutyRecords \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        for (JsonAdaptedDutyStoragePerson jsonAdaptedDutyStoragePerson : this.dutyStorageList) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            Person person \u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            for (Person p : personList) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                if (p.getNric().toString().equals(jsonAdaptedDutyStoragePerson.getNric())) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                    person \u003d p;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            if (person !\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                dutyPoints.put(person, jsonAdaptedDutyStoragePerson.getDutyPoints());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                dutyRecords.put(person, jsonAdaptedDutyStoragePerson.getDutyRecords());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                prevDutyPoints.put(person, jsonAdaptedDutyStoragePerson.getPrevDutyPoints());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                prevDutyRecords.put(person, jsonAdaptedDutyStoragePerson.getPrevDutyRecords());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return new DutyStorage(dutyPoints, dutyRecords, prevDutyPoints, prevDutyRecords);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 2,
      "yjpan47": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedDutyStoragePerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjpan47"
        },
        "content": " * Jackson-friendly class to hold a person in dutyStorage"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjpan47"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "public class JsonAdaptedDutyStoragePerson {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    private String nric;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    private int dutyPoints;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    private List\u003cString\u003e dutyRecords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    private int prevDutyPoints;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    private List\u003cString\u003e prevDutyRecords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "     * Constructs a {@code JsonAdaptedDutyStoragePerson} with the given details."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public JsonAdaptedDutyStoragePerson(@JsonProperty(\"person\") String nric,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                                        @JsonProperty(\"dutyPoints\") int dutyPoints,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                                        @JsonProperty(\"dutyRecords\") List\u003cString\u003e dutyRecords,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                                        @JsonProperty(\"PrevDutyPoints\") int prevDutyPoints,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                                        @JsonProperty(\"PrevDutyRecord\") List\u003cString\u003e prevDutyRecords) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.dutyPoints \u003d dutyPoints;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.dutyRecords \u003d dutyRecords;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.prevDutyPoints \u003d prevDutyPoints;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.prevDutyRecords \u003d prevDutyRecords;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public String getNric() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return nric;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public int getDutyPoints() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return dutyPoints;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public List\u003cString\u003e getDutyRecords() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return dutyRecords;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public int getPrevDutyPoints() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return prevDutyPoints;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public List\u003cString\u003e getPrevDutyRecords() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        return prevDutyRecords;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjpan47": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedHashMapUnit.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Valatheking"
        },
        "content": " * JsonAdaptedHashMapUnit class to hold blocked dates of duty personnel"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Valatheking"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "public class JsonAdaptedHashMapUnit {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    private final String person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    private final List\u003cInteger\u003e blockedDates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * Constucts a {@code JsonAdaptedHashMapUnit} with the given hashmap details."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public JsonAdaptedHashMapUnit(@JsonProperty(\"person\") String person,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                       @JsonProperty(\"blockedDates\") List\u003cInteger\u003e blockedDates) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        if (blockedDates !\u003d null) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            this.blockedDates.addAll(blockedDates);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public String getPerson() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        return this.person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public List\u003cInteger\u003e getBlockedDates() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        return this.getBlockedDates();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 6,
      "dreampursuer95": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.UserType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.person.Password;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import seedu.address.model.person.Rank;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import seedu.address.model.person.Section;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private final String nric;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private final String company;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private final String section;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private final String rank;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private final String passwordHashed;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private final UserType userType;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"nric\") String nric, @JsonProperty(\"company\") String company,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mechome"
        },
        "content": "                             @JsonProperty(\"section\") String section, @JsonProperty(\"rank\") String rank,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mechome"
        },
        "content": "                             @JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                             @JsonProperty(\"password\") String password, @JsonProperty(\"userType\") UserType userType) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mechome"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mechome"
        },
        "content": "        this.company \u003d company;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mechome"
        },
        "content": "        this.section \u003d section;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mechome"
        },
        "content": "        this.rank \u003d rank;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        this.passwordHashed \u003d password;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        this.userType \u003d userType;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mechome"
        },
        "content": "        nric \u003d source.getNric().value;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mechome"
        },
        "content": "        company \u003d source.getCompany().value;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mechome"
        },
        "content": "        section \u003d source.getSection().value;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mechome"
        },
        "content": "        rank \u003d source.getRank().value;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        passwordHashed \u003d source.getPassword().value;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        userType \u003d source.getUserType();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mechome"
        },
        "content": "        if (nric \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mechome"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mechome"
        },
        "content": "        if (!Nric.isValidNric(nric)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mechome"
        },
        "content": "            throw new IllegalValueException(Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mechome"
        },
        "content": "        final Nric modelNric \u003d new Nric(nric);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mechome"
        },
        "content": "        if (company \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mechome"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Company.class.getSimpleName()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mechome"
        },
        "content": "        if (!Company.isValidCompany(company)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mechome"
        },
        "content": "            throw new IllegalValueException(Company.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mechome"
        },
        "content": "        final Company modelCompany \u003d new Company(company);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mechome"
        },
        "content": "        if (section \u003d\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mechome"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Section.class.getSimpleName()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mechome"
        },
        "content": "        if (!Section.isValidSection(section)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mechome"
        },
        "content": "            throw new IllegalValueException(Section.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mechome"
        },
        "content": "        final Section modelSection \u003d new Section(section);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mechome"
        },
        "content": "        if (rank \u003d\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mechome"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Rank.class.getSimpleName()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mechome"
        },
        "content": "        if (!Rank.isValidRank(rank)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mechome"
        },
        "content": "            throw new IllegalValueException(Rank.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mechome"
        },
        "content": "        final Rank modelRank \u003d new Rank(rank);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        if (passwordHashed \u003d\u003d null) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, Password.class.getSimpleName()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        final Password modelPassword \u003d Password.hashlessPassword(passwordHashed);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        if (userType \u003d\u003d null) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, UserType.class.getSimpleName()));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return new Person(modelNric, modelCompany, modelSection, modelRank, modelName, modelPhone, modelTags,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                modelPassword, userType);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 3,
      "-": 85,
      "mechome": 49,
      "exactlyprecise": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedRequest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mechome"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mechome"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mechome"
        },
        "content": " * Jackson-friendly version of {@link Request}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mechome"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mechome"
        },
        "content": "class JsonAdaptedRequest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Request\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private final String requesterNric;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private final String allocatedDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private final String requestedDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private final String accepterNric;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Constructs a {@code JsonAdaptedRequest} with the given request details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    public JsonAdaptedRequest(@JsonProperty(\"requesterNric\") String requesterNric,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "                              @JsonProperty(\"allocatedDate\") String allocatedDate,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "                              @JsonProperty(\"requestedDate\") String requestedDate,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "                              @JsonProperty(\"accepterNric\") String accepterNric) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mechome"
        },
        "content": "        this.requesterNric \u003d requesterNric;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mechome"
        },
        "content": "        this.requestedDate \u003d requestedDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mechome"
        },
        "content": "        this.allocatedDate \u003d allocatedDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mechome"
        },
        "content": "        this.accepterNric \u003d accepterNric;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Converts a given {@code Request} into this class for Jackson use."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public JsonAdaptedRequest(Request source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mechome"
        },
        "content": "        requesterNric \u003d source.getRequesterNric();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mechome"
        },
        "content": "        allocatedDate \u003d source.getAllocatedDate().toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mechome"
        },
        "content": "        requestedDate \u003d source.getRequestedDate().toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mechome"
        },
        "content": "        accepterNric \u003d source.getAccepterNric();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Converts this Jackson-friendly adapted request object into the model\u0027s {@code Request} object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mechome"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted request."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public Request toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mechome"
        },
        "content": "        if (requesterNric \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mechome"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"requester NRIC\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mechome"
        },
        "content": "        if (allocatedDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mechome"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"allocated date\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mechome"
        },
        "content": "        final LocalDate modelAllocatedDate \u003d LocalDate.parse(allocatedDate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mechome"
        },
        "content": "        if (requestedDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mechome"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"requested date\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mechome"
        },
        "content": "        final LocalDate modelRequestedDate \u003d LocalDate.parse(requestedDate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mechome"
        },
        "content": "        if (accepterNric \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mechome"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"accepter NRIC\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return new Request(requesterNric, modelAllocatedDate, modelRequestedDate, accepterNric);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mechome"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 8,
      "mechome": 68,
      "exactlyprecise": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonPersonnelDatabaseStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mechome"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mechome"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mechome"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mechome"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mechome"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.ReadOnlyPersonnelDatabase;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mechome"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mechome"
        },
        "content": " * A class to access PersonnelDatabase data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mechome"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mechome"
        },
        "content": "public class JsonPersonnelDatabaseStorage implements PersonnelDatabaseStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonPersonnelDatabaseStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public JsonPersonnelDatabaseStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mechome"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public Path getPersonnelDatabaseFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public Optional\u003cReadOnlyPersonnelDatabase\u003e readPersonnelDatabase() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return readPersonnelDatabase(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Similar to {@link #readPersonnelDatabase()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mechome"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public Optional\u003cReadOnlyPersonnelDatabase\u003e readPersonnelDatabase(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mechome"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Optional\u003cJsonSerializablePersonnelDatabase\u003e jsonPersonnelDatabase \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mechome"
        },
        "content": "                filePath, JsonSerializablePersonnelDatabase.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mechome"
        },
        "content": "        if (!jsonPersonnelDatabase.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mechome"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mechome"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mechome"
        },
        "content": "            return Optional.of(jsonPersonnelDatabase.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mechome"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mechome"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mechome"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void savePersonnelDatabase(ReadOnlyPersonnelDatabase personnelDatabase) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mechome"
        },
        "content": "        savePersonnelDatabase(personnelDatabase, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Similar to {@link #savePersonnelDatabase(ReadOnlyPersonnelDatabase)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mechome"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void savePersonnelDatabase(ReadOnlyPersonnelDatabase personnelDatabase, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mechome"
        },
        "content": "        requireNonNull(personnelDatabase);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mechome"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mechome"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mechome"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializablePersonnelDatabase(personnelDatabase), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mechome"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mechome": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializablePersonnelDatabase.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mechome"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mechome"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mechome"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mechome"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mechome"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mechome"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mechome"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import seedu.address.model.DutyCalendar;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.PersonnelDatabase;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.ReadOnlyPersonnelDatabase;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mechome"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mechome"
        },
        "content": " * An Immutable PersonnelDatabase that is serializable to JSON format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mechome"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mechome"
        },
        "content": "@JsonRootName(value \u003d \"personneldatabase\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mechome"
        },
        "content": "class JsonSerializablePersonnelDatabase {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private final List\u003cJsonAdaptedRequest\u003e requests \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    private final JsonAdaptedDutyMonth currentMonth;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    private final JsonAdaptedDutyMonth nextMonth;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    private final JsonAdaptedDutyStorage dutyStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "     * Constructs a {@code JsonSerializablePersonnelDatabase} with the given persons and duty months."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public JsonSerializablePersonnelDatabase(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mechome"
        },
        "content": "                                             @JsonProperty(\"requests\") List\u003cJsonAdaptedRequest\u003e requests,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                                             @JsonProperty(\"currentMonth\") JsonAdaptedDutyMonth currentMonth,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                                             @JsonProperty(\"nextMonth\") JsonAdaptedDutyMonth nextMonth,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                                             @JsonProperty(\"dutyStorage\") JsonAdaptedDutyStorage dutyStorage) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mechome"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mechome"
        },
        "content": "        this.requests.addAll(requests);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        this.currentMonth \u003d currentMonth;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        this.nextMonth \u003d nextMonth;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.dutyStorage \u003d dutyStorage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Converts a given {@code ReadOnlyPersonnelDatabase} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mechome"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializablePersonnelDatabase}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public JsonSerializablePersonnelDatabase(ReadOnlyPersonnelDatabase source) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mechome"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mechome"
        },
        "content": "        requests.addAll(source.getRequestList().stream().map(JsonAdaptedRequest::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        this.currentMonth \u003d new JsonAdaptedDutyMonth(source.getDutyCalendar().getCurrentMonth());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        this.nextMonth \u003d new JsonAdaptedDutyMonth(source.getDutyCalendar().getNextMonth());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "        this.dutyStorage \u003d new JsonAdaptedDutyStorage(source.getDutyCalendar().getDutyStorage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Converts this personnel database into the model\u0027s {@code PersonnelDatabase} object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mechome"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public PersonnelDatabase toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mechome"
        },
        "content": "        PersonnelDatabase personnelDatabase \u003d new PersonnelDatabase();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mechome"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mechome"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mechome"
        },
        "content": "            if (personnelDatabase.hasPerson(person)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mechome"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mechome"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mechome"
        },
        "content": "            personnelDatabase.addPerson(person);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        ObservableList\u003cPerson\u003e personList \u003d personnelDatabase.getPersonList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mechome"
        },
        "content": "        for (JsonAdaptedRequest jsonAdaptedRequest : requests) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mechome"
        },
        "content": "            Request request \u003d jsonAdaptedRequest.toModelType();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mechome"
        },
        "content": "            personnelDatabase.addRequest(request);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        personnelDatabase.setDutyCalendar(new DutyCalendar(currentMonth.toModelType(personList),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "                nextMonth.toModelType(personList), dutyStorage.toModelType(personList)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return personnelDatabase;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mechome"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjpan47": 6,
      "dreampursuer95": 14,
      "mechome": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/PersonnelDatabaseStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mechome"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mechome"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mechome"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mechome"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.PersonnelDatabase;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.ReadOnlyPersonnelDatabase;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mechome"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mechome"
        },
        "content": " * Represents a storage for {@link PersonnelDatabase}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mechome"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mechome"
        },
        "content": "public interface PersonnelDatabaseStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mechome"
        },
        "content": "    Path getPersonnelDatabaseFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Returns PersonnelDatabase data as a {@link ReadOnlyPersonnelDatabase}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mechome"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mechome"
        },
        "content": "    Optional\u003cReadOnlyPersonnelDatabase\u003e readPersonnelDatabase() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * @see #getPersonnelDatabaseFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    Optional\u003cReadOnlyPersonnelDatabase\u003e readPersonnelDatabase(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "            IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Saves the given {@link ReadOnlyPersonnelDatabase} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * @param personnelDatabase cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mechome"
        },
        "content": "    void savePersonnelDatabase(ReadOnlyPersonnelDatabase personnelDatabase) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * @see #savePersonnelDatabase(ReadOnlyPersonnelDatabase)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mechome"
        },
        "content": "    void savePersonnelDatabase(ReadOnlyPersonnelDatabase personnelDatabase, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mechome"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 2,
      "mechome": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.ReadOnlyPersonnelDatabase;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mechome"
        },
        "content": "public interface Storage extends PersonnelDatabaseStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mechome"
        },
        "content": "    Path getPersonnelDatabaseFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mechome"
        },
        "content": "    Optional\u003cReadOnlyPersonnelDatabase\u003e readPersonnelDatabase() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mechome"
        },
        "content": "    void savePersonnelDatabase(ReadOnlyPersonnelDatabase personnelDatabase) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 26,
      "mechome": 4,
      "exactlyprecise": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.ReadOnlyPersonnelDatabase;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mechome"
        },
        "content": " * Manages storage of PersonnelDatabase data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private PersonnelDatabaseStorage personnelDatabaseStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public StorageManager(PersonnelDatabaseStorage personnelDatabaseStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mechome"
        },
        "content": "        this.personnelDatabaseStorage \u003d personnelDatabaseStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mechome"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PersonnelDatabase methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public Path getPersonnelDatabaseFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return personnelDatabaseStorage.getPersonnelDatabaseFilePath();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public Optional\u003cReadOnlyPersonnelDatabase\u003e readPersonnelDatabase() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return readPersonnelDatabase(personnelDatabaseStorage.getPersonnelDatabaseFilePath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    public Optional\u003cReadOnlyPersonnelDatabase\u003e readPersonnelDatabase(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return personnelDatabaseStorage.readPersonnelDatabase(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void savePersonnelDatabase(ReadOnlyPersonnelDatabase personnelDatabase) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mechome"
        },
        "content": "        savePersonnelDatabase(personnelDatabase, personnelDatabaseStorage.getPersonnelDatabaseFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void savePersonnelDatabase(ReadOnlyPersonnelDatabase personnelDatabase, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mechome"
        },
        "content": "        personnelDatabaseStorage.savePersonnelDatabase(personnelDatabase, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 2,
      "-": 60,
      "mechome": 14,
      "exactlyprecise": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mechome"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mechome"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private final List\u003cRequest\u003e requests;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private TextArea textDisplay;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public BrowserPanel(List\u003cRequest\u003e requests) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mechome"
        },
        "content": "        this.requests \u003d requests;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mechome"
        },
        "content": "        String initText \u003d requestsToStringForDisplay();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mechome"
        },
        "content": "        setPanelText(initText);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private void setPanelText(String text) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mechome"
        },
        "content": "        requireNonNull(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mechome"
        },
        "content": "        textDisplay.setText(text);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Returns a string representing the list of requests to be displayed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public String requestsToStringForDisplay() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mechome"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mechome"
        },
        "content": "        sb.append(\"List of Open Swap Requests:\\n\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mechome"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mechome"
        },
        "content": "        for (Request request : requests) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mechome"
        },
        "content": "            if (!request.isAccepterValid()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mechome"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mechome"
        },
        "content": "                sb.append(counter).append(\". \").append(request.getRequesterNric()).append(\" requests a swap from \")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mechome"
        },
        "content": "                        .append(request.getAllocatedDate().toString()).append(\" to \")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mechome"
        },
        "content": "                        .append(request.getRequestedDate().toString() + \".\\n\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mechome"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Refreshes the text displayed to reflect current request list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void refreshRequestListDisplay() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mechome"
        },
        "content": "        setPanelText(requestsToStringForDisplay());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "mechome": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalendarView.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.duty.Duty;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.duty.DutyMonth;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": " * The Calendar. Allows user to see dates with duties."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "public class CalendarView extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private static final String FXML \u003d \"CalendarView.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private static final String[] dayArray \u003d {\"SUN\", \"MON \", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"};"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private static final String[] monthArray \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        {\"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"JUN\", \"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"};"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    private Label[] dateLabels;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private final DutyMonth dutyMonth;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CalendarView.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private Label monthLabel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private Label yearLabel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private GridPane gridPaneBottom;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private VBox vBoxCalendar;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public CalendarView(DutyMonth dutyMonth) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        logger.info(\"Creating new calendar\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        this.dutyMonth \u003d dutyMonth;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        gridPaneBottom.prefHeightProperty().bind(vBoxCalendar.heightProperty().subtract(20));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        initdateLabels();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            fillDutyCalendar();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        } catch (NullPointerException n) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            logger.warning(\"Calendar nullpointer exception\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            logger.info(\"Calendar fill duty IndexOutOfBounds for \" + monthArray[dutyMonth.getMonthIndex()]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                + \" \" + dutyMonth.getYear());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Creates labels for each date."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private void initdateLabels() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        dateLabels \u003d new Label[7];"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d 6; i++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            dateLabels[i] \u003d new Label(dayArray[i]);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d 6; i++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            gridPaneBottom.add(dateLabels[i], i, 0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            dateLabels[i].maxWidthProperty().bind(gridPaneBottom.widthProperty().divide(7));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            dateLabels[i].setWrapText(true);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        int monthIndex \u003d dutyMonth.getMonthIndex();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        int year \u003d dutyMonth.getYear();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        monthLabel.setText(monthArray[monthIndex]);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        yearLabel.setText(Integer.toString(year));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * Fills up duty calendar."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private void fillDutyCalendar() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        int firstIndex \u003d dutyMonth.getFirstDayOfWeekIndex();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        int numberDays \u003d dutyMonth.getNumOfDays();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d numberDays; i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            int row \u003d 1 + (firstIndex + i - 2) / 7;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            int column \u003d (firstIndex + i - 2) % 7;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            Label label \u003d new Label(Integer.toString(i));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            Duty duty \u003d dutyMonth.getScheduledDuties().get(i - 1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            ObservableList\u003cPerson\u003e obsListDuty \u003d FXCollections.observableArrayList(duty.getPersons());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            ListView tempDuty \u003d new ListView(obsListDuty);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            VBox vBox \u003d new VBox();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            vBox.getChildren().addAll(label, tempDuty);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            gridPaneBottom.add(vBox, column, row);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            tempDuty.setStyle(\"-fx-control-inner-background: blue;\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        logger.info(\"Calendar filled duties for \" + monthArray[dutyMonth.getMonthIndex()]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                + \" \" + dutyMonth.getYear());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Valatheking": 4,
      "exactlyprecise": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.UserType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e history;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private final UserType user;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private final String userName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor, UserType user, String userName, List\u003cString\u003e history) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.history \u003d history;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        this.user \u003d user;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        this.userName \u003d userName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d new ListElementPointer(history);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            commandExecutor.execute(commandTextField.getText(), user, userName);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d new ListElementPointer(history);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String, UserType, String)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        CommandResult execute(String commandText, UserType user, String userName)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                throws CommandException, ParseException;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 150,
      "exactlyprecise": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/LoginBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import javafx.scene.control.PasswordField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import javafx.stage.Modality;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.UserType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Valatheking"
        },
        "content": " * Opens up a login box for users to enter their login details."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Valatheking"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "public class LoginBox {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private UserType userType \u003d null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private String userName \u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private TextField userField;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private TextField passField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private Label label;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private Stage window;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private final UserFinder userFinder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CalendarView.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public LoginBox(UserFinder userFinder) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        this.userFinder \u003d userFinder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Display box parameters."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public NricUserPair display() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        window \u003d new Stage();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        window.initModality(Modality.APPLICATION_MODAL);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        window.setTitle(\"Login\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        window.setMinWidth(500);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        window.setMinHeight(250);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        userField \u003d new TextField();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        userField.setPromptText(\"Your NRIC\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        userField.setOnAction(e -\u003e findAccount());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        passField \u003d new PasswordField();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        passField.setPromptText(\"Your password\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        passField.setOnAction(e -\u003e findAccount());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        label \u003d new Label();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        VBox layout \u003d new VBox();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        layout.getChildren().addAll(userField, passField, label);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Scene scene \u003d new Scene(layout);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        window.setScene(scene);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        window.showAndWait();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return new NricUserPair(userType, userName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Finds the account in the list of accounts and lets the user login."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private void findAccount() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mechome"
        },
        "content": "        if (userField.getText().equals(UserType.DEFAULT_ADMIN_USERNAME)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mechome"
        },
        "content": "                \u0026\u0026 passField.getText().equals(UserType.DEFAULT_ADMIN_USERNAME)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            userType \u003d UserType.ADMIN;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            userName \u003d userField.getText();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            logger.info(\"Logged in with username: \" + userName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            window.close();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mechome"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            UserType foundUser \u003d userFinder.findAccount(userField.getText(), passField.getText());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            if (foundUser \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                label.setText(\"User not found!\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                logger.info(\"The User: \" + userField.getText() + \" was not found.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                userType \u003d foundUser;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                userName \u003d userField.getText();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                logger.info(\"Logged in with username: \" + userName);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                window.close();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * Represents a function that can find accounts."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public interface UserFinder {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "         * Finds the usertype of the account"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "         *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "         * @see seedu.address.logic.Logic#findAccount(String, String)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "         */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        UserType findAccount(String userName, String password);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Valatheking": 11,
      "mechome": 4,
      "exactlyprecise": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import javafx.scene.control.Accordion;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import javafx.scene.control.TitledPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.UiCommandInteraction;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.UserType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    //Clearance of the user"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private final UserType user;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private final String userName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    //Whether the window is of current month or not"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private boolean isCurrentMonth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private CalendarView calendarView;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private VBox calendarViewPlaceholder;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private Accordion accordion;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private TitledPane contactList;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private TitledPane calendarPane;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic, UserType user, String userName) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        this.user \u003d user;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        this.userName \u003d userName;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mechome"
        },
        "content": "        browserPanel \u003d new BrowserPanel(logic.getPersonnelDatabase().getRequestList());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // Originally logic.selectedPersonProperty()"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList(), logic.selectedPersonProperty(),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                logic::setSelectedPerson);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getPersonnelDatabaseFilePath(),"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                logic.getPersonnelDatabase());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        CalendarView calendarView \u003d new CalendarView(logic.getCurrentDutyMonth());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        calendarViewPlaceholder.getChildren().add(calendarView.getRoot());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        isCurrentMonth \u003d true;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, user, userName, logic.getHistory());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * Displays the personnel list accordion"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void handleList() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        accordion.setExpandedPane(contactList);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * Displays the calendarView accordion"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void handleCalendar() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        accordion.setExpandedPane(calendarPane);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Refreshes current calendar view"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void refreshCalendarCurrent() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        CalendarView calendarView \u003d new CalendarView(logic.getCurrentDutyMonth());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        calendarViewPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        calendarViewPlaceholder.getChildren().add(calendarView.getRoot());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        isCurrentMonth \u003d true;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Refreshes next month calendar view"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void refreshCalendarNext() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        CalendarView calendarView \u003d new CalendarView(logic.getNextDutyMonth());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        calendarViewPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        calendarViewPlaceholder.getChildren().add(calendarView.getRoot());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        isCurrentMonth \u003d false;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String, UserType, String)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private CommandResult executeCommand(String commandText, UserType user, String userName)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throws CommandException, ParseException {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText, user, userName);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            UiCommandInteraction uiCommand \u003d commandResult.getUiCommandInteraction();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            refreshCalendar(uiCommand);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            if (uiCommand !\u003d null) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                handleUiCommand(uiCommand);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "mechome"
        },
        "content": "            browserPanel.refreshRequestListDisplay();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Handles command inputs"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void handleUiCommand(UiCommandInteraction uiCommand) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        switch (uiCommand) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        case EXIT:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            handleExit();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        case HELP:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            handleHelp();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        case PEOPLE_LIST:"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            handleList();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        case CALENDAR_CURRENT:"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            handleCalendar();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            refreshCalendarCurrent();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        case CALENDAR_NEXT:"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            handleCalendar();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            refreshCalendarNext();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        default: //do nothing"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Refreshes calendar"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void refreshCalendar(UiCommandInteraction uiCommandInteraction) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        if (uiCommandInteraction \u003d\u003d UiCommandInteraction.CALENDAR_NEXT) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        } else if (uiCommandInteraction \u003d\u003d UiCommandInteraction.CALENDAR_CURRENT) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        if (isCurrentMonth) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            refreshCalendarCurrent();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            refreshCalendarNext();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 12,
      "-": 186,
      "mechome": 3,
      "exactlyprecise": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/NricUserPair.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.UserType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": " * Represents a pair of UserType and username"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "public class NricUserPair {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public final UserType userType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public final String userName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public NricUserPair(UserType userType, String userName) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        this.userType \u003d userType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        this.userName \u003d userName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "exactlyprecise": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on PersonnelDatabase level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private Label nric;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private Label company;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private Label section;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private Label rank;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private Label password;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private Label userType;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mechome"
        },
        "content": "        nric.setText(person.getNric().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mechome"
        },
        "content": "        company.setText(person.getCompany().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        section.setText(person.getSection().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        rank.setText(person.getRank().value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        //Below 2 are only for testing purposes: will remove them."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        password.setText(\"Password :\" + person.getPassword().value);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        userType.setText(\"Account Type: \" + person.getUserType().toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 65,
      "mechome": 9,
      "exactlyprecise": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel(ObservableList\u003cPerson\u003e personList, ObservableValue\u003cPerson\u003e selectedPerson,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Consumer\u003cPerson\u003e onSelectedPersonChange) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            onSelectedPersonChange.accept(newValue);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        selectedPerson.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.fine(\"Selected person changed to: \" + newValue);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected person,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            if (Objects.equals(personListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                personListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                int index \u003d personListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                personListView.scrollTo(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                personListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 71,
      "exactlyprecise": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.ReadOnlyPersonnelDatabase;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label syncStatus;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public StatusBarFooter(Path saveLocation, ReadOnlyPersonnelDatabase addressBook) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addListener(observable -\u003e updateSyncStatus());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates \"last updated\" status to the current time."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private void updateSyncStatus() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 67,
      "mechome": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Ui.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    /** Starts the UI (and the App) for Admin systemtest. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    void testStartAdmin(Stage primaryStage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "exactlyprecise": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.UserType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            LoginBox loginBox \u003d new LoginBox(this::findAccount);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            NricUserPair nricUserPair \u003d loginBox.display();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic, nricUserPair.userType, nricUserPair.userName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void testStartAdmin(Stage primaryStage) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mechome"
        },
        "content": "            NricUserPair nricUserPair \u003d new NricUserPair(UserType.ADMIN, \"ADMIN\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mechome"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic, nricUserPair.userType, nricUserPair.userName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * Finds UserType of account given username and password."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * Returns null if account not found."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private UserType findAccount(String userName, String password) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return logic.findAccount(userName, password);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 93,
      "mechome": 2,
      "exactlyprecise": 21
    }
  },
  {
    "path": "src/main/resources/view/BrowserPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mechome"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mechome"
        },
        "content": "\u003cStackPane fx:id\u003d\"browserPlaceholder\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mechome"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mechome"
        },
        "content": "  \u003cTextArea fx:id\u003d\"textDisplay\" editable\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "mechome": 4
    }
  },
  {
    "path": "src/main/resources/view/CalendarPersonListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "exactlyprecise": 8
    }
  },
  {
    "path": "src/main/resources/view/CalendarView.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003cVBox fx:id\u003d\"vBoxCalendar\" maxHeight\u003d\"Infinity\" maxWidth\u003d\"Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "      xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" VBox.vgrow\u003d\"ALWAYS\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    \u003cVBox BorderPane.alignment\u003d\"CENTER\" prefHeight\u003d\"26\" VBox.vgrow\u003d\"NEVER\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            \u003cHBox prefHeight\u003d\"26.0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                    \u003cInsets right\u003d\"5\" left\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                    \u003cLabel fx:id\u003d\"monthLabel\" prefWidth\u003d\"150.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                    \u003cLabel fx:id\u003d\"yearLabel\" prefWidth\u003d\"150.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"scrollPane\" VBox.vgrow\u003d\"ALWAYS\" HBox.hgrow\u003d\"ALWAYS\" prefHeight\u003d\"300\" minWidth\u003d\"210.0\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        \u003cGridPane gridLinesVisible\u003d\"true\" fx:id\u003d\"gridPaneBottom\" prefHeight\u003d\"300\" prefWidth\u003d\"1000\" BorderPane.alignment\u003d\"CENTER\" VBox.vgrow\u003d\"ALWAYS\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                \u003cRowConstraints minHeight\u003d\"60.0\" vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                \u003cRowConstraints minHeight\u003d\"60.0\" vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                \u003cRowConstraints minHeight\u003d\"60.0\" vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                \u003cRowConstraints minHeight\u003d\"60.0\" vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                \u003cRowConstraints minHeight\u003d\"60.0\" vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                \u003cRowConstraints minHeight\u003d\"60.0\" vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                \u003cRowConstraints minHeight\u003d\"60.0\" vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "exactlyprecise": 56
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003c?import javafx.scene.control.Accordion?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003c?import javafx.scene.control.TitledPane?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "         title\u003d\"Duty Planner App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        \u003cAccordion fx:id\u003d\"accordion\" expandedPane\u003d\"$contactList\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "          \u003cpanes\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            \u003cTitledPane fx:id\u003d\"contactList\" text\u003d\"Contact List\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mechome"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            \u003cTitledPane fx:id\u003d\"calendarPane\" animated\u003d\"false\" text\u003d\"Calendar\"\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "              \u003ccontent\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                \u003cVBox fx:id\u003d\"calendarViewPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "              \u003c/content\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "          \u003c/panes\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        \u003c/Accordion\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 66,
      "mechome": 1,
      "exactlyprecise": 17
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        \u003cLabel fx:id\u003d\"rank\" text\u003d\"\\$rank\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$name\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "      \u003cLabel fx:id\u003d\"nric\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$nric\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "      \u003cLabel fx:id\u003d\"company\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$company\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "      \u003cLabel fx:id\u003d\"section\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$section\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "      \u003cLabel fx:id\u003d\"password\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$password\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "      \u003cLabel fx:id\u003d\"userType\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$userType\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "exactlyprecise": 7
    }
  },
  {
    "path": "src/main/resources/view/default.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chtml\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003clink rel\u003d\"stylesheet\" href\u003d\"DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbody class\u003d\"background\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mechome"
        },
        "content": "Howdy! This will show the current swap requests available in the future. Watch out for this space!"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/body\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "mechome": 1
    }
  },
  {
    "path": "src/test/data/JsonPersonnelDatabaseStorageTest/invalidAndValidPersonPersonnelDatabase.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mechome"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mechome"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"nric\": \"S9111111A\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"company\": \"Alpha\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"section\": \"3\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"rank\": \"PTE\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"name\": \"Valid Person\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"phone\": \"9482424\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mechome"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"nric\": \"S9111112A\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"company\": \"Charlie\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"section\": \"1\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"rank\": \"LCP\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"name\": \"Person With Invalid Phone Field\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"phone\": \"948asdf2424\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mechome"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mechome"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mechome": 17
    }
  },
  {
    "path": "src/test/data/JsonPersonnelDatabaseStorageTest/invalidPersonPersonnelDatabase.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"nric\": \"S9823456P\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"company\": \"Zulu\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"section\": \"3\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"rank\": \"PTE\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "mechome": 4
    }
  },
  {
    "path": "src/test/data/JsonSerializablePersonnelDatabaseTest/duplicatePersonPersonnelDatabase.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mechome"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mechome"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"nric\": \"S9765432A\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"company\": \"Delta\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"section\": \"2\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"rank\": \"CPL\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"tagged\": [ \"friends\" ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mechome"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"nric\": \"S9765432A\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"company\": \"Delta\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"section\": \"2\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"rank\": \"CPL\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"phone\": \"94351253\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "  \"requests\" : [ ],"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "  \"currentMonth\" : {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"year\" : 2019,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"monthIndex\" : 3,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"firstDayWeekIndex\" : 2,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"confirmed\" : \"false\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"duties\" : [ ],"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"hashMap\" : [ ]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "  },"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "  \"nextMonth\" : {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"year\" : 2019,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"monthIndex\" : 4,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"firstDayWeekIndex\" : 4,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"confirmed\" : \"false\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"duties\" : [ ],"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"hashMap\" : [ ]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "  }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mechome"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dreampursuer95": 18,
      "mechome": 17
    }
  },
  {
    "path": "src/test/data/JsonSerializablePersonnelDatabaseTest/invalidPersonPersonnelDatabase.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mechome"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mechome"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"nric\": \"E9543565P\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"company\": \"Echo\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"section\": \"4\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"rank\": \"CPL\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"name\": \"Hans Muster\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"tagged\" : [ \"injury\" ],"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"password\" : \"E9543565P\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"userType\" : \"GENERAL\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "  \"requests\" : [ ],"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "  \"currentMonth\" : {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"year\" : 2019,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"monthIndex\" : 3,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"firstDayWeekIndex\" : 2,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"confirmed\" : \"false\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"duties\" : [ ],"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"hashMap\" : [ ]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "  },"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "  \"nextMonth\" : {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"year\" : 2019,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"monthIndex\" : 4,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"firstDayWeekIndex\" : 4,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"confirmed\" : \"false\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"duties\" : [ ],"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"hashMap\" : [ ]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "  }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mechome"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dreampursuer95": 22,
      "mechome": 8
    }
  },
  {
    "path": "src/test/data/JsonSerializablePersonnelDatabaseTest/typicalPersonsPersonnelDatabase.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mechome"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mechome"
        },
        "content": "  \"_comment\": \"PersonnelDatabase save file which contains the same Person values as in TypicalPersons#getTypicalPersonnelDatabase()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mechome"
        },
        "content": "  \"persons\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"nric\": \"S9673582K\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"company\": \"Leopard\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"section\": \"1\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"rank\": \"CFC\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"tagged\" : [ \"outstanding\" ],"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"password\" : \"S9673582K\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"userType\" : \"GENERAL\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mechome"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"nric\": \"S9478974B\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"company\": \"Hawk\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"section\": \"2\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"rank\": \"PTE\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"phone\" : \"98765432\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"tagged\" : [ \"injured\" ],"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"password\" : \"S9478974B\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"userType\" : \"GENERAL\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mechome"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"nric\": \"S9324325I\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"company\": \"Cougar\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"section\": \"3\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"rank\": \"REC\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"phone\" : \"95352563\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"password\" : \"S9324325I\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"userType\" : \"GENERAL\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mechome"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"nric\": \"T0034567L\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"company\": \"Falcon\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"section\": \"4\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"rank\": \"LCP\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"phone\" : \"87652533\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"tagged\" : [ \"friends\" ],"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"password\" : \"T0034567L\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"userType\" : \"GENERAL\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mechome"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"nric\": \"S9876567I\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"company\": \"Ninja\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"section\": \"2\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"rank\": \"REC\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"phone\" : \"9482224\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"password\" : \"S9876567I\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"userType\" : \"GENERAL\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mechome"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"nric\": \"S9357825I\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"company\": \"2nd\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"section\": \"1\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"rank\": \"PTE\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"phone\" : \"9482427\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"password\" : \"S9357825I\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"userType\" : \"GENERAL\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mechome"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"nric\": \"T0065782J\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"company\": \"1st\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"section\": \"2\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"rank\": \"CFC\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"name\" : \"George Best\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mechome"
        },
        "content": "    \"phone\" : \"+942442\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"password\" : \"T0065782J\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"userType\" : \"GENERAL\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "  \"requests\" : [ ],"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "  \"currentMonth\" : {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"year\" : 2019,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"monthIndex\" : 3,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"firstDayWeekIndex\" : 2,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"confirmed\" : \"false\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"duties\" : [ ],"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"hashMap\" : [ ]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "  },"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "  \"nextMonth\" : {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"year\" : 2019,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"monthIndex\" : 4,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"firstDayWeekIndex\" : 4,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"confirmed\" : \"false\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"duties\" : [ ],"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    \"hashMap\" : [ ]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mechome"
        },
        "content": "  }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dreampursuer95": 39,
      "mechome": 52
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mechome"
        },
        "content": "  \"personnelDatabaseFilePath\": \"personneldatabase.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "mechome": 1
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mechome"
        },
        "content": "  \"personnelDatabaseFilePath\": \"personneldatabase.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "mechome": 1
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/BrowserPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mechome"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A handler for the {@code BrowserPanel} of the UI."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mechome"
        },
        "content": "public class BrowserPanelHandle extends NodeHandle\u003cTextArea\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final String BROWSER_ID \u003d \"#textDisplay\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public BrowserPanelHandle(TextArea browserPanelNode) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        super(browserPanelNode);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Returns the text in the browser panel."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return getRootNode().getText();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "mechome": 7
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle to a person card in the person list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private static final String NRIC_FIELD_ID \u003d \"#nric\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private static final String COMPANY_FIELD_ID \u003d \"#company\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private static final String SECTION_FIELD_ID \u003d \"#section\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private static final String RANK_FIELD_ID \u003d \"#rank\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private final Label nricLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private final Label companyLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private final Label sectionLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private final Label rankLabel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mechome"
        },
        "content": "        nricLabel \u003d getChildNode(NRIC_FIELD_ID);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mechome"
        },
        "content": "        companyLabel \u003d getChildNode(COMPANY_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mechome"
        },
        "content": "        sectionLabel \u003d getChildNode(SECTION_FIELD_ID);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mechome"
        },
        "content": "        rankLabel \u003d getChildNode(RANK_FIELD_ID);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public String getNric() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return nricLabel.getText();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public String getCompany() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return companyLabel.getText();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public String getSection() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return sectionLabel.getText();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public String getRank() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return rankLabel.getText();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if this handle contains {@code person}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Person person) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return getNric().equals(person.getNric().value)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mechome"
        },
        "content": "                \u0026\u0026 getCompany().equals(person.getCompany().value)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mechome"
        },
        "content": "                \u0026\u0026 getSection().equals(person.getSection().value)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mechome"
        },
        "content": "                \u0026\u0026 getRank().equals(person.getRank().value)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mechome"
        },
        "content": "                \u0026\u0026 getName().equals(person.getName().fullName)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getPhone().equals(person.getPhone().value)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(person.getTags().stream()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                        .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                        .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 76,
      "mechome": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.PersonnelDatabase;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.ReadOnlyPersonnelDatabase;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.storage.JsonPersonnelDatabaseStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.json\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mechome"
        },
        "content": "    protected Supplier\u003cReadOnlyPersonnelDatabase\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyPersonnelDatabase\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mechome"
        },
        "content": "            JsonPersonnelDatabaseStorage jsonPersonnelDatabaseStorage \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mechome"
        },
        "content": "                    new JsonPersonnelDatabaseStorage(saveFileLocation);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mechome"
        },
        "content": "                jsonPersonnelDatabaseStorage.savePersonnelDatabase(initialDataSupplier.get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mechome"
        },
        "content": "        userPrefs.setPersonnelDatabaseFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Returns a defensive copy of the personnel database data stored inside the storage file."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public PersonnelDatabase readStoragePersonnelDatabase() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mechome"
        },
        "content": "            return new PersonnelDatabase(storage.readPersonnelDatabase().get());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mechome"
        },
        "content": "            throw new AssertionError(\"Data is not in the PersonnelDatabase format.\", dce);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return storage.getPersonnelDatabaseFilePath();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Model copy \u003d new ModelManager((model.getPersonnelDatabase()), new UserPrefs());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredPersonList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        ui.testStartAdmin(primaryStage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 94,
      "mechome": 15,
      "exactlyprecise": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/UiCommandInteractionEnumTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "public class UiCommandInteractionEnumTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void testMonthString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Assert.assertTrue(UiCommandInteraction.PEOPLE_LIST \u003d\u003d UiCommandInteraction.PEOPLE_LIST);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Assert.assertTrue(UiCommandInteraction.EXIT \u003d\u003d UiCommandInteraction.EXIT);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Assert.assertTrue(UiCommandInteraction.HELP \u003d\u003d UiCommandInteraction.HELP);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Assert.assertTrue(UiCommandInteraction.CALENDAR_CURRENT \u003d\u003d UiCommandInteraction.CALENDAR_CURRENT);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Assert.assertTrue(UiCommandInteraction.CALENDAR_NEXT \u003d\u003d UiCommandInteraction.CALENDAR_NEXT);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Assert.assertNotEquals(UiCommandInteraction.PEOPLE_LIST, null);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Assert.assertNotEquals(UiCommandInteraction.HELP, null);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Assert.assertNotEquals(UiCommandInteraction.EXIT, null);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Assert.assertNotEquals(UiCommandInteraction.CALENDAR_CURRENT, null);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Assert.assertNotEquals(UiCommandInteraction.CALENDAR_NEXT, null);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Assert.assertNotEquals(UiCommandInteraction.HELP, UiCommandInteraction.CALENDAR_CURRENT);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Assert.assertNotEquals(UiCommandInteraction.EXIT, UiCommandInteraction.HELP);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Assert.assertNotEquals(UiCommandInteraction.HELP, UiCommandInteraction.PEOPLE_LIST);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "exactlyprecise": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/UserTypeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "public class UserTypeTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void testMonthString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Assert.assertNotEquals(UserType.ADMIN, UserType.GENERAL);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Assert.assertTrue(UserType.ADMIN \u003d\u003d UserType.ADMIN);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Assert.assertTrue(UserType.GENERAL \u003d\u003d UserType.GENERAL);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Assert.assertNotEquals(UserType.ADMIN, null);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Assert.assertNotEquals(UserType.GENERAL, null);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "exactlyprecise": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/CalendarUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "public class CalendarUtilTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public void testMonthString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        Assert.assertEquals(CalendarUtil.getMonthString(0), \"January\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        Assert.assertEquals(CalendarUtil.getMonthString(5), \"June\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        Assert.assertEquals(CalendarUtil.getMonthString(11), \"December\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dreampursuer95": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COMPANY_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RANK_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SECTION_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.UserType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.ReadOnlyPersonnelDatabase;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.storage.JsonPersonnelDatabaseStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mechome"
        },
        "content": "        JsonPersonnelDatabaseStorage personnelDatabaseStorage \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mechome"
        },
        "content": "                new JsonPersonnelDatabaseStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mechome"
        },
        "content": "        StorageManager storage \u003d new StorageManager(personnelDatabaseStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void executeStorageThrowsIoExceptionThrowsCommandException() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // Setup LogicManager with JsonPersonnelDatabaseIoExceptionThrowingStub"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        JsonPersonnelDatabaseStorage personnelDatabaseStorage \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                new JsonPersonnelDatabaseIoExceptionThrowingStub(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        StorageManager storage \u003d new StorageManager(personnelDatabaseStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NRIC_DESC_AMY + COMPANY_DESC_AMY + SECTION_DESC_AMY"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                + RANK_DESC_AMY + NAME_DESC_AMY + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().buildReduced();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        expectedModel.getDutyCalendar().getNextMonth().unconfirm();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        expectedModel.commitPersonnelDatabase();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(CommandException.class, addCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(addCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPersonnelDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mechome"
        },
        "content": "     *      - {@code expectedModel}\u0027s personnel database was saved to the storage file."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mechome"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand, UserType.ADMIN, UserType.DEFAULT_ADMIN_USERNAME);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD, UserType.ADMIN,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                    UserType.DEFAULT_ADMIN_USERNAME);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private static class JsonPersonnelDatabaseIoExceptionThrowingStub extends JsonPersonnelDatabaseStorage {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "mechome"
        },
        "content": "        private JsonPersonnelDatabaseIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "mechome"
        },
        "content": "        public void savePersonnelDatabase(ReadOnlyPersonnelDatabase personnelDatabase,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "mechome"
        },
        "content": "                                          Path filePath) throws IOException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 3,
      "-": 167,
      "mechome": 14,
      "exactlyprecise": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LoginTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ADMIN_TAN_PASSWORD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ADMIN_TAN_USERNAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.GENERAL_DAN_PASSWORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.GENERAL_DAN_USERNAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonnelDatabase;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.UserType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "public class LoginTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static final String WRONG_USERNAME \u003d \"General\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static final String WRONG_PASSWORD \u003d \"General\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPersonnelDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    private Logic logic \u003d new LogicManager(model, null);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void findFalseUserPassFailure() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Assert.assertNotEquals(UserType.GENERAL, logic.findAccount(WRONG_USERNAME, WRONG_PASSWORD));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Assert.assertNotEquals(UserType.ADMIN, logic.findAccount(WRONG_USERNAME, WRONG_PASSWORD));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Assert.assertEquals(null, logic.findAccount(WRONG_USERNAME, WRONG_PASSWORD));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void findUserPassSuccess() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Assert.assertEquals(UserType.GENERAL, logic.findAccount(GENERAL_DAN_USERNAME, GENERAL_DAN_PASSWORD));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Assert.assertEquals(UserType.ADMIN, logic.findAccount(ADMIN_TAN_USERNAME, ADMIN_TAN_PASSWORD));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void findFalseUserPassCombinationFailure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Assert.assertEquals(null, logic.findAccount(ADMIN_TAN_USERNAME, GENERAL_DAN_PASSWORD));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Assert.assertEquals(null, logic.findAccount(GENERAL_DAN_USERNAME, ADMIN_TAN_PASSWORD));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 10,
      "exactlyprecise": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailureGeneral;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonnelDatabase;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mechome"
        },
        "content": "        model \u003d new ModelManager(getTypicalPersonnelDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().buildReduced();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPersonnelDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mechome"
        },
        "content": "        expectedModel.commitPersonnelDatabase();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model, commandHistory,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void executeGeneralNewPersonThrowsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().buildReduced();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPersonnelDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        expectedModel.commitPersonnelDatabase();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertCommandFailureGeneral(new AddCommand(validPerson), model, commandHistory, Messages.MESSAGE_NO_AUTHORITY);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Person personInList \u003d model.getPersonnelDatabase().getPersonList().get(0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, commandHistory,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 43,
      "mechome": 5,
      "exactlyprecise": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NO_AUTHORITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.UserType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import seedu.address.model.DutyCalendar;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.PersonnelDatabase;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.ReadOnlyPersonnelDatabase;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.duty.DutyMonth;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.duty.DutySettings;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.duty.DutyStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private static final String CALLED_ERROR \u003d \"This method should not be called.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().buildReduced();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).executeAdmin(modelStub, commandHistory);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().buildReduced();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        addCommand.executeAdmin(modelStub, commandHistory);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void executeGeneralPersonAcceptedByModelThrowsCommandException() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().buildReduced();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        thrown.expectMessage(MESSAGE_NO_AUTHORITY);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        new AddCommand(validPerson).executeGeneral(modelStub, commandHistory);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").buildReduced();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").buildReduced();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throw new AssertionError(CALLED_ERROR);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throw new AssertionError(CALLED_ERROR);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throw new AssertionError(CALLED_ERROR);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throw new AssertionError(CALLED_ERROR);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mechome"
        },
        "content": "        public Path getPersonnelDatabaseFilePath() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throw new AssertionError(CALLED_ERROR);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mechome"
        },
        "content": "        public void setPersonnelDatabaseFilePath(Path personnelDatabaseFilePath) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throw new AssertionError(CALLED_ERROR);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throw new AssertionError(CALLED_ERROR);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mechome"
        },
        "content": "        public void setPersonnelDatabase(ReadOnlyPersonnelDatabase newData) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throw new AssertionError(CALLED_ERROR);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mechome"
        },
        "content": "        public ReadOnlyPersonnelDatabase getPersonnelDatabase() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throw new AssertionError(CALLED_ERROR);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        public DutyCalendar getDutyCalendar() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throw new AssertionError(CALLED_ERROR);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mechome"
        },
        "content": "        public void sortPersonnelDatabase() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throw new AssertionError(CALLED_ERROR);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throw new AssertionError(CALLED_ERROR);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        public boolean hasPerson(String nric) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throw new AssertionError(CALLED_ERROR);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throw new AssertionError(CALLED_ERROR);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throw new AssertionError(CALLED_ERROR);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throw new AssertionError(CALLED_ERROR);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throw new AssertionError(CALLED_ERROR);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "mechome"
        },
        "content": "        public boolean canUndoPersonnelDatabase() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throw new AssertionError(CALLED_ERROR);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "mechome"
        },
        "content": "        public boolean canRedoPersonnelDatabase() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throw new AssertionError(CALLED_ERROR);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "mechome"
        },
        "content": "        public void undoPersonnelDatabase() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throw new AssertionError(CALLED_ERROR);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "mechome"
        },
        "content": "        public void redoPersonnelDatabase() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throw new AssertionError(CALLED_ERROR);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "mechome"
        },
        "content": "        public void commitPersonnelDatabase() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throw new AssertionError(CALLED_ERROR);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throw new AssertionError(CALLED_ERROR);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        public Person getSelectedPerson() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throw new AssertionError(CALLED_ERROR);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throw new AssertionError(CALLED_ERROR);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        public UserType findAccount(String userName, String password) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throw new AssertionError(CALLED_ERROR);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        public Person findPerson(String userName) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throw new AssertionError(CALLED_ERROR);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        public DutyMonth getCurrentDutyMonth() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throw new AssertionError(CALLED_ERROR);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        public DutyMonth getNextDutyMonth() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throw new AssertionError(CALLED_ERROR);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        public DutyMonth getDummyNextMonth() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            throw new AssertionError(CALLED_ERROR);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        public DutyStorage getDutyStorage() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throw new AssertionError(CALLED_ERROR);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        public void addSwapRequest(String nric, LocalDate allocatedDate, LocalDate requestedDate) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throw new AssertionError(CALLED_ERROR);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        public void setDutySettings(DutySettings dutySettings) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throw new AssertionError(CALLED_ERROR);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        public DutySettings getDutySettings() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throw new AssertionError(CALLED_ERROR);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        public void scheduleDutyForNextMonth() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            throw new AssertionError(CALLED_ERROR);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        public DutyCalendar getDutyCalendar() {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            return new DutyCalendar();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "mechome"
        },
        "content": "        public void commitPersonnelDatabase() {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "mechome"
        },
        "content": "        public ReadOnlyPersonnelDatabase getPersonnelDatabase() {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "mechome"
        },
        "content": "            return new PersonnelDatabase();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dreampursuer95": 15,
      "-": 223,
      "mechome": 15,
      "exactlyprecise": 88
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailureGeneral;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonnelDatabase;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.PersonnelDatabase;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mechome"
        },
        "content": "        expectedModel.commitPersonnelDatabase();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalPersonnelDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalPersonnelDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mechome"
        },
        "content": "        expectedModel.setPersonnelDatabase(new PersonnelDatabase());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mechome"
        },
        "content": "        expectedModel.commitPersonnelDatabase();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void executeGeneralEmptyAddressBookThrowsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        expectedModel.commitPersonnelDatabase();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertCommandFailureGeneral(new ClearCommand(), model, commandHistory, Messages.MESSAGE_NO_AUTHORITY);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void executeGeneralNonEmptyAddressBookThrowsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalPersonnelDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalPersonnelDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        expectedModel.setPersonnelDatabase(new PersonnelDatabase());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        expectedModel.commitPersonnelDatabase();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertCommandFailureGeneral(new ClearCommand(), model, commandHistory, Messages.MESSAGE_NO_AUTHORITY);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "mechome": 7,
      "exactlyprecise": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.UiCommandInteraction;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", null)));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", UiCommandInteraction.HELP)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", UiCommandInteraction.EXIT)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // different list value -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", UiCommandInteraction.PEOPLE_LIST)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        //different calendarCurrent value -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", UiCommandInteraction.CALENDAR_CURRENT)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        //different calendarNext value -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", UiCommandInteraction.CALENDAR_NEXT)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", UiCommandInteraction.HELP)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                .hashCode());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", UiCommandInteraction.EXIT)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                .hashCode());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        //different list value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", UiCommandInteraction.PEOPLE_LIST)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                .hashCode());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        //different calendarCurrent value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                UiCommandInteraction.CALENDAR_CURRENT)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                .hashCode());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        //different calendarNext value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                UiCommandInteraction.CALENDAR_NEXT)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                .hashCode());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 49,
      "exactlyprecise": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RANK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SECTION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERTYPE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.PersonnelDatabase;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final String VALID_NRIC_AMY \u003d \"S1234567A\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final String VALID_NRIC_BOB \u003d \"S1234567B\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final String VALID_COMPANY_AMY \u003d \"Alpha\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final String VALID_COMPANY_BOB \u003d \"Bravo\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final String VALID_SECTION_AMY \u003d \"1\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final String VALID_SECTION_BOB \u003d \"2\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final String VALID_RANK_AMY \u003d \"PTE\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final String VALID_RANK_BOB \u003d \"LCP\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static final String VALID_PASSWORD_AMY \u003d \"password\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static final String VALID_PASSWORD_BOB \u003d \"pass\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static final String VALID_USERTYPE_AMY \u003d \"A\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static final String VALID_USERTYPE_BOB \u003d \"G\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final String NRIC_DESC_AMY \u003d \" \" + PREFIX_NRIC + VALID_NRIC_AMY;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final String NRIC_DESC_BOB \u003d \" \" + PREFIX_NRIC + VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final String COMPANY_DESC_AMY \u003d \" \" + PREFIX_COMPANY + VALID_COMPANY_AMY;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final String COMPANY_DESC_BOB \u003d \" \" + PREFIX_COMPANY + VALID_COMPANY_BOB;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final String SECTION_DESC_AMY \u003d \" \" + PREFIX_SECTION + VALID_SECTION_AMY;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final String SECTION_DESC_BOB \u003d \" \" + PREFIX_SECTION + VALID_SECTION_BOB;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final String RANK_DESC_AMY \u003d \" \" + PREFIX_RANK + VALID_RANK_AMY;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final String RANK_DESC_BOB \u003d \" \" + PREFIX_RANK + VALID_RANK_BOB;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static final String PASSWORD_DESC_AMY \u003d \" \" + PREFIX_PASSWORD + VALID_PASSWORD_AMY;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static final String PASSWORD_DESC_BOB \u003d \" \" + PREFIX_PASSWORD + VALID_PASSWORD_BOB;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static final String USERTYPE_DESC_AMY \u003d \" \" + PREFIX_USERTYPE + VALID_USERTYPE_AMY;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static final String USERTYPE_DESC_BOB \u003d \" \" + PREFIX_USERTYPE + VALID_USERTYPE_BOB;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final String INVALID_NRIC_DESC \u003d \" \" + PREFIX_NRIC + \"1238675A\"; // missing first letter"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static final String INVALID_COMPANY_DESC \u003d \" \" + PREFIX_COMPANY + \" \"; //must have non-space character"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static final String INVALID_SECTION_DESC \u003d \" \" + PREFIX_SECTION + \" \"; // must have non-space character"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final String INVALID_RANK_DESC \u003d \" \" + PREFIX_RANK + \"PTTT\"; // only 3 letters allowed in rank"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static final String INVALID_PASSWORD_DESC \u003d \" \" + PREFIX_PASSWORD + \" \"; //must have non-space character"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static final String INVALID_USERTYPE_DESC \u003d \" \" + PREFIX_USERTYPE + \"H\"; //Only have A or G"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mechome"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withNric(VALID_NRIC_AMY)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mechome"
        },
        "content": "                .withCompany(VALID_COMPANY_AMY).withSection(VALID_SECTION_AMY)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mechome"
        },
        "content": "                .withRank(VALID_RANK_AMY).withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mechome"
        },
        "content": "                .withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).withPassword(VALID_PASSWORD_AMY).withUserType(VALID_USERTYPE_AMY).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mechome"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withNric(VALID_NRIC_BOB)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mechome"
        },
        "content": "                .withCompany(VALID_COMPANY_BOB).withSection(VALID_SECTION_BOB)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mechome"
        },
        "content": "                .withRank(VALID_RANK_BOB).withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mechome"
        },
        "content": "                .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).withPassword(VALID_PASSWORD_BOB)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                .withUserType(VALID_USERTYPE_BOB).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            CommandResult result \u003d command.executeAdmin(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model)}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * This is for admin commands"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * Executes (admin) the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * - the personnel database, filtered person list and selected person in {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mechome"
        },
        "content": "        PersonnelDatabase expectedPersonnelDatabase \u003d new PersonnelDatabase(actualModel.getPersonnelDatabase());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedSelectedPerson \u003d actualModel.getSelectedPerson();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            command.executeAdmin(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            assertEquals(expectedPersonnelDatabase, actualModel.getPersonnelDatabase());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            assertEquals(expectedSelectedPerson, actualModel.getSelectedPerson());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * Executes (admin) the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static void assertCommandSuccessGeneral(Command command, Model actualModel,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                                                   CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                                                   CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            CommandResult result \u003d command.executeGeneral(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model)}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * This is for general commands"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static void assertCommandSuccessGeneral(Command command, Model actualModel,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                                                   CommandHistory actualCommandHistory, String expectedMessage,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                                                   Model expectedModel) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertCommandSuccessGeneral(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * Executes (admin) the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * - the personnel database, filtered person list and selected person in {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static void assertCommandFailureGeneral(Command command, Model actualModel,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                                                   CommandHistory actualCommandHistory, String expectedMessage) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        PersonnelDatabase expectedPersonnelDatabase \u003d new PersonnelDatabase(actualModel.getPersonnelDatabase());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedSelectedPerson \u003d actualModel.getSelectedPerson();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            command.executeGeneral(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "mechome"
        },
        "content": "            assertEquals(expectedPersonnelDatabase, actualModel.getPersonnelDatabase());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedSelectedPerson, actualModel.getSelectedPerson());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * {@code model}\u0027s personnel database."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s personnel database."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "mechome"
        },
        "content": "        model.commitPersonnelDatabase();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dreampursuer95": 2,
      "-": 131,
      "mechome": 36,
      "exactlyprecise": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailureGeneral;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonnelDatabase;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mechome"
        },
        "content": "//import seedu.address.model.DutyCalendar;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPersonnelDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mechome"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPersonnelDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mechome"
        },
        "content": "        expectedModel.commitPersonnelDatabase();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void executeGeneralValidIndexUnfilteredListThrowsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPersonnelDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        expectedModel.commitPersonnelDatabase();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertCommandFailureGeneral(deleteCommand, model, commandHistory, Messages.MESSAGE_NO_AUTHORITY);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPersonnelDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mechome"
        },
        "content": "        expectedModel.commitPersonnelDatabase();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPersonnelDatabase().getPersonList().size());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPersonnelDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mechome"
        },
        "content": "        expectedModel.commitPersonnelDatabase();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e first person deleted"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        deleteCommand.executeAdmin(model, commandHistory);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mechome"
        },
        "content": "        expectedModel.undoPersonnelDatabase();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person deleted again"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mechome"
        },
        "content": "        expectedModel.redoPersonnelDatabase();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Deletes a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted person in the"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the person object regardless of indexing."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPersonnelDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mechome"
        },
        "content": "        expectedModel.commitPersonnelDatabase();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e deletes second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        deleteCommand.executeAdmin(model, commandHistory);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mechome"
        },
        "content": "        expectedModel.undoPersonnelDatabase();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(personToDelete, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e deletes same second person in unfiltered person list"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mechome"
        },
        "content": "        expectedModel.redoPersonnelDatabase();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 160,
      "mechome": 16,
      "exactlyprecise": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccessGeneral;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonnelDatabase;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.commons.core.UserType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.PersonnelDatabase;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPersonnelDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void executeAdminAllFieldsSpecifiedUnfilteredListSuccess() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mechome"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor, UserType.DEFAULT_ADMIN_USERNAME);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PersonnelDatabase(model.getPersonnelDatabase()), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mechome"
        },
        "content": "        expectedModel.commitPersonnelDatabase();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void executeGeneralAllFieldsSpecifiedUnfilteredListSuccess() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Person toChange \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(descriptor, toChange.getNric().value);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PersonnelDatabase(model.getPersonnelDatabase()), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        expectedModel.setPerson(toChange, editedPerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        expectedModel.commitPersonnelDatabase();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertCommandSuccessGeneral(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void executeAdminSomeFieldsSpecifiedUnfilteredListSuccess() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mechome"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor, UserType.DEFAULT_ADMIN_USERNAME);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PersonnelDatabase(model.getPersonnelDatabase()), new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mechome"
        },
        "content": "        expectedModel.commitPersonnelDatabase();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void executeGeneralSomeFieldsSpecifiedUnfilteredListSuccess() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(descriptor, lastPerson.getNric().value);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PersonnelDatabase(model.getPersonnelDatabase()), new UserPrefs());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        expectedModel.commitPersonnelDatabase();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertCommandSuccessGeneral(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void executeAdminNoFieldSpecifiedUnfilteredListSuccess() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor(),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                UserType.DEFAULT_ADMIN_USERNAME);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PersonnelDatabase(model.getPersonnelDatabase()), new UserPrefs());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mechome"
        },
        "content": "        expectedModel.commitPersonnelDatabase();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void executeGeneralNoFieldSpecifiedSuccess() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(new EditPersonDescriptor(), editedPerson.getNric().value);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PersonnelDatabase(model.getPersonnelDatabase()), new UserPrefs());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        expectedModel.commitPersonnelDatabase();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertCommandSuccessGeneral(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void executeAdminFilteredListSuccess() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mechome"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build(), UserType.DEFAULT_ADMIN_USERNAME);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PersonnelDatabase(model.getPersonnelDatabase()), new UserPrefs());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mechome"
        },
        "content": "        expectedModel.commitPersonnelDatabase();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void executeAdminDuplicatePersonUnfilteredListFailure() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mechome"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor, UserType.DEFAULT_ADMIN_USERNAME);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void executeAdminDuplicatePersonFilteredListFailure() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Person personInList \u003d model.getPersonnelDatabase().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mechome"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build(), UserType.DEFAULT_ADMIN_USERNAME);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void executeAdminInvalidPersonIndexUnfilteredListFailure() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "mechome"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor, UserType.DEFAULT_ADMIN_USERNAME);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void executeAdminInvalidPersonIndexFilteredListFailure() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPersonnelDatabase().getPersonList().size());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "mechome"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build(), UserType.DEFAULT_ADMIN_USERNAME);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void executeAdminUndoRedoValidIndexUnfilteredListSuccess() throws Exception {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "mechome"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor, UserType.DEFAULT_ADMIN_USERNAME);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PersonnelDatabase(model.getPersonnelDatabase()), new UserPrefs());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "mechome"
        },
        "content": "        expectedModel.commitPersonnelDatabase();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e first person edited"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        editCommand.executeAdmin(model, commandHistory);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "mechome"
        },
        "content": "        expectedModel.undoPersonnelDatabase();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person edited again"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "mechome"
        },
        "content": "        expectedModel.redoPersonnelDatabase();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void executeGeneralUndoRedoSuccess() throws Exception {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(descriptor, personToEdit.getNric().value);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PersonnelDatabase(model.getPersonnelDatabase()), new UserPrefs());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        expectedModel.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        expectedModel.commitPersonnelDatabase();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // edit -\u003e user edited"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        editCommand.executeGeneral(model, commandHistory);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        expectedModel.undoPersonnelDatabase();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertCommandSuccessGeneral(new UndoCommand(),"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // redo -\u003e user edited again"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        expectedModel.redoPersonnelDatabase();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertCommandSuccessGeneral(new RedoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void executeAdminUndoRedoInvalidIndexUnfilteredListFailure() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "mechome"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor, UserType.DEFAULT_ADMIN_USERNAME);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Edits a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "mechome"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor, UserType.DEFAULT_ADMIN_USERNAME);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PersonnelDatabase(model.getPersonnelDatabase()), new UserPrefs());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "mechome"
        },
        "content": "        expectedModel.commitPersonnelDatabase();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        editCommand.executeAdmin(model, commandHistory);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "mechome"
        },
        "content": "        expectedModel.undoPersonnelDatabase();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e edits same second person in unfiltered person list"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "mechome"
        },
        "content": "        expectedModel.redoPersonnelDatabase();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY,"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                UserType.DEFAULT_ADMIN_USERNAME);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor,"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                UserType.DEFAULT_ADMIN_USERNAME);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY,"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                UserType.DEFAULT_ADMIN_USERNAME)));"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB,"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                UserType.DEFAULT_ADMIN_USERNAME)));"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // No index -\u003e returns false"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(DESC_BOB,"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                UserType.DEFAULT_ADMIN_USERNAME)));"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // different nric -\u003e returns false"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB,"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                \"TestingUser\")));"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        String personNric \u003d personToEdit.getNric().value;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        final EditCommand standardCommandGeneral \u003d new EditCommand(DESC_AMY, personNric);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        EditCommand commandWithSameValuesGeneral \u003d new EditCommand(copyDescriptor, personNric);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertTrue(standardCommandGeneral.equals(commandWithSameValuesGeneral));"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertTrue(standardCommandGeneral.equals(standardCommandGeneral));"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertFalse(standardCommandGeneral.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // with Index -\u003ereturns false"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertFalse(standardCommandGeneral.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY, personNric)));"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertFalse(standardCommandGeneral.equals(new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                DESC_BOB, personNric)));"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        //different nric -\u003e returns false"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertFalse(standardCommandGeneral.equals(new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                DESC_BOB, UserType.DEFAULT_ADMIN_USERNAME)));"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 200,
      "mechome": 32,
      "exactlyprecise": 130
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PASSWORD_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RANK_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SECTION_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_USERTYPE_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // different nric -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mechome"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withNric(VALID_NRIC_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // different company -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mechome"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withCompany(VALID_COMPANY_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // different section -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mechome"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withSection(VALID_SECTION_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // different rank -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mechome"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withRank(VALID_RANK_BOB).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mechome"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // different password -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPassword(VALID_PASSWORD_BOB).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        //different UserType -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withUserType(VALID_USERTYPE_BOB).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 57,
      "mechome": 15,
      "exactlyprecise": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccessGeneral;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.UiCommandInteraction;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                UiCommandInteraction.EXIT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void executeGeneralExitSuccess() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                UiCommandInteraction.EXIT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertCommandSuccessGeneral(new ExitCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 21,
      "exactlyprecise": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccessGeneral;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonnelDatabase;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mechome"
        },
        "content": "//import seedu.address.model.DutyCalendar;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPersonnelDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalPersonnelDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void executeGeneralZeroKeywordsNoPersonFound() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertCommandSuccessGeneral(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void executeGeneralMultipleKeywordsMultiplePersonsFound() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertCommandSuccessGeneral(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 82,
      "mechome": 4,
      "exactlyprecise": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccessGeneral;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.UiCommandInteraction;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, UiCommandInteraction.HELP);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void executeGeneralHelpSuccess() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, UiCommandInteraction.HELP);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertCommandSuccessGeneral(new HelpCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 21,
      "exactlyprecise": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HistoryCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccessGeneral;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void executeAdmin() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, HistoryCommand.MESSAGE_NO_HISTORY, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        String command1 \u003d \"clear\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(HistoryCommand.MESSAGE_SUCCESS, command1), expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String command2 \u003d \"randomCommand\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String command3 \u003d \"select 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command3);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(HistoryCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                String.join(\"\\n\", command3, command2, command1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void executeGeneral() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertCommandSuccessGeneral(new HistoryCommand(), model, history, HistoryCommand.MESSAGE_NO_HISTORY,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        String command1 \u003d \"clear\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        history.add(command1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertCommandSuccessGeneral(new HistoryCommand(), model, history,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                String.format(HistoryCommand.MESSAGE_SUCCESS, command1), expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        String command2 \u003d \"randomCommd\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        String command3 \u003d \"select 2\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        history.add(command2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        history.add(command3);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        String expectedMessage \u003d String.format(HistoryCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                String.join(\"\\n\", command3, command2, command1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertCommandSuccessGeneral(new HistoryCommand(), model, history, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "exactlyprecise": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccessGeneral;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.ListCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonnelDatabase;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.UiCommandInteraction;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mechome"
        },
        "content": "        model \u003d new ModelManager(getTypicalPersonnelDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mechome"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getPersonnelDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_SUCCESS, UiCommandInteraction.PEOPLE_LIST);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_SUCCESS, UiCommandInteraction.PEOPLE_LIST);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void executeGeneralListIsNotFilteredShowsSameList() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_SUCCESS, UiCommandInteraction.PEOPLE_LIST);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertCommandSuccessGeneral(new ListCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void executeGeneralListIsFilteredShowsEverything() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_SUCCESS, UiCommandInteraction.PEOPLE_LIST);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertCommandSuccessGeneral(new ListCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "mechome": 3,
      "exactlyprecise": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailureGeneral;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccessGeneral;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonnelDatabase;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mechome"
        },
        "content": "//import seedu.address.model.DutyCalendar;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalPersonnelDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalPersonnelDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mechome"
        },
        "content": "        model.undoPersonnelDatabase();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mechome"
        },
        "content": "        model.undoPersonnelDatabase();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mechome"
        },
        "content": "        expectedModel.undoPersonnelDatabase();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mechome"
        },
        "content": "        expectedModel.undoPersonnelDatabase();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void executeAdmin() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mechome"
        },
        "content": "        expectedModel.redoPersonnelDatabase();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mechome"
        },
        "content": "        expectedModel.redoPersonnelDatabase();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void executeGeneral() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        expectedModel.redoPersonnelDatabase();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertCommandSuccessGeneral(new RedoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        expectedModel.redoPersonnelDatabase();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertCommandSuccessGeneral(new RedoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertCommandFailureGeneral(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 39,
      "mechome": 10,
      "exactlyprecise": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ScheduleCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonnelDatabase;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "public class ScheduleCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"schedule\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalPersonnelDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalPersonnelDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    void executeAdmin() { }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjpan47"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    void setUp() { }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjpan47": 19,
      "exactlyprecise": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailureGeneral;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccessGeneral;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonnelDatabase;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "// import seedu.address.commons.core.UiCommandInteraction;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mechome"
        },
        "content": "//import seedu.address.model.DutyCalendar;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPersonnelDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalPersonnelDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void executeAdminValidIndexUnfilteredListSuccess() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertExecutionSuccessAdmin(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertExecutionSuccessAdmin(INDEX_THIRD_PERSON);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertExecutionSuccessAdmin(lastPersonIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void executeGeneralValidIndexUnfilteredListSuccess() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertExecutionSuccessGeneral(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertExecutionSuccessGeneral(INDEX_THIRD_PERSON);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertExecutionSuccessGeneral(lastPersonIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void executeAdminInvalidIndexUnfilteredListFailure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertExecutionFailureAdmin(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void executeGeneralInvalidIndexUnfilteredListFailure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertExecutionFailureGeneral(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void executeAdminValidIndexFilteredListSuccess() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertExecutionSuccessAdmin(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void executeGeneralValidIndexFilteredListSuccess() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertExecutionSuccessGeneral(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void executeAdminInvalidIndexFilteredListFailure() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getPersonnelDatabase().getPersonList().size());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertExecutionFailureAdmin(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void executeGeneralInvalidIndexFilteredListFailure() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getPersonnelDatabase().getPersonList().size());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertExecutionFailureGeneral(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * Executes (admin) a {@code SelectCommand} with the given {@code index},"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * and checks that the model\u0027s selected person is set to the person at {@code index} in the filtered person list."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private void assertExecutionSuccessAdmin(Index index) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setSelectedPerson(model.getFilteredPersonList().get(index.getZeroBased()));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * Executes (admin) a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private void assertExecutionFailureAdmin(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * Executes (general) a {@code SelectCommand} with the given {@code index},"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * and checks that the model\u0027s selected person is set to the person at {@code index} in the filtered person list."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private void assertExecutionSuccessGeneral(Index index) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        expectedModel.setSelectedPerson(model.getFilteredPersonList().get(index.getZeroBased()));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertCommandSuccessGeneral(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * Executes (general) a {@code SelectCommand} with the given {@code index},"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private void assertExecutionFailureGeneral(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertCommandFailureGeneral(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 94,
      "mechome": 5,
      "exactlyprecise": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailureGeneral;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccessGeneral;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonnelDatabase;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mechome"
        },
        "content": "//import seedu.address.model.DutyCalendar;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalPersonnelDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalPersonnelDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void executeAdmin() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mechome"
        },
        "content": "        expectedModel.undoPersonnelDatabase();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mechome"
        },
        "content": "        expectedModel.undoPersonnelDatabase();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void executeGeneral() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        expectedModel.undoPersonnelDatabase();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertCommandSuccessGeneral(new UndoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        expectedModel.undoPersonnelDatabase();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertCommandSuccessGeneral(new UndoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertCommandFailureGeneral(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 39,
      "mechome": 6,
      "exactlyprecise": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ViewCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "public class ViewCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dreampursuer95": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COMPANY_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COMPANY_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_COMPANY_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_RANK_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SECTION_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RANK_DESC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RANK_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SECTION_DESC_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SECTION_DESC_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RANK_BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SECTION_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import seedu.address.model.person.Rank;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import seedu.address.model.person.Section;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).buildReduced();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NRIC_DESC_BOB + COMPANY_DESC_BOB"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mechome"
        },
        "content": "                + SECTION_DESC_BOB + RANK_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mechome"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // multiple nrics - last nric accepted"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertParseSuccess(parser, NRIC_DESC_AMY + NRIC_DESC_BOB + COMPANY_DESC_BOB + SECTION_DESC_BOB"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mechome"
        },
        "content": "                + RANK_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // multiple companies - last company accepted"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertParseSuccess(parser, NRIC_DESC_BOB + COMPANY_DESC_AMY + COMPANY_DESC_BOB + SECTION_DESC_BOB"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mechome"
        },
        "content": "                + RANK_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // multiple sections - last section accepted"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertParseSuccess(parser, NRIC_DESC_BOB + COMPANY_DESC_BOB + SECTION_DESC_AMY + SECTION_DESC_BOB"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mechome"
        },
        "content": "                + RANK_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // multiple ranks - last rank accepted"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertParseSuccess(parser, NRIC_DESC_BOB + COMPANY_DESC_BOB + SECTION_DESC_BOB + RANK_DESC_AMY"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mechome"
        },
        "content": "                + RANK_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertParseSuccess(parser, NRIC_DESC_BOB + COMPANY_DESC_BOB + SECTION_DESC_BOB + RANK_DESC_BOB"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mechome"
        },
        "content": "                + NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertParseSuccess(parser, NRIC_DESC_BOB + COMPANY_DESC_BOB + SECTION_DESC_BOB + RANK_DESC_BOB"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mechome"
        },
        "content": "                + NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                .buildReduced();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertParseSuccess(parser, NRIC_DESC_BOB + COMPANY_DESC_BOB + SECTION_DESC_BOB + RANK_DESC_BOB"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mechome"
        },
        "content": "                + NAME_DESC_BOB + PHONE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mechome"
        },
        "content": "                new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().buildReduced();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertParseSuccess(parser, NRIC_DESC_AMY + COMPANY_DESC_AMY + SECTION_DESC_AMY + RANK_DESC_AMY"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mechome"
        },
        "content": "                + NAME_DESC_AMY + PHONE_DESC_AMY,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // missing nric prefix"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertParseFailure(parser, VALID_NRIC_BOB + COMPANY_DESC_BOB + SECTION_DESC_BOB + RANK_DESC_BOB"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mechome"
        },
        "content": "                        + NAME_DESC_BOB + PHONE_DESC_BOB,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // missing company prefix"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertParseFailure(parser, NRIC_DESC_BOB + VALID_COMPANY_BOB + SECTION_DESC_BOB + RANK_DESC_BOB"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mechome"
        },
        "content": "                        + NAME_DESC_BOB + PHONE_DESC_BOB,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mechome"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // missing section prefix"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertParseFailure(parser, NRIC_DESC_BOB + COMPANY_DESC_BOB + VALID_SECTION_BOB + RANK_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mechome"
        },
        "content": "                        + NAME_DESC_BOB + PHONE_DESC_BOB,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // missing rank prefix"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertParseFailure(parser, NRIC_DESC_BOB + COMPANY_DESC_BOB + SECTION_DESC_BOB + VALID_RANK_BOB"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mechome"
        },
        "content": "                        + NAME_DESC_BOB + PHONE_DESC_BOB,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertParseFailure(parser, NRIC_DESC_BOB + COMPANY_DESC_BOB + SECTION_DESC_BOB + RANK_DESC_BOB"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mechome"
        },
        "content": "                        + VALID_NAME_BOB + PHONE_DESC_BOB,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mechome"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertParseFailure(parser, NRIC_DESC_BOB + COMPANY_DESC_BOB + SECTION_DESC_BOB + RANK_DESC_BOB"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mechome"
        },
        "content": "                        + NAME_DESC_BOB + VALID_PHONE_BOB,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertParseFailure(parser, VALID_NRIC_BOB + VALID_COMPANY_BOB + VALID_SECTION_BOB + VALID_RANK_BOB"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mechome"
        },
        "content": "                + VALID_NAME_BOB + VALID_PHONE_BOB,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // invalid nric"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertParseFailure(parser, INVALID_NRIC_DESC + COMPANY_DESC_BOB + SECTION_DESC_BOB + RANK_DESC_BOB"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                + NAME_DESC_BOB + PHONE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // invalid company"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertParseFailure(parser, NRIC_DESC_BOB + INVALID_COMPANY_DESC + SECTION_DESC_BOB + RANK_DESC_BOB"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                + NAME_DESC_BOB + PHONE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Company.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // invalid section"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertParseFailure(parser, NRIC_DESC_BOB + COMPANY_DESC_BOB + INVALID_SECTION_DESC + RANK_DESC_BOB"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                + NAME_DESC_BOB + PHONE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Section.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // invalid rank"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertParseFailure(parser, NRIC_DESC_BOB + COMPANY_DESC_BOB + SECTION_DESC_BOB + INVALID_RANK_DESC"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                + NAME_DESC_BOB + PHONE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Rank.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertParseFailure(parser, NRIC_DESC_BOB + COMPANY_DESC_BOB + SECTION_DESC_BOB + RANK_DESC_BOB"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mechome"
        },
        "content": "                + INVALID_NAME_DESC + PHONE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertParseFailure(parser, NRIC_DESC_BOB + COMPANY_DESC_BOB + SECTION_DESC_BOB + RANK_DESC_BOB"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                + NAME_DESC_BOB + INVALID_PHONE_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertParseFailure(parser, NRIC_DESC_BOB + COMPANY_DESC_BOB + SECTION_DESC_BOB + RANK_DESC_BOB"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                + NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // two invalid inputs, first invalid input reported"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertParseFailure(parser, INVALID_NRIC_DESC + COMPANY_DESC_BOB + SECTION_DESC_BOB + RANK_DESC_BOB"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                + INVALID_NAME_DESC + PHONE_DESC_BOB, Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NRIC_DESC_BOB + COMPANY_DESC_BOB + SECTION_DESC_BOB"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mechome"
        },
        "content": "                + RANK_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 2,
      "dreampursuer95": 8,
      "-": 83,
      "mechome": 81,
      "exactlyprecise": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.UserType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static final String GENERAL_USER \u003d \"General\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * Uses UserType.Admin as useerType and \"Admin\" as username."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand, UserType.ADMIN, UserType.DEFAULT_ADMIN_USERNAME);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                                              UserType userType, String userName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            Command command \u003d parser.parse(userInput, userType, userName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * Uses UserType.ADMIN as userType and \"Admin\" as username."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertParseFailure(parser, userInput, expectedMessage, UserType.ADMIN, UserType.DEFAULT_ADMIN_USERNAME);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                                              UserType userType, String userName) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            parser.parse(userInput, userType, userName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "exactlyprecise": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NO_AUTHORITY_PARSE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.GENERAL_USER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.UserType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void parse_invalidUser_throwsParseException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertParseFailure(parser, \"1\", MESSAGE_NO_AUTHORITY_PARSE, UserType.GENERAL, GENERAL_USER);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 32,
      "exactlyprecise": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserGeneralTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COMPANY_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COMPANY_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_COMPANY_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PASSWORD_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_RANK_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SECTION_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PASSWORD_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PASSWORD_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RANK_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RANK_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SECTION_DESC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SECTION_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PASSWORD_AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PASSWORD_BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RANK_AMY;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RANK_BOB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SECTION_AMY;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SECTION_BOB;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_USERTYPE_BOB;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.GENERAL_USER;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.UserType;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.person.Password;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.person.Rank;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.person.Section;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "public class EditCommandParserGeneralTest {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE_GENERAL);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private String nricOfUser \u003d TypicalPersons.getTypicalPersonNric(0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void parse_missingExtraParts_failure() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        //  extra index specified for general command"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertParseFailure(parser, \"1\" + VALID_PHONE_BOB, MESSAGE_INVALID_FORMAT,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                UserType.GENERAL, GENERAL_USER);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertParseFailure(parser, \" \", EditCommand.MESSAGE_NOT_EDITED, UserType.GENERAL,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                GENERAL_USER);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // extra index and no field specified"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT, UserType.GENERAL,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                GENERAL_USER);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // general accounts cannot edit username"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertParseFailure(parser, VALID_NRIC_BOB, MESSAGE_INVALID_FORMAT, UserType.GENERAL, GENERAL_USER);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // general accounts cannot edit userType"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertParseFailure(parser, VALID_USERTYPE_BOB, MESSAGE_INVALID_FORMAT, UserType.GENERAL, GENERAL_USER);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertParseFailure(parser, INVALID_COMPANY_DESC, Company.MESSAGE_CONSTRAINTS,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                UserType.GENERAL, nricOfUser); // invalid company"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertParseFailure(parser, INVALID_SECTION_DESC, Section.MESSAGE_CONSTRAINTS,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                UserType.GENERAL, nricOfUser); // invalid section"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertParseFailure(parser, INVALID_RANK_DESC, Rank.MESSAGE_CONSTRAINTS,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                UserType.GENERAL, nricOfUser); // invalid rank"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                UserType.GENERAL, nricOfUser); // invalid name"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertParseFailure(parser, INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                UserType.GENERAL, nricOfUser); // invalid phone"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertParseFailure(parser, INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                UserType.GENERAL, nricOfUser); // invalid tag"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertParseFailure(parser, INVALID_PASSWORD_DESC, Password.MESSAGE_CONSTRAINTS,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                UserType.GENERAL, nricOfUser); // invalid password"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // invalid name followed by valid phone"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_AMY, Name.MESSAGE_CONSTRAINTS,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                UserType.GENERAL, nricOfUser);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertParseFailure(parser, PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                UserType.GENERAL, nricOfUser);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertParseFailure(parser, TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                UserType.GENERAL, nricOfUser);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertParseFailure(parser, TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                UserType.GENERAL, nricOfUser);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertParseFailure(parser, TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                UserType.GENERAL, nricOfUser);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS, UserType.GENERAL, nricOfUser);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        String userInput \u003d COMPANY_DESC_BOB + SECTION_DESC_BOB"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                + RANK_DESC_BOB + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                + NAME_DESC_AMY + TAG_DESC_FRIEND + PASSWORD_DESC_BOB;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withCompany(VALID_COMPANY_BOB)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                .withSection(VALID_SECTION_BOB).withRank(VALID_RANK_BOB)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                .withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).withPassword(VALID_PASSWORD_BOB).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(descriptor, nricOfUser);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand, UserType.GENERAL, nricOfUser);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        String userInput \u003d PHONE_DESC_BOB + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(descriptor, nricOfUser);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand, UserType.GENERAL, nricOfUser);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        String userInput;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        EditCommand expectedCommand;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        nricOfUser \u003d TypicalPersons.getTypicalPersonNric(4);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // company"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        userInput \u003d COMPANY_DESC_AMY;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withCompany(VALID_COMPANY_AMY).build();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        expectedCommand \u003d new EditCommand(descriptor, nricOfUser);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand, UserType.GENERAL, nricOfUser);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        //section"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        userInput \u003d SECTION_DESC_AMY;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withSection(VALID_SECTION_AMY).build();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        expectedCommand \u003d new EditCommand(descriptor, nricOfUser);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand, UserType.GENERAL, nricOfUser);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // rank"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        userInput \u003d RANK_DESC_AMY;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withRank(VALID_RANK_AMY).build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        expectedCommand \u003d new EditCommand(descriptor, nricOfUser);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand, UserType.GENERAL, nricOfUser);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        userInput \u003d NAME_DESC_AMY;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        expectedCommand \u003d new EditCommand(descriptor, nricOfUser);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand, UserType.GENERAL, nricOfUser);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        userInput \u003d PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        expectedCommand \u003d new EditCommand(descriptor, nricOfUser);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand, UserType.GENERAL, nricOfUser);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        userInput \u003d TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        expectedCommand \u003d new EditCommand(descriptor, nricOfUser);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand, UserType.GENERAL, nricOfUser);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // password"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        userInput \u003d PASSWORD_DESC_AMY;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPassword(VALID_PASSWORD_AMY).build();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        expectedCommand \u003d new EditCommand(descriptor, nricOfUser);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand, UserType.GENERAL, nricOfUser);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        String userInput \u003d PHONE_DESC_AMY"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                + PHONE_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(descriptor, nricOfUser);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand, UserType.GENERAL, nricOfUser);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        String userInput \u003d INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(descriptor, nricOfUser);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand, UserType.GENERAL, nricOfUser);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        userInput \u003d SECTION_DESC_BOB + NAME_DESC_BOB + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withSection(VALID_SECTION_BOB)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                .withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        expectedCommand \u003d new EditCommand(descriptor, nricOfUser);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand, UserType.GENERAL, nricOfUser);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_failure() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        String userInput \u003d PHONE_DESC_BOB + INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertParseFailure(parser, userInput, Phone.MESSAGE_CONSTRAINTS, UserType.GENERAL, nricOfUser);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        userInput \u003d SECTION_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertParseFailure(parser, userInput, Phone.MESSAGE_CONSTRAINTS, UserType.GENERAL, nricOfUser);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        nricOfUser \u003d TypicalPersons.getTypicalPersonNric(2);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        String userInput \u003d TAG_EMPTY;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(descriptor, nricOfUser);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand, UserType.GENERAL, nricOfUser);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "exactlyprecise": 261
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NO_AUTHORITY_PARSE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COMPANY_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COMPANY_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_COMPANY_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PASSWORD_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_RANK_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SECTION_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_USERTYPE_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PASSWORD_DESC_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PASSWORD_DESC_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RANK_DESC_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RANK_DESC_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SECTION_DESC_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SECTION_DESC_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mechome"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mechome"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.USERTYPE_DESC_AMY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.USERTYPE_DESC_BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_AMY;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_BOB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_AMY;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PASSWORD_AMY;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PASSWORD_BOB;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RANK_AMY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RANK_BOB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SECTION_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SECTION_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_USERTYPE_AMY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_USERTYPE_BOB;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.UserType;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.person.Password;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import seedu.address.model.person.Rank;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.person.Section;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE_ADMIN);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        //Missing user"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertParseFailure(parser, \"1\" + VALID_PHONE_BOB, MESSAGE_NO_AUTHORITY_PARSE, null, \"General\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NRIC_DESC, Nric.MESSAGE_CONSTRAINTS); // invalid nric"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_COMPANY_DESC, Company.MESSAGE_CONSTRAINTS); // invalid company"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_SECTION_DESC, Section.MESSAGE_CONSTRAINTS); // invalid section"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_RANK_DESC, Rank.MESSAGE_CONSTRAINTS); // invalid rank"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PASSWORD_DESC, Password.MESSAGE_CONSTRAINTS); // invalid password"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_USERTYPE_DESC, UserType.MESSAGE_CONSTRAINTS); // invalid userType"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // invalid name followed by valid phone"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + PHONE_DESC_AMY, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mechome"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NRIC_DESC_BOB + COMPANY_DESC_BOB + SECTION_DESC_BOB"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mechome"
        },
        "content": "                + RANK_DESC_BOB + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                 + NAME_DESC_AMY + TAG_DESC_FRIEND + PASSWORD_DESC_BOB + USERTYPE_DESC_BOB;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mechome"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withNric(VALID_NRIC_BOB)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mechome"
        },
        "content": "                .withCompany(VALID_COMPANY_BOB).withSection(VALID_SECTION_BOB).withRank(VALID_RANK_BOB)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mechome"
        },
        "content": "                .withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).withPassword(VALID_PASSWORD_BOB)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                .withUserType(VALID_USERTYPE_BOB).build();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor, UserType.DEFAULT_ADMIN_USERNAME);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mechome"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mechome"
        },
        "content": "                .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mechome"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor, UserType.DEFAULT_ADMIN_USERNAME);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // nric"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mechome"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mechome"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withNric(VALID_NRIC_AMY).build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mechome"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor, UserType.DEFAULT_ADMIN_USERNAME);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // company"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mechome"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + COMPANY_DESC_AMY;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mechome"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withCompany(VALID_COMPANY_AMY).build();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "mechome"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor, UserType.DEFAULT_ADMIN_USERNAME);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "mechome"
        },
        "content": "        //section"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "mechome"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + SECTION_DESC_AMY;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "mechome"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withSection(VALID_SECTION_AMY).build();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "mechome"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor, UserType.DEFAULT_ADMIN_USERNAME);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // rank"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "mechome"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + RANK_DESC_AMY;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "mechome"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withRank(VALID_RANK_AMY).build();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "mechome"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor, UserType.DEFAULT_ADMIN_USERNAME);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "mechome"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "mechome"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "mechome"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor, UserType.DEFAULT_ADMIN_USERNAME);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "mechome"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "mechome"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "mechome"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor, UserType.DEFAULT_ADMIN_USERNAME);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "mechome"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor, UserType.DEFAULT_ADMIN_USERNAME);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // password"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PASSWORD_DESC_AMY;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPassword(VALID_PASSWORD_AMY).build();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor, \"Admin\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // userType"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + USERTYPE_DESC_AMY;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withUserType(VALID_USERTYPE_AMY).build();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor, \"Admin\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "mechome"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "mechome"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "mechome"
        },
        "content": "                + PHONE_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "mechome"
        },
        "content": "                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "mechome"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor, UserType.DEFAULT_ADMIN_USERNAME);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "mechome"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor, UserType.DEFAULT_ADMIN_USERNAME);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "mechome"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + SECTION_DESC_BOB + NAME_DESC_BOB + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "mechome"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withSection(VALID_SECTION_BOB)"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "mechome"
        },
        "content": "                .withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "mechome"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor, UserType.DEFAULT_ADMIN_USERNAME);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_failure() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertParseFailure(parser, userInput, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + SECTION_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertParseFailure(parser, userInput, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "mechome"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor, UserType.DEFAULT_ADMIN_USERNAME);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dreampursuer95": 9,
      "-": 158,
      "mechome": 72,
      "exactlyprecise": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.person.Rank;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.person.Section;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private static final String INVALID_NRIC \u003d \"GGG\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private static final String INVALID_COMPANY \u003d \" \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private static final String INVALID_SECTION \u003d \" \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private static final String INVALID_RANK \u003d \"Blah\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"65\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private static final String VALID_NRIC \u003d \"S9019283J\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private static final String VALID_COMPANY \u003d \"Orion\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private static final String VALID_SECTION \u003d \"3\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private static final String VALID_RANK \u003d \"CFC\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void parseNric_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseNric((String) null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void parseNric_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseNric(INVALID_NRIC));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void parseNric_validValueWithoutWhitespace_returnsNric() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Nric expectedNric \u003d new Nric(VALID_NRIC);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertEquals(expectedNric, ParserUtil.parseNric(VALID_NRIC));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void parseNric_validValueWithWhitespace_returnsTrimmedNric() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mechome"
        },
        "content": "        String nricWithWhitespace \u003d WHITESPACE + VALID_NRIC + WHITESPACE;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Nric expectedNric \u003d new Nric(VALID_NRIC);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertEquals(expectedNric, ParserUtil.parseNric(nricWithWhitespace));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void parseCompany_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCompany((String) null));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void parseCompany_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseCompany(INVALID_COMPANY));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void parseCompany_validValueWithoutWhitespace_returnsCompany() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Company expectedCompany \u003d new Company(VALID_COMPANY);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertEquals(expectedCompany, ParserUtil.parseCompany(VALID_COMPANY));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void parseCompany_validValueWithWhitespace_returnsTrimmedCompany() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mechome"
        },
        "content": "        String companyWithWhitespace \u003d WHITESPACE + VALID_COMPANY + WHITESPACE;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Company expectedCompany \u003d new Company(VALID_COMPANY);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertEquals(expectedCompany, ParserUtil.parseCompany(companyWithWhitespace));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void parseSection_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseSection((String) null));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void parseSection_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseSection(INVALID_SECTION));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void parseSection_validValueWithoutWhitespace_returnsSection() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Section expectedSection \u003d new Section(VALID_SECTION);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertEquals(expectedSection, ParserUtil.parseSection(VALID_SECTION));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void parseSection_validValueWithWhitespace_returnsTrimmedSection() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mechome"
        },
        "content": "        String sectionWithWhitespace \u003d WHITESPACE + VALID_SECTION + WHITESPACE;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Section expectedSection \u003d new Section(VALID_SECTION);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertEquals(expectedSection, ParserUtil.parseSection(sectionWithWhitespace));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void parseRank_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseRank((String) null));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void parseRank_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseRank(INVALID_RANK));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void parseRank_validValueWithoutWhitespace_returnsRank() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Rank expectedRank \u003d new Rank(VALID_RANK);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertEquals(expectedRank, ParserUtil.parseRank(VALID_RANK));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void parseRank_validValueWithWhitespace_returnsTrimmedRank() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mechome"
        },
        "content": "        String rankWithWhitespace \u003d WHITESPACE + VALID_RANK + WHITESPACE;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Rank expectedRank \u003d new Rank(VALID_RANK);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertEquals(expectedRank, ParserUtil.parseRank(rankWithWhitespace));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mechome"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "mechome"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 1,
      "-": 157,
      "mechome": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/PersonnelDatabaseParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mechome"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mechome"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mechome"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mechome"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mechome"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mechome"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mechome"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.UserType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import seedu.address.logic.commands.BlockDateCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "//import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "//import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "//import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mechome"
        },
        "content": "public class PersonnelDatabaseParserTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private final PersonnelDatabaseParser parser \u003d new PersonnelDatabaseParser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mechome"
        },
        "content": "                UserType.ADMIN, UserType.DEFAULT_ADMIN_USERNAME);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD, UserType.ADMIN,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "                UserType.DEFAULT_ADMIN_USERNAME) instanceof ClearCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mechome"
        },
        "content": "                UserType.ADMIN, UserType.DEFAULT_ADMIN_USERNAME) instanceof ClearCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mechome"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mechome"
        },
        "content": "                UserType.ADMIN, UserType.DEFAULT_ADMIN_USERNAME);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    //    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    //        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    //        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    //        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    //                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    //                UserType.ADMIN, UserType.DEFAULT_ADMIN_USERNAME);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    //        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor, UserType.DEFAULT_ADMIN_USERNAME), command);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD, UserType.ADMIN,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "                UserType.DEFAULT_ADMIN_USERNAME) instanceof ExitCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\", UserType.ADMIN,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mechome"
        },
        "content": "                UserType.DEFAULT_ADMIN_USERNAME) instanceof ExitCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mechome"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mechome"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mechome"
        },
        "content": "                UserType.ADMIN, UserType.DEFAULT_ADMIN_USERNAME);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD, UserType.ADMIN,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mechome"
        },
        "content": "                UserType.DEFAULT_ADMIN_USERNAME) instanceof HelpCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\", UserType.ADMIN,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mechome"
        },
        "content": "                UserType.DEFAULT_ADMIN_USERNAME) instanceof HelpCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD, UserType.ADMIN, UserType.DEFAULT_ADMIN_USERNAME)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                instanceof HistoryCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\", UserType.ADMIN,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mechome"
        },
        "content": "                UserType.DEFAULT_ADMIN_USERNAME) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mechome"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mechome"
        },
        "content": "            parser.parseCommand(\"histories\", UserType.ADMIN, UserType.DEFAULT_ADMIN_USERNAME);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mechome"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mechome"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mechome"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD, UserType.ADMIN,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "                UserType.DEFAULT_ADMIN_USERNAME) instanceof ListCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\","
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "                UserType.ADMIN, UserType.DEFAULT_ADMIN_USERNAME)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                instanceof ListCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mechome"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "                UserType.ADMIN, UserType.DEFAULT_ADMIN_USERNAME);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    public void parseCommand_schedule() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertTrue(parser.parseCommand(ScheduleCommand.COMMAND_WORD, UserType.ADMIN, UserType.DEFAULT_ADMIN_USERNAME)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                instanceof ScheduleCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertTrue(parser.parseCommand(\"schedule\", UserType.ADMIN, UserType.DEFAULT_ADMIN_USERNAME)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                instanceof ScheduleCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    public void parseCommand_blockDate() throws Exception {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        BlockDateCommand command \u003d (BlockDateCommand) parser.parseCommand(BlockDateCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "                        + \" 2 4 5 6 9 10\", UserType.ADMIN, \"S9000000A\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mechome"
        },
        "content": "        BlockDateCommand newCommand \u003d new BlockDateCommand(List.of(2, 4, 5, 6, 9, 10), \"S9000000A\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertEquals(command, newCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD, UserType.ADMIN, UserType.DEFAULT_ADMIN_USERNAME)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                instanceof RedoCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\", UserType.ADMIN, UserType.DEFAULT_ADMIN_USERNAME)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                instanceof RedoCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD, UserType.ADMIN, UserType.DEFAULT_ADMIN_USERNAME)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                instanceof UndoCommand);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\", UserType.ADMIN, UserType.DEFAULT_ADMIN_USERNAME)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                instanceof UndoCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public void parseCommand_view() throws Exception {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertTrue(parser.parseCommand(\"view S9673582K\", UserType.ADMIN, UserType.DEFAULT_ADMIN_USERNAME)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                instanceof ViewCommand);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mechome"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mechome"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mechome"
        },
        "content": "        parser.parseCommand(\"\", UserType.ADMIN, UserType.DEFAULT_ADMIN_USERNAME);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mechome"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "mechome"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mechome"
        },
        "content": "        parser.parseCommand(\"unknownCommand\", UserType.ADMIN, UserType.DEFAULT_ADMIN_USERNAME);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "mechome"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 28,
      "yjpan47": 4,
      "dreampursuer95": 6,
      "mechome": 126,
      "exactlyprecise": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import seedu.address.testutil.PersonnelDatabaseBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertEquals(new PersonnelDatabase(), new PersonnelDatabase(modelManager.getPersonnelDatabase()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(null, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mechome"
        },
        "content": "        userPrefs.setPersonnelDatabaseFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mechome"
        },
        "content": "        userPrefs.setPersonnelDatabaseFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void setPersonnelDatabaseFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mechome"
        },
        "content": "        modelManager.setPersonnelDatabaseFilePath(null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void setPersonnelDatabaseFilePath_validPath_setsPersonnelDatabaseFilePath() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mechome"
        },
        "content": "        modelManager.setPersonnelDatabaseFilePath(path);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertEquals(path, modelManager.getPersonnelDatabaseFilePath());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        modelManager.hasPerson((Person) null);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void hasPerson_personNotInPersonnelDatabase_returnsFalse() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void hasPerson_personInPersonnelDatabase_returnsTrue() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson_personIsSelectedAndFirstPersonInFilteredPersonList_selectionCleared() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(ALICE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.deletePerson(ALICE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(null, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson_personIsSelectedAndSecondPersonInFilteredPersonList_firstPersonSelected() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(BOB);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BOB), modelManager.getFilteredPersonList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(BOB);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.deletePerson(BOB);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(ALICE, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_personIsSelected_selectedPersonUpdated() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(ALICE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Person updatedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setPerson(ALICE, updatedAlice);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(updatedAlice, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson_personNotInFilteredPersonList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(PersonNotFoundException.class);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(ALICE);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson_personInFilteredPersonList_setsSelectedPerson() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.singletonList(ALICE), modelManager.getFilteredPersonList());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(ALICE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(ALICE, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mechome"
        },
        "content": "        PersonnelDatabase personnelDatabase \u003d new PersonnelDatabaseBuilder()"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mechome"
        },
        "content": "                .withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mechome"
        },
        "content": "        PersonnelDatabase differentPersonnelDatabase \u003d new PersonnelDatabase();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mechome"
        },
        "content": "        modelManager \u003d new ModelManager(personnelDatabase, userPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mechome"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(personnelDatabase, userPrefs);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // different personnelDatabase -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentPersonnelDatabase, userPrefs)));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(personnelDatabase, userPrefs)));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "mechome"
        },
        "content": "        differentUserPrefs.setPersonnelDatabaseFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(personnelDatabase, differentUserPrefs)));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 1,
      "-": 165,
      "mechome": 22,
      "exactlyprecise": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/PersonnelDatabaseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonnelDatabase;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mechome"
        },
        "content": "public class PersonnelDatabaseTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private final PersonnelDatabase personnelDatabase \u003d new PersonnelDatabase();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertEquals(Collections.emptyList(), personnelDatabase.getPersonList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mechome"
        },
        "content": "        personnelDatabase.resetData(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void resetData_withValidReadOnlyPersonnelDatabase_replacesData() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mechome"
        },
        "content": "        PersonnelDatabase newData \u003d getTypicalPersonnelDatabase();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mechome"
        },
        "content": "        personnelDatabase.resetData(newData);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertEquals(newData, personnelDatabase);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mechome"
        },
        "content": "        PersonnelDatabaseStub newData \u003d new PersonnelDatabaseStub(newPersons);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mechome"
        },
        "content": "        personnelDatabase.resetData(newData);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        personnelDatabase.hasPerson((Person) null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void hasPerson_personNotInPersonnelDatabase_returnsFalse() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertFalse(personnelDatabase.hasPerson(ALICE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void hasPerson_personInPersonnelDatabase_returnsTrue() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mechome"
        },
        "content": "        personnelDatabase.addPerson(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertTrue(personnelDatabase.hasPerson(ALICE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInPersonnelDatabase_returnsTrue() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mechome"
        },
        "content": "        personnelDatabase.addPerson(ALICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertTrue(personnelDatabase.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mechome"
        },
        "content": "        personnelDatabase.getPersonList().remove(0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener_withInvalidationListener_listenerAdded() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mechome"
        },
        "content": "        personnelDatabase.addListener(listener);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mechome"
        },
        "content": "        personnelDatabase.addPerson(ALICE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, counter.get());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener_withInvalidationListener_listenerRemoved() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mechome"
        },
        "content": "        personnelDatabase.addListener(listener);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mechome"
        },
        "content": "        personnelDatabase.removeListener(listener);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mechome"
        },
        "content": "        personnelDatabase.addPerson(ALICE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, counter.get());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * A stub ReadOnlyPersonnelDatabase whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private static class PersonnelDatabaseStub implements ReadOnlyPersonnelDatabase {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        // To be edited if necessary"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        private final DutyCalendar dutyCalendar \u003d new DutyCalendar();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        private final List\u003cRequest\u003e requests \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mechome"
        },
        "content": "        PersonnelDatabaseStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        public List\u003cRequest\u003e getRequestList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            return requests;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mechome"
        },
        "content": "        public DutyCalendar getDutyCalendar() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mechome"
        },
        "content": "            return dutyCalendar;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dreampursuer95": 12,
      "-": 109,
      "mechome": 34,
      "exactlyprecise": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void setPersonnelDatabaseFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPrefs.setPersonnelDatabaseFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "mechome": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedPersonnelDatabaseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mechome"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mechome"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mechome"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mechome"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mechome"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.testutil.PersonnelDatabaseBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mechome"
        },
        "content": "public class VersionedPersonnelDatabaseTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private final ReadOnlyPersonnelDatabase personnelDatabaseWithAmy \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mechome"
        },
        "content": "            new PersonnelDatabaseBuilder().withPerson(AMY).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private final ReadOnlyPersonnelDatabase personnelDatabaseWithBob \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mechome"
        },
        "content": "            new PersonnelDatabaseBuilder().withPerson(BOB).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private final ReadOnlyPersonnelDatabase personnelDatabaseWithCarl \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mechome"
        },
        "content": "            new PersonnelDatabaseBuilder().withPerson(CARL).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private final ReadOnlyPersonnelDatabase emptypersonnelDatabase \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mechome"
        },
        "content": "            new PersonnelDatabaseBuilder().build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void commit_singlePersonnelDatabase_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mechome"
        },
        "content": "        VersionedPersonnelDatabase versionedPersonnelDatabase \u003d preparePersonnelDatabaseList(emptypersonnelDatabase);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mechome"
        },
        "content": "        versionedPersonnelDatabase.commit();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertPersonnelDatabaseListStatus(versionedPersonnelDatabase,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mechome"
        },
        "content": "                Collections.singletonList(emptypersonnelDatabase),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mechome"
        },
        "content": "                emptypersonnelDatabase,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mechome"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void commit_multiplePersonnelDatabasePointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mechome"
        },
        "content": "        VersionedPersonnelDatabase versionedPersonnelDatabase \u003d preparePersonnelDatabaseList("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mechome"
        },
        "content": "                emptypersonnelDatabase, personnelDatabaseWithAmy, personnelDatabaseWithBob);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mechome"
        },
        "content": "        versionedPersonnelDatabase.commit();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertPersonnelDatabaseListStatus(versionedPersonnelDatabase,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mechome"
        },
        "content": "                Arrays.asList(emptypersonnelDatabase, personnelDatabaseWithAmy, personnelDatabaseWithBob),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mechome"
        },
        "content": "                personnelDatabaseWithBob,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mechome"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mechome"
        },
        "content": "        commit_multiplePersonnelDatabasePointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mechome"
        },
        "content": "        VersionedPersonnelDatabase versionedPersonnelDatabase \u003d preparePersonnelDatabaseList("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mechome"
        },
        "content": "                emptypersonnelDatabase, personnelDatabaseWithAmy, personnelDatabaseWithBob);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mechome"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedPersonnelDatabase, 2);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mechome"
        },
        "content": "        versionedPersonnelDatabase.commit();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertPersonnelDatabaseListStatus(versionedPersonnelDatabase,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mechome"
        },
        "content": "                Collections.singletonList(emptypersonnelDatabase),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mechome"
        },
        "content": "                emptypersonnelDatabase,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mechome"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void canUndo_multiplePersonnelDatabasePointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mechome"
        },
        "content": "        VersionedPersonnelDatabase versionedPersonnelDatabase \u003d preparePersonnelDatabaseList("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mechome"
        },
        "content": "                emptypersonnelDatabase, personnelDatabaseWithAmy, personnelDatabaseWithBob);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertTrue(versionedPersonnelDatabase.canUndo());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void canUndo_multiplePersonnelDatabasePointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mechome"
        },
        "content": "        VersionedPersonnelDatabase versionedPersonnelDatabase \u003d preparePersonnelDatabaseList("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mechome"
        },
        "content": "                emptypersonnelDatabase, personnelDatabaseWithAmy, personnelDatabaseWithBob);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mechome"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedPersonnelDatabase, 1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertTrue(versionedPersonnelDatabase.canUndo());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void canUndo_singlePersonnelDatabase_returnsFalse() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mechome"
        },
        "content": "        VersionedPersonnelDatabase versionedPersonnelDatabase \u003d preparePersonnelDatabaseList(emptypersonnelDatabase);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertFalse(versionedPersonnelDatabase.canUndo());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void canUndo_multiplePersonnelDatabasePointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mechome"
        },
        "content": "        VersionedPersonnelDatabase versionedPersonnelDatabase \u003d preparePersonnelDatabaseList("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mechome"
        },
        "content": "                emptypersonnelDatabase, personnelDatabaseWithAmy, personnelDatabaseWithBob);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mechome"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedPersonnelDatabase, 2);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertFalse(versionedPersonnelDatabase.canUndo());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void canRedo_multiplePersonnelDatabasePointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mechome"
        },
        "content": "        VersionedPersonnelDatabase versionedPersonnelDatabase \u003d preparePersonnelDatabaseList("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mechome"
        },
        "content": "                emptypersonnelDatabase, personnelDatabaseWithAmy, personnelDatabaseWithBob);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mechome"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedPersonnelDatabase, 1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertTrue(versionedPersonnelDatabase.canRedo());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void canRedo_multiplePersonnelDatabasePointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mechome"
        },
        "content": "        VersionedPersonnelDatabase versionedPersonnelDatabase \u003d preparePersonnelDatabaseList("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mechome"
        },
        "content": "                emptypersonnelDatabase, personnelDatabaseWithAmy, personnelDatabaseWithBob);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mechome"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedPersonnelDatabase, 2);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertTrue(versionedPersonnelDatabase.canRedo());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void canRedo_singlePersonnelDatabase_returnsFalse() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mechome"
        },
        "content": "        VersionedPersonnelDatabase versionedPersonnelDatabase \u003d preparePersonnelDatabaseList(emptypersonnelDatabase);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertFalse(versionedPersonnelDatabase.canRedo());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void canRedo_multiplePersonnelDatabasePointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mechome"
        },
        "content": "        VersionedPersonnelDatabase versionedPersonnelDatabase \u003d preparePersonnelDatabaseList("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mechome"
        },
        "content": "                emptypersonnelDatabase, personnelDatabaseWithAmy, personnelDatabaseWithBob);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertFalse(versionedPersonnelDatabase.canRedo());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void undo_multiplePersonnelDatabasePointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mechome"
        },
        "content": "        VersionedPersonnelDatabase versionedPersonnelDatabase \u003d preparePersonnelDatabaseList("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mechome"
        },
        "content": "                emptypersonnelDatabase, personnelDatabaseWithAmy, personnelDatabaseWithBob);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mechome"
        },
        "content": "        versionedPersonnelDatabase.undo();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertPersonnelDatabaseListStatus(versionedPersonnelDatabase,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mechome"
        },
        "content": "                Collections.singletonList(emptypersonnelDatabase),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mechome"
        },
        "content": "                personnelDatabaseWithAmy,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mechome"
        },
        "content": "                Collections.singletonList(personnelDatabaseWithBob));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void undo_multiplePersonnelDatabasePointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mechome"
        },
        "content": "        VersionedPersonnelDatabase versionedPersonnelDatabase \u003d preparePersonnelDatabaseList("
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mechome"
        },
        "content": "                emptypersonnelDatabase, personnelDatabaseWithAmy, personnelDatabaseWithBob);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mechome"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedPersonnelDatabase, 1);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mechome"
        },
        "content": "        versionedPersonnelDatabase.undo();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertPersonnelDatabaseListStatus(versionedPersonnelDatabase,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mechome"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mechome"
        },
        "content": "                emptypersonnelDatabase,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mechome"
        },
        "content": "                Arrays.asList(personnelDatabaseWithAmy, personnelDatabaseWithBob));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void undo_singlePersonnelDatabase_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mechome"
        },
        "content": "        VersionedPersonnelDatabase versionedPersonnelDatabase \u003d preparePersonnelDatabaseList(emptypersonnelDatabase);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertThrows(VersionedPersonnelDatabase.NoUndoableStateException.class, versionedPersonnelDatabase::undo);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void undo_multiplePersonnelDatabasePointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mechome"
        },
        "content": "        VersionedPersonnelDatabase versionedPersonnelDatabase \u003d preparePersonnelDatabaseList("
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mechome"
        },
        "content": "                emptypersonnelDatabase, personnelDatabaseWithAmy, personnelDatabaseWithBob);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mechome"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedPersonnelDatabase, 2);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertThrows(VersionedPersonnelDatabase.NoUndoableStateException.class, versionedPersonnelDatabase::undo);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void redo_multiplePersonnelDatabasePointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mechome"
        },
        "content": "        VersionedPersonnelDatabase versionedPersonnelDatabase \u003d preparePersonnelDatabaseList("
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mechome"
        },
        "content": "                emptypersonnelDatabase, personnelDatabaseWithAmy, personnelDatabaseWithBob);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mechome"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedPersonnelDatabase, 1);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mechome"
        },
        "content": "        versionedPersonnelDatabase.redo();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertPersonnelDatabaseListStatus(versionedPersonnelDatabase,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mechome"
        },
        "content": "                Arrays.asList(emptypersonnelDatabase, personnelDatabaseWithAmy),"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mechome"
        },
        "content": "                personnelDatabaseWithBob,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "mechome"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void redo_multiplePersonnelDatabasePointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "mechome"
        },
        "content": "        VersionedPersonnelDatabase versionedPersonnelDatabase \u003d preparePersonnelDatabaseList("
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "mechome"
        },
        "content": "                emptypersonnelDatabase, personnelDatabaseWithAmy, personnelDatabaseWithBob);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "mechome"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedPersonnelDatabase, 2);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "mechome"
        },
        "content": "        versionedPersonnelDatabase.redo();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertPersonnelDatabaseListStatus(versionedPersonnelDatabase,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "mechome"
        },
        "content": "                Collections.singletonList(emptypersonnelDatabase),"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "mechome"
        },
        "content": "                personnelDatabaseWithAmy,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "mechome"
        },
        "content": "                Collections.singletonList(personnelDatabaseWithBob));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void redo_singlePersonnelDatabase_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "mechome"
        },
        "content": "        VersionedPersonnelDatabase versionedPersonnelDatabase \u003d preparePersonnelDatabaseList(emptypersonnelDatabase);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertThrows(VersionedPersonnelDatabase.NoRedoableStateException.class, versionedPersonnelDatabase::redo);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void redo_multiplePersonnelDatabasePointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "mechome"
        },
        "content": "        VersionedPersonnelDatabase versionedPersonnelDatabase \u003d preparePersonnelDatabaseList("
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "mechome"
        },
        "content": "                emptypersonnelDatabase, personnelDatabaseWithAmy, personnelDatabaseWithBob);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertThrows(VersionedPersonnelDatabase.NoRedoableStateException.class, versionedPersonnelDatabase::redo);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "mechome"
        },
        "content": "        VersionedPersonnelDatabase versionedPersonnelDatabase \u003d"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "mechome"
        },
        "content": "                preparePersonnelDatabaseList(personnelDatabaseWithAmy, personnelDatabaseWithBob);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "mechome"
        },
        "content": "        VersionedPersonnelDatabase copy \u003d"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "mechome"
        },
        "content": "                preparePersonnelDatabaseList(personnelDatabaseWithAmy, personnelDatabaseWithBob);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertTrue(versionedPersonnelDatabase.equals(copy));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertTrue(versionedPersonnelDatabase.equals(versionedPersonnelDatabase));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertFalse(versionedPersonnelDatabase.equals(null));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertFalse(versionedPersonnelDatabase.equals(1));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "mechome"
        },
        "content": "        VersionedPersonnelDatabase differentPersonnelDatabaseList \u003d"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "mechome"
        },
        "content": "                preparePersonnelDatabaseList(personnelDatabaseWithBob, personnelDatabaseWithCarl);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertFalse(versionedPersonnelDatabase.equals(differentPersonnelDatabaseList));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "mechome"
        },
        "content": "        VersionedPersonnelDatabase differentCurrentStatePointer \u003d preparePersonnelDatabaseList("
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "mechome"
        },
        "content": "                personnelDatabaseWithAmy, personnelDatabaseWithBob);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "mechome"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedPersonnelDatabase, 1);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertFalse(versionedPersonnelDatabase.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Asserts that {@code versionedPersonnelDatabase} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * states before {@code versionedPersonnelDatabase#currentStatePointer}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * and states after {@code versionedPersonnelDatabase#currentStatePointer}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private void assertPersonnelDatabaseListStatus(VersionedPersonnelDatabase versionedPersonnelDatabase,"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "mechome"
        },
        "content": "                                             List\u003cReadOnlyPersonnelDatabase\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "mechome"
        },
        "content": "                                             ReadOnlyPersonnelDatabase expectedCurrentState,"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "mechome"
        },
        "content": "                                             List\u003cReadOnlyPersonnelDatabase\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertEquals(new PersonnelDatabase(versionedPersonnelDatabase), expectedCurrentState);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "mechome"
        },
        "content": "        while (versionedPersonnelDatabase.canUndo()) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "mechome"
        },
        "content": "            versionedPersonnelDatabase.undo();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "mechome"
        },
        "content": "        for (ReadOnlyPersonnelDatabase expectedPersonnelDatabase : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "mechome"
        },
        "content": "            assertEquals(expectedPersonnelDatabase, new PersonnelDatabase(versionedPersonnelDatabase));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "mechome"
        },
        "content": "            versionedPersonnelDatabase.redo();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "mechome"
        },
        "content": "        for (ReadOnlyPersonnelDatabase expectedPersonnelDatabase : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "mechome"
        },
        "content": "            versionedPersonnelDatabase.redo();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "mechome"
        },
        "content": "            assertEquals(expectedPersonnelDatabase, new PersonnelDatabase(versionedPersonnelDatabase));"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertFalse(versionedPersonnelDatabase.canRedo());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "mechome"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedPersonnelDatabase.undo());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Creates and returns a {@code VersionedPersonnelDatabase} with the"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * {@code personnelDatabaseStates} added into it, and the"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * {@code VersionedPersonnelDatabase#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private VersionedPersonnelDatabase preparePersonnelDatabaseList("
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "mechome"
        },
        "content": "            ReadOnlyPersonnelDatabase... personnelDatabaseStates) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertFalse(personnelDatabaseStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "mechome"
        },
        "content": "        VersionedPersonnelDatabase versionedPersonnelDatabase \u003d"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "mechome"
        },
        "content": "                new VersionedPersonnelDatabase(personnelDatabaseStates[0]);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "mechome"
        },
        "content": "        for (int i \u003d 1; i \u003c personnelDatabaseStates.length; i++) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "mechome"
        },
        "content": "            versionedPersonnelDatabase.resetData(personnelDatabaseStates[i]);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "mechome"
        },
        "content": "            versionedPersonnelDatabase.commit();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return versionedPersonnelDatabase;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Shifts the {@code versionedPersonnelDatabase#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedPersonnelDatabase versionedPersonnelDatabase, int count) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "mechome"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "mechome"
        },
        "content": "            versionedPersonnelDatabase.undo();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "mechome"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mechome": 311
    }
  },
  {
    "path": "src/test/java/seedu/address/model/duty/DutyTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.duty;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mechome"
        },
        "content": "//import java.time.LocalDate;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mechome"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mechome"
        },
        "content": "//import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjpan47"
        },
        "content": "//import seedu.address.model.duty.Duty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class DutyTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(\"Duty on \" + LocalDate.now() + \" (AM)\", duty.toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjpan47": 1,
      "dreampursuer95": 2,
      "-": 10,
      "mechome": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/CompanyTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mechome"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mechome"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mechome"
        },
        "content": "public class CompanyTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Company(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void constructor_invalidCompany_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mechome"
        },
        "content": "        String invalidCompany \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Company(invalidCompany));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void isValidCompany() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // null company"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Company.isValidCompany(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // invalid company"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertFalse(Company.isValidCompany(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertFalse(Company.isValidCompany(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // valid company"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertTrue(Company.isValidCompany(\"1\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertTrue(Company.isValidCompany(\"23\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertTrue(Company.isValidCompany(\"B\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertTrue(Company.isValidCompany(\"Alpha\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mechome"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mechome": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // Keywords match company, rank and phone, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mechome"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Ãlpha\", \"PTE\", \"123456\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"123456\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mechome"
        },
        "content": "                .withCompany(\"Alpha\").withRank(\"PTE\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 1,
      "-": 71,
      "mechome": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NricTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mechome"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mechome"
        },
        "content": "public class NricTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Nric(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void constructor_invalidNric_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mechome"
        },
        "content": "        String invalidNric \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Nric(invalidNric));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void isValidNric() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // null nric"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Nric.isValidNric(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // invalid nric"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertFalse(Nric.isValidNric(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertFalse(Nric.isValidNric(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertFalse(Nric.isValidNric(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertFalse(Nric.isValidNric(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertFalse(Nric.isValidNric(\"P0000000I\")); // begins with disallowed letter"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertFalse(Nric.isValidNric(\"p0000000i\")); // begins or ends with a lower case letter"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertFalse(Nric.isValidNric(\"S000000P\")); // incorrect number of digits"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // valid nric"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertTrue(Nric.isValidNric(\"S0123456A\")); // starts with \u0027S\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertTrue(Nric.isValidNric(\"G0123456B\")); // starts with \u0027G\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertTrue(Nric.isValidNric(\"T0123456C\")); // starts with \u0027T\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertTrue(Nric.isValidNric(\"F0123456D\")); // starts with \u0027F\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mechome"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 4,
      "mechome": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PasswordTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "public class PasswordTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void constructorNullThrowsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Password(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void constructorInvalidPasswordIhrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        String invalidPassword \u003d \" \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidPassword));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public void isValidPassword() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // null password"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Password.isValidPassword(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertFalse(Password.isValidPassword(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertFalse(Password.isValidPassword(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertFalse(Password.isValidPassword(\"  \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertTrue(Password.isValidPassword(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertTrue(Password.isValidPassword(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertTrue(Password.isValidPassword(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertTrue(Password.isValidPassword(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertTrue(Password.isValidPassword(\"David Ro!!!ger Jackson $*Ray Jr 2nd\")); // long passwords"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertTrue(Password.isValidPassword(\"!(*# )(#\")); // special characters only"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "exactlyprecise": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RANK_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SECTION_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.UserType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().remove(0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // different phone and name -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withNric(VALID_NRIC_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // different name -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // different Nric -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withNric(VALID_NRIC_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // same nric, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mechome"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withRank(VALID_RANK_BOB)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                .withName(VALID_NAME_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        // different company -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withCompany(VALID_COMPANY_BOB).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        // different section -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withSection(VALID_SECTION_BOB).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        // different rank -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withRank(VALID_RANK_BOB).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        // different NRIC -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withNric(VALID_NRIC_BOB).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // different password -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPassword(VALID_NRIC_BOB).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // different UserType -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withUserType(UserType.ADMIN).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        // different UserType -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Person editedAmy \u003d new PersonBuilder(AMY).withUserType(UserType.GENERAL).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertFalse(AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 4,
      "dreampursuer95": 10,
      "-": 82,
      "mechome": 2,
      "exactlyprecise": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PhoneTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"931215344325974237592384592345345\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"+93121534\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 2,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/RankTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mechome"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mechome"
        },
        "content": "public class RankTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Rank(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void constructor_invalidRank_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mechome"
        },
        "content": "        String invalidRank \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Rank(invalidRank));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void isValidRank() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // null rank"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Rank.isValidRank(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // invalid rank"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertFalse(Rank.isValidRank(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertFalse(Rank.isValidRank(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertFalse(Rank.isValidRank(\"P\")); // one character only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertFalse(Rank.isValidRank(\"3QQQ\")); // more than 3 characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertFalse(Rank.isValidRank(\"pte\")); // contains lower-case"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // valid rank"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertTrue(Rank.isValidRank(\"PTE\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertTrue(Rank.isValidRank(\"REC\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertTrue(Rank.isValidRank(\"3SG\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertTrue(Rank.isValidRank(\"2LT\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mechome"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 4,
      "mechome": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/SectionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mechome"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mechome"
        },
        "content": "public class SectionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Section(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void constructor_invalidSection_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mechome"
        },
        "content": "        String invalidSection \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Section(invalidSection));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void isValidSection() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // null section"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Section.isValidSection(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // invalid section"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertFalse(Section.isValidSection(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertFalse(Section.isValidSection(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // valid section"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertTrue(Section.isValidSection(\"1\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertTrue(Section.isValidSection(\"23\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertTrue(Section.isValidSection(\"B\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertTrue(Section.isValidSection(\"Alpha\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mechome"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 4,
      "mechome": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.contains(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public void contains_personWithSameNameButDifferentNricInList_returnsFalse() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withNric(VALID_NRIC_BOB).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        assertFalse(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(null, ALICE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(PersonNotFoundException.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(null);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(PersonNotFoundException.class);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons((UniquePersonList) null);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons((List\u003cPerson\u003e) null);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(listWithDuplicatePersons);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 2,
      "dreampursuer95": 2,
      "-": 179,
      "mechome": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.UserType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private static final String INVALID_NRIC \u003d \"notrealnric\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private static final String INVALID_COMPANY \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private static final String INVALID_SECTION \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private static final String INVALID_RANK \u003d \"PPPP\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"65\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private static final String INVALID_PASSWORD \u003d \"  \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private static final String VALID_NRIC \u003d BENSON.getNric().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private static final String VALID_COMPANY \u003d BENSON.getCompany().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private static final String VALID_SECTION \u003d BENSON.getSection().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private static final String VALID_RANK \u003d BENSON.getRank().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private static final String VALID_PASSWORD \u003d BENSON.getPassword().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void toModelType_invalidNric_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mechome"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NRIC, VALID_COMPANY, VALID_SECTION, VALID_RANK, VALID_NAME,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                        VALID_PHONE, VALID_TAGS, VALID_PASSWORD, UserType.ADMIN);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        String expectedMessage \u003d Nric.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void toModelType_invalidCompany_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mechome"
        },
        "content": "                new JsonAdaptedPerson(VALID_NRIC, INVALID_COMPANY, VALID_SECTION, VALID_RANK, VALID_NAME,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                        VALID_PHONE, VALID_TAGS, VALID_PASSWORD, UserType.GENERAL);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        String expectedMessage \u003d Company.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mechome"
        },
        "content": "                new JsonAdaptedPerson(VALID_NRIC, VALID_COMPANY, VALID_SECTION, VALID_RANK, INVALID_NAME,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                        VALID_PHONE, VALID_TAGS, VALID_PASSWORD, UserType.GENERAL);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mechome"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mechome"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mechome"
        },
        "content": "                new JsonAdaptedPerson(VALID_NRIC, VALID_COMPANY, VALID_SECTION, VALID_RANK, null,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                        VALID_PHONE, VALID_TAGS, VALID_PASSWORD, UserType.ADMIN);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mechome"
        },
        "content": "                new JsonAdaptedPerson(VALID_NRIC, VALID_COMPANY, VALID_SECTION, VALID_RANK, VALID_NAME,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                        INVALID_PHONE, VALID_TAGS, VALID_PASSWORD, UserType.ADMIN);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mechome"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mechome"
        },
        "content": "                new JsonAdaptedPerson(VALID_NRIC, VALID_COMPANY, VALID_SECTION, VALID_RANK, VALID_NAME,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                        null, VALID_TAGS, VALID_PASSWORD, UserType.ADMIN);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mechome"
        },
        "content": "                new JsonAdaptedPerson(VALID_NRIC, VALID_COMPANY, VALID_SECTION, VALID_RANK, VALID_NAME,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                        VALID_PHONE, invalidTags, VALID_PASSWORD, UserType.ADMIN);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 2,
      "dreampursuer95": 7,
      "-": 69,
      "mechome": 24,
      "exactlyprecise": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonPersonnelDatabaseStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mechome"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonnelDatabase;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mechome"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mechome"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mechome"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mechome"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mechome"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mechome"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mechome"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.PersonnelDatabase;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.ReadOnlyPersonnelDatabase;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mechome"
        },
        "content": "public class JsonPersonnelDatabaseStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "            \"JsonPersonnelDatabaseStorageTest\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void readPersonnelDatabase_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mechome"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mechome"
        },
        "content": "        readPersonnelDatabase(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private java.util.Optional\u003cReadOnlyPersonnelDatabase\u003e readPersonnelDatabase(String filePath) throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        return new JsonPersonnelDatabaseStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "                .readPersonnelDatabase(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mechome"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mechome"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertFalse(readPersonnelDatabase(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mechome"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mechome"
        },
        "content": "        readPersonnelDatabase(\"notJsonFormatPersonnelDatabase.json\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void readPersonnelDatabase_invalidPersonPersonnelDatabase_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mechome"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mechome"
        },
        "content": "        readPersonnelDatabase(\"invalidPersonPersonnelDatabase.json\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    public void"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        readPersonnelDatabase_invalidAndValidPersonPersonnelDatabase_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mechome"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mechome"
        },
        "content": "        readPersonnelDatabase(\"invalidAndValidPersonPersonnelDatabase.json\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void readAndSavePersonnelDatabase_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempPersonnelDatabase.json\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mechome"
        },
        "content": "        PersonnelDatabase original \u003d getTypicalPersonnelDatabase();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mechome"
        },
        "content": "        JsonPersonnelDatabaseStorage jsonPersonnelDatabaseStorage \u003d new JsonPersonnelDatabaseStorage(filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mechome"
        },
        "content": "        jsonPersonnelDatabaseStorage.savePersonnelDatabase(original, filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mechome"
        },
        "content": "        ReadOnlyPersonnelDatabase readBack \u003d jsonPersonnelDatabaseStorage.readPersonnelDatabase(filePath).get();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertEquals(original, new PersonnelDatabase(readBack));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mechome"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mechome"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mechome"
        },
        "content": "        jsonPersonnelDatabaseStorage.savePersonnelDatabase(original, filePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mechome"
        },
        "content": "        readBack \u003d jsonPersonnelDatabaseStorage.readPersonnelDatabase(filePath).get();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertEquals(original, new PersonnelDatabase(readBack));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mechome"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mechome"
        },
        "content": "        jsonPersonnelDatabaseStorage.savePersonnelDatabase(original); // file path not specified"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mechome"
        },
        "content": "        readBack \u003d jsonPersonnelDatabaseStorage.readPersonnelDatabase().get(); // file path not specified"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertEquals(original, new PersonnelDatabase(readBack));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void savePersonnelDatabase_nullPersonnelDatabase_throwsNullPointerException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mechome"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mechome"
        },
        "content": "        savePersonnelDatabase(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Saves {@code personnelDatabase} at the specified {@code filePath}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    private void savePersonnelDatabase(ReadOnlyPersonnelDatabase personnelDatabase, String filePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mechome"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mechome"
        },
        "content": "            new JsonPersonnelDatabaseStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "                    .savePersonnelDatabase(personnelDatabase, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mechome"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mechome"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void savePersonnelDatabase_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mechome"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mechome"
        },
        "content": "        savePersonnelDatabase(new PersonnelDatabase(), null);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mechome"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 9,
      "mechome": 118
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializablePersonnelDatabaseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mechome"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "//import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mechome"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mechome"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mechome"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mechome"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "//import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "//import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "//import seedu.address.model.PersonnelDatabase;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "//import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mechome"
        },
        "content": "public class JsonSerializablePersonnelDatabaseTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "            \"JsonSerializablePersonnelDatabaseTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsPersonnelDatabase.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonPersonnelDatabase.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonPersonnelDatabase.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mechome"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mechome"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mechome"
        },
        "content": "//    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mechome"
        },
        "content": "//        JsonSerializablePersonnelDatabase dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mechome"
        },
        "content": "//                JsonSerializablePersonnelDatabase.class).get();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mechome"
        },
        "content": "//        PersonnelDatabase personnelDatabaseFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mechome"
        },
        "content": "//        PersonnelDatabase typicalPersonsPersonnelDatabase \u003d TypicalPersons.getTypicalPersonnelDatabase();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mechome"
        },
        "content": "//        assertEquals(personnelDatabaseFromFile, typicalPersonsPersonnelDatabase);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mechome"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mechome"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mechome"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mechome"
        },
        "content": "//    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mechome"
        },
        "content": "//        JsonSerializablePersonnelDatabase dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mechome"
        },
        "content": "//                JsonSerializablePersonnelDatabase.class).get();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mechome"
        },
        "content": "//        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mechome"
        },
        "content": "//        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mechome"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mechome"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mechome"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mechome"
        },
        "content": "//    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mechome"
        },
        "content": "//        JsonSerializablePersonnelDatabase dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mechome"
        },
        "content": "//                JsonSerializablePersonnelDatabase.class).get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mechome"
        },
        "content": "//        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mechome"
        },
        "content": "//        thrown.expectMessage(JsonSerializablePersonnelDatabase.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mechome"
        },
        "content": "//        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mechome"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mechome"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 8,
      "mechome": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mechome"
        },
        "content": "        userPrefs.setPersonnelDatabaseFilePath(Paths.get(\"personneldatabase.json\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(new UserPrefs(), null);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 134,
      "mechome": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonnelDatabase;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.PersonnelDatabase;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.ReadOnlyPersonnelDatabase;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mechome"
        },
        "content": "        JsonPersonnelDatabaseStorage personnelDatabaseStorage \u003d new JsonPersonnelDatabaseStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mechome"
        },
        "content": "        storageManager \u003d new StorageManager(personnelDatabaseStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void personnelDatabaseReadSave() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mechome"
        },
        "content": "         * {@link JsonPersonnelDatabaseStorage} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mechome"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonPersonnelDatabaseStorageTest} class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mechome"
        },
        "content": "        PersonnelDatabase original \u003d getTypicalPersonnelDatabase();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mechome"
        },
        "content": "        storageManager.savePersonnelDatabase(original);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mechome"
        },
        "content": "        ReadOnlyPersonnelDatabase retrieved \u003d storageManager.readPersonnelDatabase().get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertEquals(original, new PersonnelDatabase(retrieved));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void getPersonnelDatabaseFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertNotNull(storageManager.getPersonnelDatabaseFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 56,
      "mechome": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.UserType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.person.Password;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import seedu.address.model.person.Rank;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import seedu.address.model.person.Section;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mechome"
        },
        "content": "        descriptor.setNric(person.getNric());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mechome"
        },
        "content": "        descriptor.setCompany(person.getCompany());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mechome"
        },
        "content": "        descriptor.setSection(person.getSection());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mechome"
        },
        "content": "        descriptor.setRank(person.getRank());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        descriptor.setPassword(person.getPassword());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        descriptor.setUserType(person.getUserType());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Sets the {@code Nric} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public EditPersonDescriptorBuilder withNric(String nric) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mechome"
        },
        "content": "        descriptor.setNric(new Nric(nric));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Sets the {@code Company} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public EditPersonDescriptorBuilder withCompany(String company) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mechome"
        },
        "content": "        descriptor.setCompany(new Company(company));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Sets the {@code Section} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public EditPersonDescriptorBuilder withSection(String section) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mechome"
        },
        "content": "        descriptor.setSection(new Section(section));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mechome"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Sets the {@code Rank} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mechome"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public EditPersonDescriptorBuilder withRank(String rank) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mechome"
        },
        "content": "        descriptor.setRank(new Rank(rank));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * Sets the {@code Password} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public EditPersonDescriptorBuilder withPassword(String password) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        descriptor.setPassword(new Password(password));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public EditPersonDescriptorBuilder withUserType(String userType) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        if (\"A\".equals(userType)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            descriptor.setUserType(UserType.ADMIN);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        } else if (\"G\".equals(userType)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            descriptor.setUserType(UserType.GENERAL);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dreampursuer95": 4,
      "-": 79,
      "mechome": 34,
      "exactlyprecise": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "//import org.junit.experimental.theories.internal.ParameterizedAssertionError;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.UserType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.person.Password;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.person.Rank;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.person.Section;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public static final String DEFAULT_NRIC \u003d \"S9673582K\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public static final String DEFAULT_COMPANY \u003d \"Leopardo\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public static final String DEFAULT_SECTION \u003d \"1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public static final String DEFAULT_RANK \u003d \"CFC\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"81234567\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static final UserType DEFAULT_USERTYPE \u003d UserType.GENERAL;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static final String DEFAULT_PASSWORD \u003d \"S9673582K\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private Nric nric;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private Company company;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private Section section;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private Rank rank;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private Password password;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    private UserType userType;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mechome"
        },
        "content": "        nric \u003d new Nric(DEFAULT_NRIC);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mechome"
        },
        "content": "        company \u003d new Company(DEFAULT_COMPANY);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mechome"
        },
        "content": "        section \u003d new Section(DEFAULT_SECTION);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mechome"
        },
        "content": "        rank \u003d new Rank(DEFAULT_RANK);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        password \u003d new Password(DEFAULT_PASSWORD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        userType \u003d DEFAULT_USERTYPE;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mechome"
        },
        "content": "        nric \u003d personToCopy.getNric();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mechome"
        },
        "content": "        company \u003d personToCopy.getCompany();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mechome"
        },
        "content": "        section \u003d personToCopy.getSection();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mechome"
        },
        "content": "        rank \u003d personToCopy.getRank();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        password \u003d personToCopy.getPassword();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        userType \u003d personToCopy.getUserType();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Sets the {@code Nric} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public PersonBuilder withNric(String nric) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mechome"
        },
        "content": "        this.nric \u003d new Nric(nric);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Sets the {@code Company} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public PersonBuilder withCompany(String company) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mechome"
        },
        "content": "        this.company \u003d new Company(company);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Sets the {@code Section} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public PersonBuilder withSection(String section) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mechome"
        },
        "content": "        this.section \u003d new Section(section);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     * Sets the {@code Rank} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public PersonBuilder withRank(String rank) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mechome"
        },
        "content": "        this.rank \u003d new Rank(rank);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mechome"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * Sets the {@code Password} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public PersonBuilder withPassword(String password) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        this.password \u003d new Password(password);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     * Sets the {@code UserType} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public PersonBuilder withUserType(UserType userType) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        this.userType \u003d userType;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mechome"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return new Person(nric, company, section, rank, name, phone, tags, password, userType);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public Person buildReduced() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return new Person(nric, company, section, rank, name, phone, tags);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 6,
      "dreampursuer95": 5,
      "-": 71,
      "mechome": 33,
      "exactlyprecise": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RANK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SECTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERTYPE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.UserType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mechome"
        },
        "content": "        sb.append(PREFIX_NRIC + person.getNric().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mechome"
        },
        "content": "        sb.append(PREFIX_COMPANY + person.getCompany().value + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mechome"
        },
        "content": "        sb.append(PREFIX_SECTION + person.getSection().value + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mechome"
        },
        "content": "        sb.append(PREFIX_RANK + person.getRank().value + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mechome"
        },
        "content": "        descriptor.getNric().ifPresent(nric -\u003e sb.append(PREFIX_NRIC).append(nric.value).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mechome"
        },
        "content": "        descriptor.getCompany().ifPresent(company -\u003e sb.append(PREFIX_COMPANY).append(company.value).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mechome"
        },
        "content": "        descriptor.getSection().ifPresent(section -\u003e sb.append(PREFIX_SECTION).append(section.value).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mechome"
        },
        "content": "        descriptor.getRank().ifPresent(rank -\u003e sb.append(PREFIX_RANK).append(rank.value).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        descriptor.getPassword().ifPresent(password -\u003e sb.append(PREFIX_PASSWORD).append(password.value).append(\" \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        descriptor.getUserType().ifPresent(userType -\u003e {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            sb.append(PREFIX_USERTYPE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            if (userType \u003d\u003d UserType.ADMIN) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                sb.append(\"A \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            } else if (userType \u003d\u003d UserType.GENERAL) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                sb.append(\"G \");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        });"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 56,
      "mechome": 8,
      "exactlyprecise": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonnelDatabaseBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.PersonnelDatabase;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mechome"
        },
        "content": " * A utility class to help with building PersonnelDatabase objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mechome"
        },
        "content": " *     {@code PersonnelDatabase ab \u003d new PersonnelDatabaseBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mechome"
        },
        "content": "public class PersonnelDatabaseBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private PersonnelDatabase personnelDatabase;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public PersonnelDatabaseBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mechome"
        },
        "content": "        personnelDatabase \u003d new PersonnelDatabase();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public PersonnelDatabaseBuilder(PersonnelDatabase personnelDatabase) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mechome"
        },
        "content": "        this.personnelDatabase \u003d personnelDatabase;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Adds a new {@code Person} to the {@code PersonnelDatabase} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public PersonnelDatabaseBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mechome"
        },
        "content": "        personnelDatabase.addPerson(person);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public PersonnelDatabase build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return personnelDatabase;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "mechome": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PASSWORD_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PASSWORD_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RANK_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RANK_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SECTION_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SECTION_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.UserType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.PersonnelDatabase;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static final String GENERAL_DAN_USERNAME \u003d \"S9687543K\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static final String GENERAL_DAN_PASSWORD \u003d \"Pass\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static final String ADMIN_TAN_USERNAME \u003d \"S9876543P\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static final String ADMIN_TAN_PASSWORD \u003d \"password\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withNric(\"S9673566K\").withCompany(\"Leopard\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mechome"
        },
        "content": "            .withSection(\"1\").withRank(\"CFC\").withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            .withPhone(\"94351253\").withTags(\"outstanding\").buildReduced();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withNric(\"S9478974B\").withCompany(\"Hawk\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mechome"
        },
        "content": "            .withSection(\"2\").withRank(\"PTE\").withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            .withPhone(\"98765432\").withTags(\"injured\").buildReduced();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withNric(\"S9324325I\").withCompany(\"Cougar\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mechome"
        },
        "content": "            .withSection(\"3\").withRank(\"REC\").withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            .withPhone(\"95352563\").buildReduced();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withNric(\"T0034567L\").withCompany(\"Falcon\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mechome"
        },
        "content": "            .withSection(\"4\").withRank(\"LCP\").withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            .withPhone(\"87652533\").withTags(\"friends\").buildReduced();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withNric(\"S9876567I\").withCompany(\"Ninja\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mechome"
        },
        "content": "            .withSection(\"2\").withRank(\"REC\").withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            .withPhone(\"9482224\").buildReduced();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withNric(\"S9357825I\").withCompany(\"2nd\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mechome"
        },
        "content": "            .withSection(\"1\").withRank(\"PTE\").withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            .withPhone(\"9482427\").buildReduced();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withNric(\"T0065782J\").withCompany(\"1st\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mechome"
        },
        "content": "            .withSection(\"2\").withRank(\"CFC\").withName(\"George Best\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            .withPhone(\"+942442\").buildReduced();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static final Person GENERAL_DAN \u003d new PersonBuilder().withNric(GENERAL_DAN_USERNAME).withCompany(\"3rd\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            .withSection(\"5\").withRank(\"LTC\").withName(\"Dan\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            .withPassword(GENERAL_DAN_PASSWORD).withUserType(UserType.GENERAL).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static final Person ADMIN_TAN \u003d new PersonBuilder().withNric(ADMIN_TAN_USERNAME).withCompany(\"7th\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            .withSection(\"4\").withRank(\"CFC\").withName(\"Tan\").withPhone(\"12345678\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            .withPassword(ADMIN_TAN_PASSWORD).withUserType(UserType.ADMIN).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withNric(\"S1234567H\").withCompany(\"Jaguar\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mechome"
        },
        "content": "            .withSection(\"3\").withRank(\"PTE\").withName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            .withPhone(\"8482424\").buildReduced();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withNric(\"S1234567I\").withCompany(\"Mohawk\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mechome"
        },
        "content": "            .withSection(\"3\").withRank(\"LCP\").withName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            .withPhone(\"8482131\").buildReduced();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withNric(VALID_NRIC_AMY).withCompany(VALID_COMPANY_AMY)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mechome"
        },
        "content": "            .withSection(VALID_SECTION_AMY).withRank(VALID_RANK_AMY).withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            .withPhone(VALID_PHONE_AMY).withTags(VALID_TAG_FRIEND).withPassword(VALID_PASSWORD_AMY)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            .withUserType(UserType.ADMIN).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withNric(VALID_NRIC_BOB).withCompany(VALID_COMPANY_BOB)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mechome"
        },
        "content": "            .withSection(VALID_SECTION_BOB).withRank(VALID_RANK_BOB).withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            .withPassword(VALID_PASSWORD_BOB).withUserType(UserType.GENERAL).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    // Since added in add command, password \u003d nric, usertype \u003d General"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static final Person AMY_TO_ADD \u003d new PersonBuilder().withNric(VALID_NRIC_AMY).withCompany(VALID_COMPANY_AMY)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            .withSection(VALID_SECTION_AMY).withRank(VALID_RANK_AMY).withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            .withPhone(VALID_PHONE_AMY).withTags(VALID_TAG_FRIEND).withPassword(VALID_PASSWORD_AMY)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            .withUserType(UserType.ADMIN).buildReduced();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static final Person BOB_TO_ADD \u003d new PersonBuilder().withNric(VALID_NRIC_BOB).withCompany(VALID_COMPANY_BOB)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            .withSection(VALID_SECTION_BOB).withRank(VALID_RANK_BOB).withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            .withPassword(VALID_PASSWORD_BOB).withUserType(UserType.GENERAL).buildReduced();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Returns an {@code PersonnelDatabase} with all the typical persons."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static PersonnelDatabase getTypicalPersonnelDatabase() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mechome"
        },
        "content": "        PersonnelDatabase ab \u003d new PersonnelDatabase();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                GENERAL_DAN, ADMIN_TAN));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "    public static String getTypicalPersonNric(int i) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Person targetedPerson \u003d getTypicalPersons().get(i);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        return targetedPerson.getNric().value;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 8,
      "-": 42,
      "mechome": 25,
      "exactlyprecise": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalRequests.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mechome"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mechome"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mechome"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mechome"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mechome"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mechome"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mechome"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mechome"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mechome"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mechome"
        },
        "content": "public class TypicalRequests {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"ddMMyy\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final Request REQUEST1 \u003d new Request(\"S9673566K\", LocalDate.parse(\"090519\", FORMATTER),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mechome"
        },
        "content": "            LocalDate.parse(\"100519\", FORMATTER));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final Request REQUEST2 \u003d new Request(\"S9478974B\", LocalDate.parse(\"110519\", FORMATTER),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mechome"
        },
        "content": "            LocalDate.parse(\"120519\", FORMATTER), \"S9673566K\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final Request REQUEST3 \u003d new Request(\"S9324325I\", LocalDate.parse(\"130519\", FORMATTER),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mechome"
        },
        "content": "            LocalDate.parse(\"140519\", FORMATTER));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static final Request REQUEST4 \u003d new Request(\"T0034567L\", LocalDate.parse(\"220519\", FORMATTER),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mechome"
        },
        "content": "            LocalDate.parse(\"270519\", FORMATTER), \"S9478974B\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private TypicalRequests() {} // prevents instantiation"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public static List\u003cRequest\u003e getTypicalRequest() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(REQUEST1, REQUEST2, REQUEST3, REQUEST4));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mechome"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mechome"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 1,
      "mechome": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.testutil.TypicalRequests;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mechome"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel(TypicalRequests.getTypicalRequest()));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mechome"
        },
        "content": "        Region region \u003d browserPanel.getRoot();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mechome"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(getChildNode(region,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mechome"
        },
        "content": "                BrowserPanelHandle.BROWSER_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mechome"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertEquals(browserPanel.requestsToStringForDisplay(), browserPanelHandle.getText());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 1,
      "-": 23,
      "mechome": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import seedu.address.commons.core.UserType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ArrayList\u003cString\u003e history \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(new CommandBox.CommandExecutor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            public CommandResult execute(String commandText, UserType user, String userName)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                    throws CommandException, ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                history.add(commandText);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                if (commandText.equals(COMMAND_THAT_SUCCEEDS)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    return new CommandResult(\"Command successful\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(\"Command failed\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mechome"
        },
        "content": "        }, UserType.ADMIN, UserType.DEFAULT_ADMIN_USERNAME, history);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dreampursuer95": 4,
      "-": 158,
      "mechome": 1,
      "exactlyprecise": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/GuiUnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.UiPartRule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mechome"
        },
        "content": " * A GUI unit test class for PersonnelDatabase."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final UiPartRule uiPartRule \u003d new UiPartRule();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "mechome": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/MainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.UserType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.storage.JsonPersonnelDatabaseStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        JsonPersonnelDatabaseStorage jsonPersonnelDatabaseStorage \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "                new JsonPersonnelDatabaseStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mechome"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager(jsonPersonnelDatabaseStorage, jsonUserPrefsStorage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new LogicManager(new ModelManager(), storageManager),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                    UserType.ADMIN, \"ADMIN\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_menuBarExitButton_allWindowsClosed() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuHelpButton();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the \u0027X\u0027 button on"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * Opens the {@code HelpWindow} by clicking on the menu bar\u0027s help button."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuHelpButton() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Help\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"F1\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 2,
      "-": 94,
      "mechome": 2,
      "exactlyprecise": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/PersonListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import seedu.address.model.person.Rank;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import seedu.address.model.person.Section;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final ObservableList\u003cPerson\u003e TYPICAL_PERSONS \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.observableList(getTypicalPersons());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final SimpleObjectProperty\u003cPerson\u003e selectedPerson \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanelHandle personListPanelHandle;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_PERSONS.size(); i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(TYPICAL_PERSONS.get(i));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            Person expectedPerson \u003d TYPICAL_PERSONS.get(i);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(expectedPerson, actualCard);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void selection_modelSelectedPersonChanged_selectionChanges() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Person secondPerson \u003d TYPICAL_PERSONS.get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e selectedPerson.set(secondPerson));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle expectedPerson \u003d personListPanelHandle.getPersonCardHandle(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle selectedPerson \u003d personListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardEquals(expectedPerson, selectedPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifies that creating and deleting large number of persons in {@code PersonListPanel} requires lesser than"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void performanceTest() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cPerson\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "            guiRobot.interact(backingList::clear"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "            );"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        }, \"Creation and deletion of \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "                + \"person cards exceeded time limit\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a list of persons containing {@code personCount} persons that is used to populate the"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code PersonListPanel}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private ObservableList\u003cPerson\u003e createBackingList(int personCount) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cPerson\u003e backingList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c personCount; i++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mechome"
        },
        "content": "            Nric nric \u003d new Nric(\"S1234567A\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mechome"
        },
        "content": "            Company company \u003d new Company(\"Alpha\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mechome"
        },
        "content": "            Section section \u003d new Section(\"1\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mechome"
        },
        "content": "            Rank rank \u003d new Rank(\"CPL\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            Name name \u003d new Name(i + \"a\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            Phone phone \u003d new Phone(\"000\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mechome"
        },
        "content": "            Person person \u003d new Person(nric, company, section, rank, name, phone, Collections.emptySet());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            backingList.add(person);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return backingList;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes {@code personListPanelHandle} with a {@code PersonListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code PersonListPanel}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initUi(ObservableList\u003cPerson\u003e backingList) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonListPanel personListPanel \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                new PersonListPanel(backingList, selectedPerson, selectedPerson::set);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personListPanel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(personListPanel.getRoot(),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                PersonListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 6,
      "dreampursuer95": 2,
      "-": 97,
      "mechome": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.PersonnelDatabase;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mechome"
        },
        "content": "    private final PersonnelDatabase personnelDatabase \u003d new PersonnelDatabase();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mechome"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION, personnelDatabase);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mechome"
        },
        "content": "        // after personnel database is updated"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mechome"
        },
        "content": "        guiRobot.interact(() -\u003e personnelDatabase.addPerson(ALICE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 70,
      "mechome": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertEquals(expectedCard.getNric(), actualCard.getNric());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertEquals(expectedCard.getCompany(), actualCard.getCompany());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertEquals(expectedCard.getSection(), actualCard.getSection());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertEquals(expectedCard.getRank(), actualCard.getRank());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertEquals(expectedPerson.getNric().value, actualCard.getNric());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertEquals(expectedPerson.getCompany().value, actualCard.getCompany());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertEquals(expectedPerson.getSection().value, actualCard.getSection());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertEquals(expectedPerson.getRank().value, actualCard.getRank());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.length; i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        int numberOfPeople \u003d personListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 70,
      "mechome": 8
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COMPANY_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COMPANY_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_RANK_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RANK_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RANK_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SECTION_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SECTION_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RANK_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SECTION_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY_TO_ADD;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB_TO_ADD;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.person.Rank;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mechome"
        },
        "content": "public class AddCommandSystemTest extends PersonnelDatabaseSystemTest {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Person toAdd \u003d AMY_TO_ADD;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mechome"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NRIC_DESC_AMY + \" \" + COMPANY_DESC_AMY + \" \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mechome"
        },
        "content": "                + SECTION_DESC_AMY + \" \" + RANK_DESC_AMY + \" \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mechome"
        },
        "content": "                + \"   \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mechome"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except nric -\u003e added */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY_TO_ADD).withNric(VALID_NRIC_BOB).buildReduced();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mechome"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NRIC_DESC_BOB + COMPANY_DESC_AMY + SECTION_DESC_AMY + RANK_DESC_AMY"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mechome"
        },
        "content": "                + NAME_DESC_AMY + PHONE_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        toAdd \u003d BOB_TO_ADD;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mechome"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + NAME_DESC_BOB + COMPANY_DESC_BOB"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mechome"
        },
        "content": "                + NRIC_DESC_BOB + SECTION_DESC_BOB + RANK_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person, missing tags -\u003e added */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before adding -\u003e added */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person -\u003e rejected */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        /* Case: add a duplicate person except with different company -\u003e rejected */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withCompany(VALID_COMPANY_BOB).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        /* Case: add a duplicate person except with different rank -\u003e rejected */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withRank(VALID_RANK_BOB).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        /* Case: add a duplicate person except with different name -\u003e rejected */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mechome"
        },
        "content": "        /* Case: add a duplicate person except with different section -\u003e rejected */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mechome"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withSection(VALID_SECTION_BOB).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mechome"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NRIC_DESC_AMY + COMPANY_DESC_AMY + SECTION_DESC_AMY + RANK_DESC_AMY"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mechome"
        },
        "content": "                + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mechome"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NRIC_DESC_AMY + COMPANY_DESC_AMY + SECTION_DESC_AMY + RANK_DESC_AMY"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mechome"
        },
        "content": "                + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mechome"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NRIC_DESC_AMY + COMPANY_DESC_AMY + SECTION_DESC_AMY + RANK_DESC_AMY"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mechome"
        },
        "content": "                + INVALID_NAME_DESC + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mechome"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NRIC_DESC_AMY + COMPANY_DESC_AMY + SECTION_DESC_AMY + RANK_DESC_AMY"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mechome"
        },
        "content": "                + NAME_DESC_AMY + INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        //To be added: invalid section, rank, NRIC"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mechome"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NRIC_DESC_AMY + COMPANY_DESC_AMY + SECTION_DESC_AMY + RANK_DESC_AMY"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mechome"
        },
        "content": "                + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        /* Case: invalid NRIC -\u003e rejected */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NRIC_DESC + COMPANY_DESC_AMY + SECTION_DESC_AMY + RANK_DESC_AMY"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                + NAME_DESC_AMY + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertCommandFailure(command, Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        /* Case: invalid Rank -\u003e rejected */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NRIC_DESC_AMY + COMPANY_DESC_AMY + SECTION_DESC_AMY + INVALID_RANK_DESC"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                + NAME_DESC_AMY + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertCommandFailure(command, Rank.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * {@code PersonnelDatabaseSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * @see PersonnelDatabaseSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Person toAdd) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Person)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Person toAdd) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(toAdd);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * {@code PersonnelDatabaseSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * @see PersonnelDatabaseSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 6,
      "dreampursuer95": 4,
      "-": 192,
      "mechome": 27,
      "exactlyprecise": 30
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mechome"
        },
        "content": "public class ClearCommandSystemTest extends PersonnelDatabaseSystemTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo clearing address book -\u003e original address book restored */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo clearing address book -\u003e cleared */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in person list and clears address book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before clearing -\u003e entire address book cleared */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * {@code PersonnelDatabaseSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * @see PersonnelDatabaseSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * {@code PersonnelDatabaseSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * @see PersonnelDatabaseSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 96,
      "mechome": 5
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mechome"
        },
        "content": "public class DeleteCommandSystemTest extends PersonnelDatabaseSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_PERSON.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Person deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the last person in the list -\u003e deleted */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo deleting the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        removePerson(modelBeforeDeletingLast, lastPersonIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the middle person in the list -\u003e deleted */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middlePersonIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(middlePersonIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mechome"
        },
        "content": "        /* Case: filtered person list, delete index within bounds of personnel database and person list -\u003e deleted */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mechome"
        },
        "content": "        /* Case: filtered person list, delete index within bounds of personnel database but out of bounds of person list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mechome"
        },
        "content": "        int invalidIndex \u003d getModel().getPersonnelDatabase().getPersonList().size();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing delete operation while a person card is selected ------------------------ */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the selected person -\u003e person list panel selects the person before the deleted person */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(selectedIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        deletedPerson \u003d removePerson(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mechome"
        },
        "content": "                getModel().getPersonnelDatabase().getPersonList().size() + 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Removes the {@code Person} at the specified {@code index} in {@code model}\u0027s personnel database."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the removed person"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person removePerson(Model model, Index index) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Person targetPerson \u003d getPerson(model, index);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(targetPerson);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return targetPerson;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the person at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Person deletedPerson \u003d removePerson(expectedModel, toDelete);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * {@code PersonnelDatabaseSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * @see PersonnelDatabaseSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * @see PersonnelDatabaseSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * {@code PersonnelDatabaseSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * @see PersonnelDatabaseSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 182,
      "mechome": 11
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Valatheking"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COMPANY_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COMPANY_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mechome"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_COMPANY_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PASSWORD_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_RANK_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SECTION_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_USERTYPE_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PASSWORD_DESC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PASSWORD_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RANK_DESC_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RANK_DESC_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SECTION_DESC_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SECTION_DESC_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.USERTYPE_DESC_AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.USERTYPE_DESC_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.commons.core.UserType;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "import seedu.address.model.person.Password;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import seedu.address.model.person.Rank;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import seedu.address.model.person.Section;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mechome"
        },
        "content": "public class EditCommandSystemTest extends PersonnelDatabaseSystemTest {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mechome"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mechome"
        },
        "content": "                + \" \" + COMPANY_DESC_BOB + \" \" + SECTION_DESC_BOB + \" \" + RANK_DESC_BOB + \" \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                + PHONE_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \" + PASSWORD_DESC_BOB + \" \" + USERTYPE_DESC_BOB"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                + \" \" + USERTYPE_DESC_BOB;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        PersonBuilder personBuilder1 \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        Person editedPerson \u003d personBuilder1.build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo editing the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo editing the last person in the list -\u003e last person edited again */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mechome"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NRIC_DESC_BOB + COMPANY_DESC_BOB"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mechome"
        },
        "content": "                + SECTION_DESC_BOB + RANK_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + PASSWORD_DESC_BOB + USERTYPE_DESC_BOB;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mechome"
        },
        "content": "        int invalidIndex \u003d getModel().getPersonnelDatabase().getPersonList().size();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(index);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mechome"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NRIC_DESC_AMY + COMPANY_DESC_AMY"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                + SECTION_DESC_AMY + RANK_DESC_AMY + NAME_DESC_AMY + PHONE_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                + PASSWORD_DESC_AMY + USERTYPE_DESC_AMY;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // browser\u0027s url is updated to reflect the new person\u0027s name"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE_ADMIN));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE_ADMIN));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE_ADMIN));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mechome"
        },
        "content": "        /* Case: invalid nric -\u003e rejected */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "                        + INVALID_NRIC_DESC,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mechome"
        },
        "content": "                Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mechome"
        },
        "content": "        /* Case: invalid company -\u003e rejected */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "                        + INVALID_COMPANY_DESC,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mechome"
        },
        "content": "                Company.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mechome"
        },
        "content": "        /* Case: invalid section -\u003e rejected */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "                        + INVALID_SECTION_DESC,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mechome"
        },
        "content": "                Section.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mechome"
        },
        "content": "        /* Case: invalid rank -\u003e rejected */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "                        + INVALID_RANK_DESC,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mechome"
        },
        "content": "                Rank.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mechome"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "                        + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "                        + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        /* Case: invalid password -\u003e rejected */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                        + INVALID_PASSWORD_DESC,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                Password.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        /* Case: invalid UserType -\u003e rejected */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                        + INVALID_USERTYPE_DESC,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                UserType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "                        + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(PersonUtil.getAddCommand(BOB));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + getModel().getPersonnelDatabase().getPersonList().size()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                + PASSWORD_DESC_BOB;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertTrue(getModel().getPersonnelDatabase().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NRIC_DESC_BOB + COMPANY_DESC_BOB"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "                + SECTION_DESC_BOB + RANK_DESC_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                + PHONE_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + PASSWORD_DESC_BOB + USERTYPE_DESC_BOB;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NRIC_DESC_BOB + COMPANY_DESC_BOB"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                + SECTION_DESC_BOB + RANK_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                + PASSWORD_DESC_BOB + USERTYPE_DESC_BOB;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NRIC_DESC_BOB + COMPANY_DESC_BOB"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "                + SECTION_DESC_BOB + RANK_DESC_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                + PHONE_DESC_AMY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + PASSWORD_DESC_BOB + USERTYPE_DESC_BOB;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedPerson, null);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * updated to values specified {@code editedPerson}.\u003cbr\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * {@code PersonnelDatabaseSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * @see PersonnelDatabaseSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * @see PersonnelDatabaseSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * {@code PersonnelDatabaseSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * @see PersonnelDatabaseSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 32,
      "dreampursuer95": 2,
      "-": 223,
      "mechome": 27,
      "exactlyprecise": 33
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mechome"
        },
        "content": "public class FindCommandSystemTest extends PersonnelDatabaseSystemTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mechome"
        },
        "content": "        /* Case: find multiple persons in personnel database, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: repeat previous find command where person list is displaying the persons we are finding"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mechome"
        },
        "content": "        /* Case: find multiple persons in personnel database, 2 keywords -\u003e 2 persons found */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mechome"
        },
        "content": "        /* Case: find multiple persons in personnel database, 2 keywords in reversed order -\u003e 2 persons found */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mechome"
        },
        "content": "        /* Case: find multiple persons in personnel database, 2 keywords with 1 repeat -\u003e 2 persons found */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mechome"
        },
        "content": "        /* Case: find multiple persons in personnel database, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mechome"
        },
        "content": "        /* Case: find same persons in personnel database after deleting 1 of them -\u003e 1 person found */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertFalse(getModel().getPersonnelDatabase().getPersonList().contains(BENSON));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mechome"
        },
        "content": "        /* Case: find person in personnel database, keyword is same as name but of different case -\u003e 1 person found */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mechome"
        },
        "content": "        /* Case: find person in personnel database, keyword is substring of name -\u003e 0 persons found */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mechome"
        },
        "content": "        /* Case: find person in personnel database, name is substring of keyword -\u003e 0 persons found */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mechome"
        },
        "content": "        /* Case: find person not in personnel database -\u003e 0 persons found */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mechome"
        },
        "content": "        /* Case: find phone number of person in personnel database -\u003e 0 persons found */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mechome"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mechome"
        },
        "content": "        /* Case: find tags of person in personnel database -\u003e 0 persons found */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find while a person is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mechome"
        },
        "content": "        /* Case: find person in empty personnel database -\u003e 0 persons found */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"FiNd Meier\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * {@code PersonnelDatabaseSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * @see PersonnelDatabaseSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * {@code PersonnelDatabaseSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * @see PersonnelDatabaseSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 166,
      "mechome": 20
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "//import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "//import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mechome"
        },
        "content": "public class HelpCommandSystemTest extends PersonnelDatabaseSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().click();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().click();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        //assertHelpWindowNotOpen();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        //getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        //assertHelpWindowOpen();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    //    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    //        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 8,
      "-": 97,
      "mechome": 1
    }
  },
  {
    "path": "src/test/java/systemtests/PersonnelDatabaseSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "import seedu.address.model.PersonnelDatabase;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mechome"
        },
        "content": " * A system test class for PersonnelDatabase, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mechome"
        },
        "content": "public abstract class PersonnelDatabaseSystemTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mechome"
        },
        "content": "    protected PersonnelDatabase getInitialData() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mechome"
        },
        "content": "        return TypicalPersons.getTypicalPersonnelDatabase();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Displays all persons in the personnel database."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showAllPersons() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        assertEquals(getModel().getPersonnelDatabase().getPersonList().size(),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "                getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        assertTrue(getModel().getFilteredPersonList().size()"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "                \u003c getModel().getPersonnelDatabase().getPersonList().size());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the person at {@code index} of the displayed list."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Deletes all persons in the personnel database."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mechome"
        },
        "content": "        assertEquals(0, getModel().getPersonnelDatabase().getPersonList().size());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the person list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "        assertEquals(new PersonnelDatabase(expectedModel.getPersonnelDatabase()),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Valatheking"
        },
        "content": "                testApp.readStoragePersonnelDatabase());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Asserts that the previously selected card is now deselected."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Asserts that only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().navigateToCard(getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * Asserts that the selected card in the person list panel remain unchanged."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Valatheking": 7,
      "-": 248,
      "mechome": 10
    }
  },
  {
    "path": "src/test/java/systemtests/PlanDutyCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "public class PlanDutyCommandSystemTest extends PersonnelDatabaseSystemTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    public void planDuty() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "        //tests to be added after algorithms are in place"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dreampursuer95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dreampursuer95": 18
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.PersonnelDatabase;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mechome"
        },
        "content": "public class SampleDataTest extends PersonnelDatabaseSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mechome"
        },
        "content": "    protected PersonnelDatabase getInitialData() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public void personnelDatabase_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Person[] expectedList \u003d SampleDataUtil.getSamplePersons();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "mechome": 4
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mechome"
        },
        "content": "public class SelectCommandSystemTest extends PersonnelDatabaseSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the first card in the person list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the last card in the person list -\u003e selected */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Index personCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, personCount);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the middle card in the person list -\u003e selected */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mechome"
        },
        "content": "        /* Case: filtered person list, select index within bounds of personnel database but out of bounds of person list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mechome"
        },
        "content": "        int invalidIndex \u003d getModel().getPersonnelDatabase().getPersonList().size();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mechome"
        },
        "content": "        /* Case: filtered person list, select index within bounds of personnel database and person list -\u003e selected */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mechome"
        },
        "content": "        /* Case: select from empty personnel database -\u003e rejected */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * {@code PersonnelDatabaseSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * @see PersonnelDatabaseSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * @see PersonnelDatabaseSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * {@code PersonnelDatabaseSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mechome"
        },
        "content": "     * @see PersonnelDatabaseSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 144,
      "mechome": 10
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mechome"
        },
        "content": "import seedu.address.model.ReadOnlyPersonnelDatabase;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mechome"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyPersonnelDatabase\u003e personnelDatabase, Path saveFileLocation) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                testApp \u003d new TestApp(personnelDatabase, saveFileLocation);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "                return testApp;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "exactlyprecise"
        },
        "content": "            });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 71,
      "mechome": 2,
      "exactlyprecise": 4
    }
  }
]
