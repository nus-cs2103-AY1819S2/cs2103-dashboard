[
  {
    "path": ".github/ISSUE_TEMPLATE/bug_report.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "name: Bug report"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "about: Create a report to help us improve"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "title: \u0027\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "labels: \u0027\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "assignees: \u0027\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "**Describe the bug**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "A clear and concise description of what the bug is."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "**To Reproduce**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "Steps to reproduce the behavior:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "1. Go to \u0027...\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "2. Click on \u0027....\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "3. Scroll down to \u0027....\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "4. See error"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "**Expected behavior**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "A clear and concise description of what you expected to happen."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "**Screenshots**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "If applicable, add screenshots to help explain your problem."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "**Desktop (please complete the following information):**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": " - OS: [e.g. iOS]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": " - Browser [e.g. chrome, safari]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": " - Version [e.g. 22]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "**Smartphone (please complete the following information):**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": " - Device: [e.g. iPhone6]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": " - OS: [e.g. iOS8.1]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": " - Browser [e.g. stock browser, safari]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": " - Version [e.g. 22]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "**Additional context**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "Add any other context about the problem here."
      }
    ],
    "authorContributionMap": {
      "yunjun199321": 38
    }
  },
  {
    "path": ".github/ISSUE_TEMPLATE/custom.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "name: Custom issue template"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "about: Describe this issue template\u0027s purpose here."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "title: \u0027\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "labels: \u0027\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "assignees: \u0027\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yunjun199321": 10
    }
  },
  {
    "path": ".github/ISSUE_TEMPLATE/feature_request.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "name: Feature request"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "about: Suggest an idea for this project"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "title: \u0027\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "labels: \u0027\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "assignees: \u0027\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "**Is your feature request related to a problem? Please describe.**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "A clear and concise description of what the problem is. Ex. I\u0027m always frustrated when [...]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "**Describe the solution you\u0027d like**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "A clear and concise description of what you want to happen."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "**Describe alternatives you\u0027ve considered**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "A clear and concise description of any alternative solutions or features you\u0027ve considered."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "**Additional context**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "Add any other context or screenshots about the feature request here."
      }
    ],
    "authorContributionMap": {
      "yunjun199321": 20
    }
  },
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003d ePiggy"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S2-W17-4/main[image:https://travis-ci.org/se-edu/addressbook-level4.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/damithc/addressbook-level4[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S2-W17-4/main?branch\u003dmaster[image:https://coveralls.io/repos/github/se-edu/addressbook-level4/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "Regular expense trackers too complicated to use? Introducing to you, ePiggy! A simplified expense tracker application catered to make saving money a breeze for young children and students!"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "Want to find out more? Go to the \u003c\u003cUserGuide#, User Guide\u003e\u003e to find out more!"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "ePiggy is an open source project that welcomes contributions from the community. If you would like to contribute, go to the \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e to get started!"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "* The original source of the code (https://github.com/se-edu/addressbook-level4[AddressBook-Level4]) was created by the https://github.com/se-edu/[SE-EDU] initiative."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 4,
      "tehwenyi": 4,
      "-": 26
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "      \"githubId\": \"kev-inc\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "      \"displayName\": \"KEV...ONG\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "      \"authorNames\": [\"kev-inc\", \"Kevin\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "      \"githubId\": \"pdnm\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "      \"displayName\": \"PHA...INH\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pdnm"
        },
        "content": "      \"authorNames\": [\"pdnm\", \"Phan Duc Nhat Minh\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "      \"githubId\": \"rahulb99\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "      \"displayName\": \"RAH...AID\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "      \"authorNames\": [\"rahulb99\", \"Rahul Baid\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "      \"githubId\": \"tehwenyi\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "      \"displayName\": \"TEH... YI\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "      \"authorNames\": [\"tehwenyi\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    },"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "      \"githubId\": \"yunjun199321\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "      \"displayName\": \"WU ...JUN\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "      \"authorNames\": [\"yunjun199321\"]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 29,
      "pdnm": 1
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    archiveName \u003d \u0027ePiggy.jar\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    baseName \u003d \u0027ePiggy\u0027"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level4\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level4\u0027,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "tehwenyi": 2,
      "-": 236
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "ePiggy is developed by https://github.com/CS2103-AY1819S2-W17-4[A+ for 2103T] team."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "We are a team of Year 2 Computer Science undergraduates based in http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003d\u003d\u003d Phan Duc Nhat Minh"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "image::pdnm.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "{empty}[https://github.com/pdnm[github]]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Role: Team Leader, Developer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Responsibilities: basic features"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "\u003d\u003d\u003d Teh Wen Yi"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "image::tehwenyi.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "{empty}[https://github.com/tehwenyi[github]] [\u003c\u003ctehwenyi#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Responsibilities: `budget` feature, documentations"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "\u003d\u003d\u003d Rahul Baid"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "image::rahulb99.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "{empty}[https://github.com/rahulb99[github]] [\u003c\u003crahul#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Responsibilities: `sort` feature, `find` feature, data"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "\u003d\u003d\u003d Wu Yunjun"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "image::yunjun199321.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "{empty}[https://github.com/yunjun199321[github]] [\u003c\u003cWuYunjun#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Role: Developer, Java Guru"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Responsibilities: `report` feature, `autocomplete` feature"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "\u003d\u003d\u003d Kevin"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "image::kev-inc.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "{empty}[https://github.com/kev-inc[github]] [\u003c\u003ckevin#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Responsibilities: Storage, `goal` and `savings` features"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "yunjun199321": 4,
      "kev-inc": 5,
      "tehwenyi": 16,
      "-": 31,
      "rahulb99": 4
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2103-AY1819S2-W17-4/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "* *Email us* : You can also reach us at \u0027kevin.chan@u.nus.edu\u0027, \u0027minh@u.nus.edu\u0027, \u0027rahul.baid@u.nus.edu\u0027, \u0027wenyiteh@u.nus.edu\u0027 or \u0027e0191521@u.nus.edu\u0027"
      }
    ],
    "authorContributionMap": {
      "tehwenyi": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "\u003d ePiggy - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ":toc-placement: macro"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S2-W17-4/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "image::developerguide.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "By: `Team A+ for 2103T`      Since: `Feb 2019`      Last Updated: `April 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Welcome to *_ePiggy_*! *ePiggy* is a desktop application designed to inculcate good spending habits in students"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "through allowing them to track their finances. It includes everything from tracking expenses, managing budgets"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "to setting goals. +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "This developer guide is a self-contained resource designed to align potential developers to a common vision. It guides"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "developers of all levels, allowing them to learn more about the behind the scenes workings and how to make use of them effectively."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "If you want to learn how you can make *_ePiggy_* even better, start here! +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "*Callouts* +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Callouts are boxes with icons to point out some information. These are the 3 callouts used throughout this developer guide:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "This represents a *note*. A note indicates important, additional information. Be sure to read these notes as they might be applicable to you!"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "This represents a *tip*. A tip denotes something that is often handy, and good for you to know. Tips are often less crucial, and you can choose to skip them."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "This represents a *warning*. A warning denotes something of crucial importance, and you should be extremely cautious when reading the statement."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "*In this Developer Guide:*"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ".  `Logic` uses the `EPiggyParser` class to parse the user command."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "* stores the ePiggy data."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `ePiggy`, which `Person` can reference. This would allow `ePiggy` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "* can save the ePiggy data in json format and read it back."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "// tag:addbudget[]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003d\u003d\u003d Add budget feature"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "This command allows users to add a new budget to monitor their expenses within a user-input period of time. +"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ".This command requires users to specify the `amount`, `start date` and `time period (in days)` of the budget in the command. +"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "* `addBudget $/500 p/31 d/01/03/2019` +"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "The above command adds a budget with `$500` which starts on `1st March 2019` and lasts for `31` days. +"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "The budget will compute the end date and provide a status based on the local date."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "The status will include whether the budget is an old, current or future budget, as well as the `remaining amount` until the budget is exceeded and `remaining days` till the end of the budget."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "This is so that users are aware about how much they have spent. +"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Adding of overlapping budgets are not allowed in ePiggy."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "A `budget` is considered overlapping if *any* of the dates *in between (inclusive)* one `budget`’s start *and* end dates is the *same* as the dates *in between (inclusive)* another `budget`’s start *and* end dates."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Given below is a sequence diagram of how the `addBudget` command works: +"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "image::addBudgetSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Figure: Add Budget Command Sequence Diagram +"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "The command is first parsed into `AddBudgetCommandParser`, which separates the arguments into their respective fields. A new `Budget` is created and parsed into `AddBudgetCommand`. +"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "As long as the `Budget` object created does not overlap with any existing `Budget` objects, the `Budget` will be added with `Model#addBudget()` and saved into the ePiggy storage. +"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "*Example usage scenario:* +"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "1. User launches application and enters `addBudget $/500 p/31 d/01/03/2019`. +"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "2. `AddBudgetCommandParser` takes in the arguments and parses the command to create the appropriate `Budget`. +"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "3. The `AddBudgetCommand` is passed back to the `LogicManager`, and the method `execute()` is called. The `Budget` is then added to the model."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "*Aspect: What user input should `addBudget` require?* +"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "* *Alternative 1 (current choice)*: the `addBudget` command requires the `amount`, `start date` and `time period (in days)` of the budget."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "** Pros: Easy to make recurring daily, weekly or annual budgets."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "** Cons: If users have the start date and end date in mind, they will have to manually calculate the period between the dates and input that instead of the end date."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "* *Alternative 2* : the `addBudget` command requires the `amount`, `start date` and `end date` of the budget."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "** Pros: Easy to make recurring monthly budgets."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "** Cons: Could cause users to miss out on certain dates if they want budgets that are recurring (eg. sets a budget from 1st March to 30th March and 1st April to 30th April – 31st March is missed out)."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "// tag::editbudget[]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003d\u003d\u003d Edit budget feature"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "ePiggy allows the user to edit the `current budget`, with any of the specified parameters in `addBudget`. +"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "* `editBudget $/300`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "* `editBudget $/400 p/7`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "The above commands edit the current budget to $300 and $400 with a period of 7 days respectively. +"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Similarly to the `addBudget` command, budgets’ dates should not overlap each other.  Hence, the budget cannot be edited"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "such that the edited budget overlaps with another budget. +"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "A `budget` is considered overlapping if *any* of the dates *in between (inclusive)* one `budget`’s start *and* end dates is the"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "*same* as the dates *in between (inclusive)* another `budget`’s start *and* end dates."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "If the current budget is edited until it is no longer a current budget, it can no longer be edited. Instead, simply add a new current"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "budget using the `addBudget` command."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "The command’s current implementation uses part of the legacy implementation to update the budget. The arguments are first parsed into"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "`EditBudgetCommandParser`, which separates the arguments into their respective fields. +"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "An `EditBudgetDescriptor` object is then created to temporarily hold this new information. +"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "The prefixes applicable to `editBudget` are `$/`, `p/` and `d/`. At least one of them must"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "follow the `editBudget` command word."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Afterwards, a `budget` object is created from the `EditBudgetDescriptor` object. Then, the `budget` object is passed into address book"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "through `Model.#setCurrentBudget()`, which will replace the current `budget` with the new `budget` passed in. +"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Since only the current `budget` can be edited, the `editBudget` command will first check if a current `budget` is present in `ePiggy`’s"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "`budgetList` through `Model#getCurrentBudgetIndex()`. If the current `budget` does not exist, the command will feedback to the user that the"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "command entered is invalid. +"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Should we use a boolean `hasCurrentBudget` method or use the `index` of the current `budget` to verify if a current `budget` exists?"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "* *Alternative 1* (current choice): +"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "The `index` of the current `budget` is returned to the `editBudgetCommand`. If the returned integer is `-1`, it means that there is no current `budget`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "present. The index is then used to retrieve the current budget."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "** Pros: No additional method implementations required. The methods `Model#getFilteredBudgetList().get()` are sufficient to get the current budget."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "** Cons: Calculations are done in the `editBudget` command’s `execute` method."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "* *Alternative 2*: +"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Using a boolean `hasCurrentBudget` method to check if a current `budget` exists in `budgetList`, then another `getCurrentBudget` method to get the current `budget`."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "** Pros: Code will be written in `ePiggy` rather than at `editBudget` command and can be easily used for other commands."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "** Cons: Will need to implement additional methods. Reduces the abstraction has the current `budget` is exposed to the entire project as it is a public method."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "After much consideration, we decided to choose option 1 as other commands should not need to access the current `budget` specifically. Hence, it will be better"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "to have a greater level of abstraction. +"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "// tag::deletebudget[]"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003d\u003d\u003d Delete budget feature"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "*_ePiggy_* allows the user to delete any budget, using the displayed `index` of the specific budget."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "* `deleteBudget 2`"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "The above command deletes the `Budget` with the displayed `index` of #2. +"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "The `Budget` to be deleted is identified by its displayed `index` and subsequently deleted. +"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "The command’s current implementation retrieves the `budgetList` from `ePiggy` and removes the"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "budget at the zero-based version of the displayed `index`. +"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "A `listener` has been added to `budgetList`, so the order in which the budgets are displayed is the same"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "as the order of the budgets in `budgetList`. Furthermore, the indexes are unique. +"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Hence, if the `index` input by the user is negative or greater than the size of `budgetList`, this would indicate that the budget specified does not exist. The user will receive a feedback that the `index` specified is invalid."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "The sequence diagram for the `delete` command can be found with the structure of the logic component"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003c\u003cDeveloperGuide.adoc#Design-Logic, here\u003e\u003e."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "//tag::findexpense[]"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "\u003d\u003d\u003d Find Expense feature"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "*_ePiggy_* allows the user to filter specific expenses by entering multiple keywords. Expenses that satisfy"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "all the keywords are displayed in the expense list panel."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "* `findExpense n/Nasi Lemak $/4.00 d/2019/04/01 t/lunch`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "The above command finds expense(s) with the `Name` Nasi Lemak, `Cost` of $4.00, purchased on"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "`Date` 1st April, 2019 and tagged with `Tag` lunch."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "`Date` format is `YYYY/MM/DD`."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "All keywords in this command are optional, provided that there is at least one input keyword. For"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "example, suppose we wabt to filter out all `Expense` s with `Cost` between $1 and $10.5 (both inclusive),"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "then the command should be just `findExpense $/1:10.5`."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Similarly for other type of keywords."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Given below is a UML sequence diagram of how the `findExpense` command works along with a step-by-step"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "explanation."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "image::fEuml.png[witdh\u003d\"800\"]"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Figure: FindExpenseCommand UML Sequence Diagram +"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Step 1: User enters `findExpense n/Nasi Lemak $/4.00 d/2019/04/01 t/lunch`. The command is"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "received by `EPiggyParser` which then creates `FindExpenseCommandParser` object and and calls"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "`FindExpenseCommandParser#parse()` method. +"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Step 2: `FindExpenseCommandParser#parse()` first checks if input is invalid and throws a"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "`ParseException` otherwise it calls `ArgumentTokenizer#tokenize()` to tokenize the `String` input"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " into keywords and store them in an `ArgumentMultimap` Object. +"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Step 3: `FindExpenseCommandParser#parse()` method then creates an `ExpenseContainsKeywordsPredicate`"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Object. It implements `Predicate\u003cExpense\u003e` interface. It performs the filtering of expenses. +"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Step 4: A `FindExpenseCommand` object is created with `ExpenseContainsKeywordsPredicate` as parameter and"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "returned to `LogicManager`. +"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Step 5: `LogicManager` calls `FindCommand#execute()`,which then calls `Model#updateFilteredExpenseList()`"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "method to update the predicate of `FilteredList\u003cExpense\u003e`. `FilteredList` now contains only a set of"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "expenses which was filtered by the new predicate. +"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Step 6: Expense List panel is updated by filtered set of expenses. A `CommandResult` is then created and"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "returned to `LogicManager`."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "// tag::setGoal[]"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "\u003d\u003d\u003d Set Goal feature"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "This command allows users to set a savings goal that they would like to save up to. +"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "It requires the user to specify the name of the goal, as well as the amount they would like to hit."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "* `setGoal n/Nintendo Switch $/499`"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "The command above sets a goal with the name `Nintendo Switch` and with the amount `$499`"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "Given below is a sequence diagram of how the `setGoal` command works:"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "image::setGoalSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "Figure: SetGoalCommand Sequence Diagram."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "The command is first parsed into `SetGoalCommandParser`, which separates the arguments into their respective fields. A new `Goal` is created and parsed into `SetGoalCommand`."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "`Goal` will then be set with `Model#setGoal()` and saved into the ePiggy `Storage`."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "*Example usage scenario:* +"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "1.\tUser launches application and enters `setGoal n/Nintendo Switch $/499`. +"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "2.\t`SetGoalCommandParser` takes in the arguments and parses the command to create the appropriate `Goal`. +"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "3.\tThe `SetGoalCommand` is passed back to the `LogicManager`, and the method `execute()` is called. `Goal` is then set to the `model`."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: `setGoal` (1 goal) VS `addGoal` (multiple goals)"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "* *Alternative 1 (current choice):* `setGoal` (1 goal) +"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "** Pros: Easier to implement. Makes ePiggy easier to use."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "** Cons: Limits the user experience by allowing only 1 savings goal."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "* *Alternative 2:* `addGoal` (multiple goals)"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "** Pros: Gives user freedom to set more than 1 goal."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "** Cons: Makes ePiggy more complicated, not suitable for younger age groups."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "// end::setGoal[]"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "// tag::viewGoal[]"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "\u003d\u003d\u003d View Goal feature"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "This command allows users to view their goal set, as well as to check how much more the user has to save in order to reach the goal. +"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "* `viewGoal`"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "Based on the amount of savings the user has, the command will output 2 different types of messages."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "Firstly, the command will first output the current goal that the user has set."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "Next, if the user has not reached the goal amount (savings less than goal), it will output the difference of the savings and the goal, indicating how much more the user has to save to reach the goal. +"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "However, if the user has reached the goal amount (savings greater than goal), it will output a message congratulating the user for reaching their goal."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "The command will first obtain the current `savings` and current `goal` from the `model` that the user has set. +"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "Taking `goal` minus `savings`,  the result is stored in a temporary float `diff`. +"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "If `diff` is positive, `diff` is passed to `CommandResult`, and the amount is displayed to show the user how much more they have to save."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "If `diff` is negative, the congratulation message is passed to `CommandResult`."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "If a goal has not been set by the user, the command will use a default goal which has an empty name and $0 for the amount."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "// end::viewGoal[]"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedEPiggy`."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "It extends `ePiggy` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "* `VersionedEPiggy#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "* `VersionedEPiggy#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "* `VersionedEPiggy#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitEPiggy()`, `Model#undoEPiggy()` and `Model#redoEPiggy()` respectively."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedEPiggy` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitEPiggy()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitEPiggy()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "If a command fails its execution, it will not call `Model#commitEPiggy()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoEPiggy()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoEPiggy()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoEPiggy()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoEPiggy()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitEPiggy()`, `Model#undoEPiggy()` or `Model#redoEPiggy()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitEPiggy()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedEPiggy`."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "// tag::report[]"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "\u003d\u003d\u003d Report feature"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "This command allows users to view the report within a user-input period of time. +"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "This command requires users to specify the `date`, `month` or `year` of the report in the command. +"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "* `report d/DD/MM/YYYY` +"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "The above command shows a report on specified date. +"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "* `report d/MM/YYYY` +"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "The above command shows a report on specified month. +"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "* `report d/YYYY` +"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "The above command shows a report on specified year. +"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "* `report` +"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "The above command shows a completed report from first day of user launches the ePiggy. +"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "Commands with different format of tag `d/` will generate a report with different charts. +"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "Eg: `report d/21/03/2019` +"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "The above report command will generate a report of 21 Mar 2019 with AreaChart."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "Only last tag `d/` is used to generate a report if multiply of `d/` appear."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "The command is first parsed into `ReportCommandParser`, which separates the arguments into their respective fields. A new `localDate` object is created and `type` of the report are generated according to the date format of `d/`. The `model`, `localDate` and `type` are parsed into `ReportCommand`. +"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "The reportCommand will initialize `ReportWindow` and the method `displayReportController` of the object `ReportWindow` will be invoked. +"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "The `displayReportController` method will select a specified type of report to display the report."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "*Example usage scenario:* +"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "1. User launches application and enters `Report d/21/03/2019`. +"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "2. `ReportCommandParser` takes in the arguments and parses the command to create the appropriate `localDate`. +"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "3. The `ReportCommand` is passed back to the `LogicManager`, and the method `execute()` is called. The `ReportWindow` is initialized. +"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "4. The method `displayReportController` is called and report will show."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "*Aspect: How to make report more readable?* +"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "* *Alternative 1 (current choice)*: the `report` command uses a chart to display different data of expenses, budgets and allowances."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "** Pros: Easy to know how much a user have spend on that date, that month or that year. Easy to compare with previous month or year."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "** Cons: The details of the expenses, budgets and allowances cannot show in the chart."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "* *Alternative 2* : Show the records of expenses, budgets and allowances in details line by line."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "** Pros: User can know the details of each records."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "** Cons: Report feature becomes extra because list command can do the same thing."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "// end::report[]"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "A project often depends on third-party libraries. For example, ePiggy depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/EPiggyParser.java[`EPiggyParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/EPiggyParser.java[`EPiggyParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/ePiggy.java[`ePiggy`] API need to be updated."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/ePiggy.java[`ePiggy`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/ePiggy.java[`ePiggy`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/ePiggy.java[`ePiggy`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `ePiggy#removeTag(Tag)`."
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/EPiggySystemTest.java[`EPiggySystemTest#assertCommandBoxShowsDefaultStyle() and EPiggySystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleEPiggyChangedEvent(EPiggyChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/EPiggySystemTest.java[`EPiggySystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ". Add a new method `backupEPiggy(ReadOnlyEPiggy)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/EPiggyStorage.java[`EPiggyStorage`] interface."
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/JsonEPiggyStorage.java[`JsonEPiggyStorage`] class."
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/EPiggyParser.java[`EPiggyParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/EPiggyParserTest.java[`EPiggyParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/EPiggyParser.java[`EPiggyParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/EPiggyParserTest.java[`EPiggyParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `data/addressbook.json` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `JsonAdaptedPerson` class"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/JsonAdaptedPerson.java[`JsonAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new JSON field for `Remark`."
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ". Fix `invalidAndValidPersonEPiggy.json`, `typicalPersonsEPiggy.json`, `validEPiggy.json` etc., such that the JSON tests will not fail due to a missing `remark` field."
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "|`* * *` |user |add a new expense record |Track my usage of the expense"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "|`* * *` |user |delete my expense records |remove the wrong expenses records"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "|`* * *` |user |see my total expenditure till date or by time period |know the total amount I have spent"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "|`* *` |user |see the report of my spending on specified year|know how much I spend on that year"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "|`* *` |user |see the date of my spending |know when I spend a certain item"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "|`* *` |user |see the percentage of the amount I spent out of my set budget |track my expenses"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "|`* *` |user |receive reminders when I am approaching my budget |cut down on my expenses"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "|`* *` |user |set a monthly budget |know whether I\u0027m keeping to the budget"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "|`* *` |user |see the statistics of my spendings till date |see my spending habits"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "|`* *` |new user |create my personal account |make my personal expense records confidential"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "|`* *` |user |login to my personal account |manage my personal expense records"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "|`* *` |user |get notification when budget finishing |manage the rest of the budget well"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "|`* *` |user |see the report of my spending on specified date |know how much I spend on that day"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "|`* *` |user |see the report of my spending on specified month of the year |know how much I spend on that month of the year"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "|`*` | (fill in here) |(fill in here)"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "(For all use cases below, the *System* is the `ePiggy` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003d\u003d\u003d Use case: Edit"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "1.  User requests to list expenses"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "2.  ePiggy shows a list of expenses"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "3.  User requests to edit a specific expense in the list"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "4.  ePiggy edits the expense"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "** 3a1. ePiggy shows an error message."
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "\u003d\u003d\u003d Use case: View expense entry"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "1.  User requests to list expenses."
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "2.  ePiggy shows list of expenses."
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "3.  User requests to view a specific expense in the list."
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "4.  ePiggy displays the details of the specified expense."
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "** 3a1. ePiggy shows an error message."
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "\u003d\u003d\u003d Use case: View report"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "1.  User requests to view expenditure report of a day/month/year."
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "2.  ePiggy shows the expenditure report for that day/month/year."
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "+"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "* 1a. The given date is invalid."
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "+"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "** 1a1. ePiggy shows an error message."
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "+"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003d\u003d\u003d Use case: Set budget"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "1.  User requests to set budget"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "2.  ePiggy sets the input number as the budget"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "* 1a. The given amount is invalid."
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "** 3a1. ePiggy shows an error message."
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "* 1b. User already has a budget set."
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "** 1b1. ePiggy asks if user would like to overwrite old budget."
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "*** 1b1a. ePiggy sets a new budget based on user\u0027s new input."
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "*** 1b1b. ePiggy keeps the old budget."
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003d\u003d\u003d Use case: Recommend"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "1.  User requests ePiggy to recommend"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "2.  ePiggy recommends future spendings"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "* 1a. The period of expenses is less than a week."
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "** 1a1. ePiggy shows an error message."
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003d\u003d\u003d Use case: Forecast"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "1.  User requests ePiggy to forecast future spendings"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "2.  ePiggy gives a forecast of future spendings"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "* 1a. The period of expenses is less than a week."
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "** 1a1. ePiggy shows an error message."
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "\u003d\u003d\u003d Use case: Create new account"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "1. User requests create a new account"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "2. ePiggy requests username and password"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "3. ePiggy creates new user account"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "+"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "* 1a. Username exists on the database."
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "+"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "** 1a1. ePiggy shows an error message."
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "+"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "\u003d\u003d\u003d Use case: Add new expense record"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "1. User requests the create a new record."
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "pdnm"
        },
        "content": "2. User enters a add command with the name of item, cost, categories and date"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "3. ePiggy saves the record."
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "+"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "* 2a. The name and date are empty."
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "+"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "** 2a1. ePiggy shows an error message."
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "+"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "\u003d\u003d\u003d Use case: Search expense records"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "1. User requests to search for an expense record."
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "2. ePiggy requests user to enter search command."
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "3. User enters search command with specific parameters."
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "4. ePiggy searches and displays the record(s)."
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "+"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "* 1a. Parameter field is empty."
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "+"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "** 1a1. ePiggy lists all the expense records."
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "+"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "\u003d\u003d\u003d Use case: Sort expense records"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "1. User requests to sort expense records."
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "2. ePiggy requests user to enter sort command."
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "3. User enters sort command with specific parameters."
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "4. ePiggy sorts and displays the record(s)."
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "+"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "* 1a. Parameter field is empty."
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "+"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "** 1a1. ePiggy lists all the expense records sorted by date added."
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "+"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "\u003d\u003d\u003d Use case: Delete expense records"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "1. User requests to delete expense record."
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "2. ePiggy requests user to enter delete command."
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "3. User enters delete command with index of the expense record."
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "4. ePiggy perform delete action"
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "+"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "* 1a. The period of expenses is less than a week."
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "+"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "** 1a1. ePiggy shows an error message."
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "+"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "\u003d\u003d\u003d Use case: Login"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "1. ePiggy requests username and password"
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "2. User enters username and password"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "3. User login success."
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "+"
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "* 1a. Username and password do not match."
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "+"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "** 1a1. ePiggy shows an error message."
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "** 1a2. ePiggy recovers from 1."
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "+"
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "\u003d\u003d\u003d Use case: Help"
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "1. User requests for help."
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "2. ePiggy displays a list of all the commands - brief description and syntax."
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "+"
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "\u003d\u003d\u003d Use case: Notify when budget finishing"
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "1. User budget is finishing soon"
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "2. ePiggy shows warning message"
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "+"
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "yunjun199321": 164,
      "kev-inc": 86,
      "pdnm": 1,
      "tehwenyi": 298,
      "-": 902,
      "rahulb99": 101
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003d ePiggy - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ":toclevels: 4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S2-W17-4/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "image::userguide.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "By: `Team A+ for CS2103T`       Since: `Feb 2019`      Last Updated: `April 2019`     Licence: `MIT`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "image::userguideintroduction.gif[width\u003d\"200\", role\u003d\"center\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Welcome to *_ePiggy_*! *_ePiggy_* is a desktop application designed to inculcate good spending habits in students. +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Managing money is made much simpler for you with a simple interface and simple commands!"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "At the same time, *_ePiggy_* offers everything you need to cultivate good spending habits before"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "entering the workforce, from tracking expenses and managing budgets to setting goals! +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Interested? Click on the Quick Start to get started!"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "\u003d\u003d About"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "This user guide provides a comprehensive view on how to set up ePiggy, the features available, and frequently asked questions."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "To start using ePiggy, simply follow these steps::"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "1. Ensure you have Java version `9` or later installed on your computer. +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "2. Download the latest *`ePiggy.jar`* file from link:{repoURL}/releases[here]. +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "3. Copy the file to the folder which you want to use as the home folder for your Expense Tracker. +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "4. Double-click the *`ePiggy.jar`* file to start the app. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "5. The GUI will appear as per below upon launch."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "image::Ui.png[width\u003d\"760\"]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "_Figure 1. The user interface upon launch of application_"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "*Some sample commands you can try:*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "* `addExpense n/Chicken Rice $/4 t/dinner` +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "This command adds a new expense of $4 for Chicken Rice today."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "* `addAllowance $/20` +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "This command adds a new allowance of $20."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "* `addBudget $/500 p/28 d/01/02/2019` +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "This command adds a budget of $500 from 1st February 2019 to 28th February 2019 (28 days)."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be entered by the user. +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "** E.g. For `addExpense n/EXPENSE_NAME`, `EXPENSE_NAME` is a parameter which can be used as `addExpense n/Chicken Rice`."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "* Items in square brackets are optional. +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "** E.g `n/EXPENSE_NAME [t/TAG]` can be used as `n/Chicken Rice t/School` or as `n/Chicken Rice`."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times. +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "** E.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/school` (1 time), `t/hawker t/school` (2 times) etc."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "* Parameters can be in any order. +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "** E.g. If the command specifies `n/EXPENSE_NAME $/COST`, `$/COST n/EXPENSE_NAME` is also acceptable."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "\u003d\u003d\u003d Basic Features"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "\u003d\u003d\u003d\u003d Auto complete :"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "Enter the first few letters of the command or tag, and then press `Tab` key on the keyboard to auto complete the command. +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "If the auto complete command is not what you want, delete some letters and press `Tab` again. Another command will show. +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "Example: enter letter \u0027a\u0027 and then press `Tab`, the addExpense will show."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "Lists all the user commands with their syntax and descriptions. +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "\u003d\u003d\u003d\u003d Adding an expense : `addExpense`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Adds a new expense record to the Expense Tracker. +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pdnm"
        },
        "content": "Format: `addExpense n/EXPENSE_NAME $/COST [d/DATE] [t/TAG]…`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pdnm"
        },
        "content": "* `addExpense n/Chicken rice set $/5 t/Food d/21/02/2019` +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pdnm"
        },
        "content": "Adds an expense for a $5 chicken rice set, tagged as Food with the date as 21/02/2019."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pdnm"
        },
        "content": "* `addExpense n/Chicken rice set $/5 t/Food` +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "Adds an expense for a $5 chicken rice set, tagged as Food dated as the current date, by default."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pdnm"
        },
        "content": "\u003d\u003d\u003d\u003d Editing an expense : `editExpense`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Edits an existing expense in ePiggy at a specific `*INDEX`* . +"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "The *`INDEX`* refers to the number in the displayed Expenses List which is next to the name of the expense. Existing values of"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "the expense will be changed according to the value of the parameters. +"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pdnm"
        },
        "content": "Format: `editExpense INDEX [n/EXPENSE_NAME] [$/COST] [d/DATE] [t/TAG]…`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pdnm"
        },
        "content": "* `editExpense 1 n/Pen $1 t/Supplies` +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "Edits the name, cost and tag of the first expense in the Expense List to ‘Pen’, ‘$1’ and ‘Supplies’ respectively."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pdnm"
        },
        "content": "* `editExpense 2 t/Food` +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "Edits the tag of the second expense in the Expense List to ‘Food’."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pdnm"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting an expense : `deleteExpense`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Deletes the expense at the specified INDEX. The INDEX refers to the number in the displayed Expenses List which is next to"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "the name of the expense. +"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pdnm"
        },
        "content": "Format: `deleteExpense INDEX`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pdnm"
        },
        "content": "* `deleteExpense 1` +"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pdnm"
        },
        "content": "Deletes the first expense in the displaying expense list from Expense Tracker."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "\u003d\u003d\u003d\u003d Adding an allowance: `addAllowance`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "Adds a new allowance record to the Expense Tracker. +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "Format: `addAllowance n/EXPENSE_NAME $/COST [d/DATE] [t/TAG]…`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "* `addAllowance n/From Mom $/20 t/School d/21/02/2019` +"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "Adds an allowance of $20 from Mom, tagged as School with the date as 21/02/2019."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "\u003d\u003d\u003d\u003d Editing an allowance : `editAllowance`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "Edits an existing allowance in ePiggy at a specific `*INDEX`* . +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "The *`INDEX`* refers to the number in the displayed Expenses List which is next to the name of the expense. Existing values of"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "the expense will be changed according to the value of the parameters. +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "Format: `editAllowance INDEX [n/ALLOWANCE_NAME] [$/COST] [d/DATE] [t/TAG]…`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "* `editAllowance 1 n/From Mom $10 t/Emergency` +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "Edits the name, cost and tag of the first allowance in ePiggy to ‘From Mom’, ‘$10’ and ‘Emergency’ respectively."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "* `editAllowance 2 $/22` +"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "Edits the amount of the second allowance in ePiggy to ‘$22’."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting an allowance : `deleteAllowance`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "Deletes the allowance at the specified INDEX. The INDEX refers to the number in the displayed Expenses List which is next to"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "the name of the allowance. +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "Format: `deleteAllowance INDEX`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "* `deleteExpense 1` +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "Deletes the first allowance in the displaying expense list from Expense Tracker."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all expenses : `list`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "Lists the expense records from newest to oldest. Use this to return to the default view after search/sort commands +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all expenses in reverse : `reverseList`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "Lists the expense records from oldest to newest. Use this to return to the default view after search/sort commands +"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "Format: `reverseList`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing an expense : `view`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "View the details of the selected *`INDEX`*. +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Format: `view INDEX`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "* `view 3` +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "View will display more information on item 3 (eg. tags, entry description, etc.)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing total savings : `viewSavings`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "Show details of the net amount of money recorded in ePiggy. +"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "Format: `viewSavings`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "\u003d\u003d\u003d Filtering and Sorting Data"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "\u003d\u003d\u003d\u003d Searching for an expense : `findExpense`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "You can search for any expense in the list by specifying either its name, tag, date, range of dates, or range of amount. +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Format: *`findExpense [n/NAME] [t/TAG] [d/DATE_RANGE] [$/AMOUNT RANGE]`* +"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "* `fE n/MCDONALDS` +"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Displays all entries with the name “MCDONALDS”."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "* `fE t/FOOD` +"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "Displays all entries with the tag specified (in this case, it’s food)."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "* `fE d/2019/01/02` +"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Displays all entries listed on 2nd Jan 2019."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "* `fE d/2019/01/02:2020/12/05` +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Displays all entries listed in the range 2nd Jan 2019 to 5th Dec 2020."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "* `fE $/250` +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Displays all entries listed with the cost range of $250."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "* `fE $/250:500` +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "pdnm"
        },
        "content": "Displays all entries listed with the cost range of $250 to $500."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "*Additional Information:* +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Searches and displays the expense along with its information, according to the user-specified command. +"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "If the entry is not found, it displays an appropriate error message. +"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Date format is `yyyy/MM/dd` ."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "\u003d\u003d\u003d\u003d Sorting the expenses : `sortExpense`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "The user can sort the expenses in the list by name, date added, amount in ascending or descending order. +"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Format: `sortExpense -[n/d/$]/`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "* `sE n/` +"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Sorts all entries by name (in ascending order)."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "* `sE d/` +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Sorts all entries by date in descending order."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "* `sE $/` +"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Sorts all entries by amount in ascending order."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "\u003d\u003d\u003d Budgeting"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003d\u003d\u003d\u003d Setting the spending budget : `addBudget`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Sets a total expenses budget for a certain time period. The time period will be in terms of days, and 1 day is the minimum"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "a person can set a budget for. +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "This command can only be used if there are no budgets set yet. The addBudget command is case sensitive. +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Format: `addBudget $/AMOUNT p/TIME_PERIOD_IN_DAYS d/START_DATE`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "* `addBudget $/500 p/7 d/03/02/2019` +"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Sets a total budget of $500 for each week starting from 3rd February 2019."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "* `addBudget $/10000 p/15 d/01/01/2000` +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Sets a total budget of $10000 every 15 days starting from 1st January 2000."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "****"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "*Additional Information:* +"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Time period cannot exceed 1 million days."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Budget does not take into account allowances as budget only accounts for expenses."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "****"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "*Display status of budget:* +"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "The Expense Tracker will show the status of the current budget whenever a new expense is added. It will display the following information: +"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "- Status of Budget (Old/Current) +"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "- Budgeted Amount($) +"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "- Start Date of Budget (date) +"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "- End Date of Budget (date) +"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "- Period of Budget (days) +"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "- Remaining Amount for Budget ($) +"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "- Remaining Days before Budget resets (Days) +"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "image::BudgetUi.png[width\u003d\"760\"]"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "_Figure 3: Shows budget status_"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "\u003d\u003d\u003d\u003d Editing the spending budget : `editBudget`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Edits the current budget. Budgets are not allowed to overlap, and at least one budget must already be present. +"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "The editBudget command is case sensitive. +"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Format: `editBudget [$/AMOUNT] [p/TIME_PERIOD_IN_DAYS]`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "* `editBudget $/1000 p/7 d/01/01/2000` +"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Edits the current budget to $1000 for each week starting from 01/01/2000."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "* `editBudget $/200 p/15` +"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Edits the current budget to $200 for every 15 days starting from the budget\u0027s initial start date."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "****"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "*Additional Information:* +"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Time period cannot exceed 1 million days."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Budget does not take into account allowances as budget only accounts for expenses."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "****"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003d\u003d\u003d\u003d Editing the spending budget : `deleteBudget`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Deletes the budget at the specified `INDEX`. The `INDEX` refers to the number in the displayed Budget List which is next to"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "the status of the budget. +"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Format: `deleteBudget INDEX`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Deletes the first budget in the Budget List."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "****"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "*Additional Information:* +"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Budget does not take into account allowances as budget only accounts for expenses."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "****"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "// tag::report[]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "\u003d\u003d\u003d Expense Report"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "\u003d\u003d\u003d\u003d Generate report : `report`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "Generates a report of the given date, month, or year. The report consists of total inflow, total outflow, and proportion of income"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "spent on different categories. +"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "Format: `report [t/DD/MM/YYYY]` +"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "Format: `report [t/MM/YYYY]` +"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "Format: `report [t/YYYY]` +"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "Format: `report`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "* `report` +"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "View the completed report."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "* `report t/21/03/2019` +"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "View the daily report of 21 Mar 2019."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "* `report t/03/2019` +"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "View the monthly report of Mar 2019."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "* `report t/2019` +"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "View the yearly report of 2019."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "// end::report[]"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "\u003d\u003d\u003d Goal Setting"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "// tag::setGoal[]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "\u003d\u003d\u003d\u003d Setting the savings goal : `setGoal`"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "Sets the item and the amount that the user wishes to save up for. +"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "Format: `setGoal n/ITEM_NAME $/AMOUNT`"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "* `setGoal n/nike shoes $/80` +"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Sets the goal to a $80 Nike shoe."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "// end::setGoal[]"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "// tag::viewGoal[]"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing the savings goal : `viewGoal`"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Show details about the current goal set. +"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "Format: `viewGoal`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "// end::viewGoal[]"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "\u003d\u003d\u003d Miscellaneous"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "\u003d\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "ePiggy\u0027s data is saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "\u003d\u003d\u003d Upcoming Features"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "\u003d\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "User can enable/disable data encryption to secure their files."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "\u003d\u003d\u003d\u003d Compare between users `[coming in v2.0]`"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Compares between different users."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Requires multiple accounts in the same network."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "// tag::v2.0[]"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "\u003d\u003d\u003d\u003d Login to ePiggy `[coming in v2.0]`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "Login to ePiggy as an existing user. +"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "\u003d\u003d\u003d\u003d Logout to ePiggy `[coming in v2.0]`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "Logout ePiggy. +"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "\u003d\u003d\u003d\u003d Register to ePiggy `[coming in v2.0]`"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "Register a new user in ePiggy. +"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "// end::v2.0[]"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "\u003d\u003d\u003d\u003d Share feature `[coming in v2.0]`"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Allows you to share your expenses with anyone, by sending them an email"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "including an attachment of your personal `ePiggy` data in CSV format. +"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003d\u003d\u003d\u003d Recommend future spendings : `recommend`"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Recommends a daily limit you need to have in order to satisfy your budget and the income you need to have if you intend to maintain your current spending habits. +"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous ePiggy folder."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "* *Add Expense* : `addExpense n/EXPENSE_NAME $/COST [d/DATE] [a/NAME_OF_THE_SHOP] [t/TAG]…` +"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "e.g. `addExpense n/Chicken rice set $/5 t/Food a/HAINAN KITCHEN d/2019-02-21`"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "* *Add Allowance* : `addAllowance $/AMOUNT` +"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "e.g. `addAllowance $/10`"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "* *Reverse list* : `reverseList`"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "* *Edit* : `edit INDEX [n/EXPENSE_NAME] [$/COST] [c/CATEGORY] [d/DATE] [t/TAG]…` +"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "e.g. `edit 1 n/pen $1 c/supplies`"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "* *View Expense* : `view INDEX` +"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "e.g. `view 3`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "* *View Savings* : `viewSavings`"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "* *Search* : `search -[n/t/d/$] [NAME/TAG/DATE RANGE/AMOUNT RANGE]` +"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "e.g.`search -n MCDONALDS`"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "* *Sort* : `sort -[n/d/$] -[A/D]` +"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "e.g.`sort -n`"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "* *Set Budget* : `addBudget $/AMOUNT p/TIME_PERIOD_IN_DAYS $/START_DATE` +"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "e.g.`addBudget $500.00 t/7 d/01/02/2019`"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "* *Edit Budget* : `editBudget [$/AMOUNT] [p/TIME_PERIOD_IN_DAYS] [$/START_DATE]` +"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "e.g.`editBudget $300.00 t/28`"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "* *Delete Budget* : `deleteBudget INDEX` +"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "e.g.`deleteBudget 2`"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "* *Recommend* : `recommend`"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "* *Report* : `report d/DD/MM/YYYY` +"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "e.g. `report d/21/03/2019`"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "* *Set Savings Goal* : `setGoal n/ITEM_NAME $/AMOUNT` +"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "e.g. `setGoal n/nike shoes $/80`"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "* *View Savings Goal* : `viewGoal`"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "* *Exit* : `exit`"
      }
    ],
    "authorContributionMap": {
      "yunjun199321": 38,
      "kev-inc": 140,
      "pdnm": 13,
      "tehwenyi": 110,
      "-": 124,
      "rahulb99": 28
    }
  },
  {
    "path": "docs/team/WuYunjun.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "\u003d Wu Yunjun - Project Portfolio for ePiggy"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "\u003d\u003d Project: ePiggy"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "\u003d\u003d About the project"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "My team and I designed to modify a basic command line interface addressbook4 for our Software Engineering project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "We chose to change some logic and methods in addressbook4 so that it became a useful accounting software calls ePiggy."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "The ePiggy aids to inculcate good spending habits in students. At the same time, ePiggy supports budgets, expenses and allowances management."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "Student can use it to manage money easily by single and simply commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "My role was to design and write the codes for the report and auto-complete features. The following sections"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "illustrate these enhancements in more detail, as well as the relevant sections I have added to the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "user and developer guides in relation to these enhancements."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "Note the following symbols and formatting used in this document:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"30%,70%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "|[NOTE] |This symbol indicates important information."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "|`report` | A grey highlight (called a mark-up) indicates that this is a command"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "           that can be inputted into the command line and executed by the"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "           application."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "|`ReportWindow` |Blue text with grey highlight indicates a component, class or object in"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                 the architecture of the application."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "This section shows a summary of my coding, documentation, and other helpful contributions to the"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "team project."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "*Major enhancement*"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "* I added a `report` command for ePiggy: +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "** What it does: The `report` command allows the user to view a report (summary) of expenses, budgets and allowance on specified date, month or year."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "** Justification: If user wants to manage his/her money better, the report command enables ePiggy to generate a visualized report of specified date, month or year with different charts. The user can have a better idea of how much he/she spend or how much he/she save in that period of time."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "** Highlights: This command works with existing advanced features such as budget and allowance management. The implementations were challenging as it required good understanding of the addressbook4 structure and JavaFX."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "** Credits: JavaFX basic feature online tutorials, JavaFX advanced features (charts) tutorials."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "* I added auto complete feature for ePiggy +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "** What it does: user enters first few letters of the command, and then press ‘Tab’ key on the keyboard. The completed command will show on the text field."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "** Justification: In case the user forgot some of the commands, he/she can quickly find the correct command format by press the ‘Tab’ key. If user forgot the parameters of the command, he/she can also use it function fill in the correct parameters of the command."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "* *Code contributed*: Please click these links to see a sample of my code:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "https://github.com/yunjun199321/main/commits?author\u003dyunjun199321[Code contribution]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "https://github.com/yunjun199321/main/commit/fcc384f89b82596b30448aa47c6f4b64151e67c7[Auto Complete function]|"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "https://github.com/yunjun199321/main/commit/17e48dfc8f152ba857fbe41ac729d03f20c493be[Report command phaser and UI button]|"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "https://github.com/yunjun199321/main/commit/9cfcc856b16a1da07112742a670aee9a38208103[JavaFX charts]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "*** manage releases version 1.1 to 1.3 on GitHub"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "*** Updated the ePiggy icon and name"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "*** Fix some old tests to increase coverage"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "*** Made cosmetic improvements to the existing User Guide to make it more reader-friendly"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "*** Update User Guide and Developer Guide"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "*** Add user stories"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "*** PRs reviewed"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "*** Contributed to forum discussions"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "*** Setup GitHub home-page and issue template"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "*** Setup Travis CI"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "We had to update the original addressbook4 User Guide with instructions for the enhancements that"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "we had added. The following is an excerpt from our ePiggy User Guide, showing the details of report features and auto complete function."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "include::../UserGuide.adoc[tag\u003dreport]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "\u003d\u003d Auto complete:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "Enter the first few letters of the command or tag, and then press Tab key on the keyboard to auto complete the command."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "If the auto complete command is not what you want, delete some letters and press Tab again. Another command will show."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "Example: Enter letter \u0027a\u0027 and then press Tab, the `addExpense n/ $/ t/ d/` will show."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "include::../UserGuide.adoc[tag\u003dv2.0]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "The following section shows my additions to the ePiggy Developer Guide for the report and auto complete features."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dreport]"
      }
    ],
    "authorContributionMap": {
      "yunjun199321": 99
    }
  },
  {
    "path": "docs/team/kevin.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "\u003d Kevin Chan - Project Portfolio for ePiggy"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "ePiggy is a simplified expense tracker for students."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "It can be used to record their allowance, expenses, savings, and can even plan out what they should eat for recess."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "It has student-centric features that makes managing their money easier."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "ePiggy was build based from a basic command line interface addressbook for a software engineering project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "My team and I decided to build ePiggy because we wanted to teach students to start managing their expenses from young, through the use of basic coding, in a manner that relates to them."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "My primary role was to develop the goal setting feature."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "The following sections show these enhancements in more detail, as well as the additional features that I added to the user and developer guides on top of this enhancement."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "This section shows a summary of my code, documentation, and other contributions to the team project."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "*Enhancements added:*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "* Added the goal setting function"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "** What it does: The `setGoal` command allows the user to set the name and the amount of their savings goal, and the `viewGoal` command allows the user to view their previously set goal, and how much more they have to save to hit the goal"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "** Justification: This is one of the student-centric features that we wanted to implement in ePiggy to make it different from other expense trackers."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "** Highlights: This enhancement requires a quick comparison of the amount that the goal is set, and the net amount of money recorded (savings) in ePiggy. The avoid the need of having to scan through the whole list of expenses to obtain the savings amount, a savings class was implemented to track the movement of the net total of money recorded. This savings class had to accurately calculate the net total of money in ePiggy and this amount had to be recalculated everytime an `addAllowance`, `addExpense`, `deleteExpense`, or `editExpense` command is used. By using this savings class, we can deliver the amount the user has to save in the future to hit the goal accurately and quickly."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "** Code contributed:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "*** Functional code:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "https://github.com/CS2103-AY1819S2-W17-4/main/blob/master/src/main/java/seedu/address/logic/commands/epiggy/SetGoalCommand.java[SetGoalCommand]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "https://github.com/CS2103-AY1819S2-W17-4/main/blob/master/src/main/java/seedu/address/logic/commands/epiggy/ViewGoalCommand.java[ViewGoalCommand]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "https://github.com/CS2103-AY1819S2-W17-4/main/blob/master/src/main/java/seedu/address/logic/commands/epiggy/ViewSavingsCommand.java[ViewSavingsCommand]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "https://github.com/CS2103-AY1819S2-W17-4/main/blob/master/src/main/java/seedu/address/logic/parser/epiggy/SetGoalCommandParser.java[SetGoalCommandParser]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "https://github.com/CS2103-AY1819S2-W17-4/main/blob/master/src/main/java/seedu/address/model/epiggy/Goal.java[Goal]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "https://github.com/CS2103-AY1819S2-W17-4/main/blob/master/src/main/java/seedu/address/model/epiggy/Savings.java[Savings]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "*** Test code:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "https://github.com/CS2103-AY1819S2-W17-4/main/blob/master/src/test/java/seedu/address/logic/commands/epiggy/SetGoalCommandTest.java[SetGoalCommandTest]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "https://github.com/CS2103-AY1819S2-W17-4/main/blob/master/src/test/java/seedu/address/logic/commands/epiggy/ViewGoalCommandTest.java[ViewGoalCommandTest]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "https://github.com/CS2103-AY1819S2-W17-4/main/tree/master/src/test/java/seedu/address/logic/commands/epiggy[ViewSavingsCommandTest]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "* Refactored `Storage` to include `Expense`, `Goal`, `Savings` and `Budget`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "** Code contributed: https://github.com/CS2103-AY1819S2-W17-4/main/blob/master/src/main/java/seedu/address/storage/epiggy/EPiggyStorage.java[EPiggyStorage]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "https://github.com/CS2103-AY1819S2-W17-4/main/blob/master/src/main/java/seedu/address/storage/epiggy/JsonSerializableEPiggy.java[JsonSerializableEPiggy]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "* Added an `addAllowance` command that extends from the `addExpense` command"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "** Code contributed:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "https://github.com/CS2103-AY1819S2-W17-4/main/blob/master/src/main/java/seedu/address/logic/commands/epiggy/AddAllowanceCommand.java[AddAllowanceCommand]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "https://github.com/CS2103-AY1819S2-W17-4/main/blob/master/src/main/java/seedu/address/logic/parser/epiggy/AddAllowanceCommandParser.java[AddAllowanceCommandParser]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "* Incorporated a panel dedicated to savings and goals into the user interface"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "** Code contributed: https://github.com/CS2103-AY1819S2-W17-4/main/blob/master/src/main/java/seedu/address/ui/SavingsPanel.java[SavingsPanel]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "* Added command aliases"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "*Other contributions:*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "* Community:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "** Helped to fix bugs in classes created by other teammates https://github.com/CS2103-AY1819S2-W17-4/main/commit/f0d99ad433d3741491aafcc6798527407b4f5191[{#97)]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "* Documentation:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "** Compiled and made formatting changes to the user guide to make it more reader-friendly https://github.com/CS2103-AY1819S2-W17-4/main/commit/5046afedac24c4da8a391b84a5a767604efa2155[(#85)]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "* Tools:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "** Set up auto-publishing of documentation for the team"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "** Set up reposense for the team"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "We had to write a new User Guide as most of the sections in the AddressBook User Guide was not applicable to our application. Below is an excerpt from the *ePiggy User Guide*, showing additions I made for the `setGoal`, `viewGoal` and `addAllowance` commands."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "include::../UserGuide.adoc[tag\u003dsetGoal]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "include::../UserGuide.adoc[tag\u003dviewGoal]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "The following section shows my addition to the developer guide for the `setGoal` and `viewGoal` commands."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dsetGoal]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dviewGoal]"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 72,
      "tehwenyi": 3
    }
  },
  {
    "path": "docs/team/minh.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pdnm"
        },
        "content": "\u003d Phan Duc Nhat Minh - Project Portfolio for ePiggy"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pdnm"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pdnm"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pdnm"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pdnm"
        },
        "content": "\u003d\u003d PROJECT: ePiggy"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pdnm"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pdnm"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pdnm"
        },
        "content": "\u003d\u003d\u003d About"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pdnm"
        },
        "content": "// what specific project task is, what module it is for, whether it is an indiv or grp proj"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pdnm"
        },
        "content": "*ePiggy* is a desktop application for managing personal finances. It allows users to track expenses, manage budgets and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pdnm"
        },
        "content": "savings. +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pdnm"
        },
        "content": "\u003d\u003d\u003d Project Team"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pdnm"
        },
        "content": "*_ePiggy_* was designed for twin modules CS2101 and CS2103T. It was transformed from the link:https://github.com/nus-cs2103-AY1819S2/addressbook-level4[AddressBook - Level 4] application."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pdnm"
        },
        "content": "My team consists of 5 members, including myself. +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pdnm"
        },
        "content": "I implemented the expense management features (adding, deleting and modifying expense record)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pdnm"
        },
        "content": "\u003d\u003d\u003d Purpose"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pdnm"
        },
        "content": "This portfolio aims to document my contributions to *_ePiggy_*."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pdnm"
        },
        "content": "*_ePiggy_* Github link: https://github.com/CS2103-AY1819S2-W17-4/main"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pdnm"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pdnm"
        },
        "content": "Implemented the essential commands (`add`, `edit`, `delete`) +"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pdnm"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pdnm"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pdnm"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pdnm"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pdnm"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pdnm"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pdnm"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pdnm"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pdnm"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pdnm"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pdnm"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pdnm"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      }
    ],
    "authorContributionMap": {
      "pdnm": 51
    }
  },
  {
    "path": "docs/team/rahul.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "\u003d Rahul Baid - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "\u003d\u003d PROJECT: ePiggy"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "ePiggy is a desktop application designed to inculcate good spending habits in students."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "ePiggy hopes to make managing money much simpler for you with a simple interface and simple commands!"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "At the same time, ePiggy offers everything you need to cultivate good spending habits before entering the workforce,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "from tracking expenses and managing budgets to setting goals! The user interacts with it using a CLI, and it has a GUI created with JavaFX."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "---"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "* *Major enhancements*: added *the ability to search and sort for expenses*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "** What it does: +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " 1. allows the user to search for his/her expenses by either it\u0027s `name`, `cost`, `date` and/or `tag` ! +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " 2. allows the user to sort his/her expenses by either it\u0027s `name`, `cost` or `date` !"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "** Justification: These features improves the product significantly because: +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "1. It becomes more convenient for the user to find a particular expenses or a set of expenses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "to figure out where he/she has been spending"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "2. It becomes more convenient for the user to sort the expenses according to his/her preferences."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "For example, if the user wants to find out where he/she has been spending more, the user can sort it by cost."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "** Highlights: These enhancements are two of the most user-friendly commands in ePiggy, mainly due to their need and adaptability. +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "1. The search feature enhancement have been built on top of the existing functionality. Now it allows multiple keywords search to filter out the"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "expenses. Furthermore, it allows user to enter a range for date and cost. This implementation was quite challenging as it required the complete modification of the existing command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "2. The sort feature enhancement was built from start to finish. It required an in-depth analysis of design alternatives. This new feature greatly adds to the functionality of existing"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "commands (that were modified from address-book level 4)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "* *Minor enhancement*: modified existing help and list commands."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "* *Code contributed*: [https://github.com[RepoSense]] _{https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#search\u003drahulb99\u0026sort\u003ddisplayName\u0026since\u003d2019-02-10\u0026until\u003d2019-04-30\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026repoSort\u003dfalse}_"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "*** Managed product releases on GitHub."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "*** Set up the issue tracker, user stories, and assigned the milestones."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "*** Made `date` an optional keyword while adding an expense"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "   (so now, if the `date` keyword is missing, `date` takes the value of device\u0027s date). (Commit: https://github.com/CS2103-AY1819S2-W17-4/main/pull/135/commits/b974cc12cc700d751de34c80307267d26f5e455e[b974cc] )"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "*** Wrote base tests for any command related to `expense`, in addtion to `findExpenseCommandTest` and `SortExpenseCommandTest` ."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " (Pull requests https://github.com/CS2103-AY1819S2-W17-4/main/pull/135[#135], https://github.com[#00])"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "*** Modified the storage functionality. (Pull Request https://github.com/CS2103-AY1819S2-W17-4/main/pull/20[#20])"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "*** Did some UI changes to `index.html` (main page of our application)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "*** PRs reviewed (https://github.com/CS2103-AY1819S2-W17-4/main/pull/40[#40], https://github.com/CS2103-AY1819S2-W17-4/main/pull/94[#94],"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "https://github.com/CS2103-AY1819S2-W17-4/main/pull/97[#97], https://github.com/CS2103-AY1819S2-W17-4/main/pull/115[#115],"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "https://github.com/CS2103-AY1819S2-W17-4/main/pull/123[#123], https://github.com/CS2103-AY1819S2-W17-4/main/pull/40[#132],"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "https://github.com/CS2103-AY1819S2-W17-4/main/pull/139[#139])"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "*** Contributed to forum discussion (example:  https://github.com/nus-cs2103-AY1819S2/forum/issues/64[#64])"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "*** Set up Travis CI for the team repo."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "*** Set up Netlify for the team repo."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "---"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "include::../UserGuide.adoc"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "\u003d\u003d\u003d Filtering and Sorting Data"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "\u003d\u003d\u003d\u003d Searching for an expense : `search`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "You can search for any expense in the list by specifying either its name, tag, date, range of dates, or range of amount. +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Format: *`findExpense [n/NAME] [t/TAG] [d/DATE_RANGE] [$/AMOUNT RANGE]`* +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "* `search n/MCDONALDS` +"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Displays all entries with the name “MCDONALDS”."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "* `search t/FOOD` +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Displays all entries with the tag specified (in this case, it’s food)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "* `search d/2019/01/02` +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Displays all entries listed on 2nd Jan 2019."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "* `search d/2019/01/02:2020/12/05` +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Displays all entries listed in the range 2nd Jan 2019 to 5th Dec 2020."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "* `search $/250` +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Displays all entries listed with the cost range of $250."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "* `search $/250:500` +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Displays all entries listed with the cost range of $250 to $500."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "****"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "*Additional Information:* +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Searches and displays the expense along with its information, according to the user-specified command. +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "If the entry is not found, it displays an appropriate error message. +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Date format is `yyyy/MM/dd` ."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "****"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "\u003d\u003d\u003d\u003d Sorting the expenses : `sort`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "The user can sort the expenses in the list by name, date added, amount in ascending or descending order. +"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Format: `sort -[n/d/$]/`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "* `sort n/` +"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Sorts all entries by name (in ascending order)."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "* `sort d/` +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Sorts all entries by date in descending order."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "* `sort $/` +"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Sorts all entries by amount in ascending order."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all expenses : `list`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Lists the expense records from newest to oldest. Use this to return to the default view after search/sort commands +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Lists all the user commands with their syntax and descriptions. +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "\u003d\u003d\u003d\u003d Share feature `[coming in v2.0]`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Allows you to share your expenses with anyone, by sending them an email"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "including an attachment of your personal `ePiggy` data in CSV format."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "---"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "include::../DeveloperGuide.adoc"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "\u003d\u003d\u003d Find Expense feature"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "*_ePiggy_* allows the user to filter specific expenses by entering multiple keywords. Expenses that satisfy"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "all the keywords are displayed in the expense list panel."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "* `findExpense n/Nasi Lemak $/4.00 d/2019/04/01 t/lunch`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "The above command finds expense(s) with the `Name` Nasi Lemak, `Cost` of $4.00, purchased on"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "`Date` 1st April, 2019 and tagged with `Tag` lunch."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "`Date` format is `YYYY/MM/DD`."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "All keywords in this command are optional, provided that there is at least one input keyword. For"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "example, suppose we wabt to filter out all `Expense` s with `Cost` between $1 and $10.5 (both inclusive),"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "then the command should be just `findExpense $/1:10.5`."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Similarly for other type of keywords."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Given below is a UML sequence diagram of how the `findExpense` command works along with a step-by-step"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "explanation."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "image::fEuml.png[witdh\u003d\"800\"]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Figure: FindExpenseCommand UML Sequence Diagram +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Step 1: User enters `findExpense n/Nasi Lemak $/4.00 d/2019/04/01 t/lunch`. The command is"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "received by `EPiggyParser` which then creates `FindExpenseCommandParser` object and and calls"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "`FindExpenseCommandParser#parse()` method. +"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Step 2: `FindExpenseCommandParser#parse()` first checks if input is invalid and throws a"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "`ParseException` otherwise it calls `ArgumentTokenizer#tokenize()` to tokenize the `String` input"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " into keywords and store them in an `ArgumentMultimap` Object. +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Step 3: `FindExpenseCommandParser#parse()` method then creates an `ExpenseContainsKeywordsPredicate`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Object. It implements `Predicate\u003cExpense\u003e` interface. It performs the filtering of expenses. +"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Step 4: A `FindExpenseCommand` object is created with `ExpenseContainsKeywordsPredicate` as parameter and"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "returned to `LogicManager`. +"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Step 5: `LogicManager` calls `FindCommand#execute()`,which then calls `Model#updateFilteredExpenseList()`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "method to update the predicate of `FilteredList\u003cExpense\u003e`. `FilteredList` now contains only a set of"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "expenses which was filtered by the new predicate. +"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Step 6: Expense List panel is updated by filtered set of expenses. A `CommandResult` is then created and"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "returned to `LogicManager`."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "\u003d\u003d\u003d Use case: Search expense records"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "1. User requests to search for an expense record."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "2. ePiggy requests user to enter search command."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "3. User enters search command with specific parameters."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "4. ePiggy searches and displays the record(s)."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "+"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "* 1a. Parameter field is empty."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "+"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "** 1a1. ePiggy lists all the expense records."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "+"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "\u003d\u003d\u003d Use case: Sort expense records"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "1. User requests to sort expense records."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "2. ePiggy requests user to enter sort command."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "3. User enters sort command with specific parameters."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "4. ePiggy sorts and displays the record(s)."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "+"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "* 1a. Parameter field is empty."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "+"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "** 1a1. ePiggy lists all the expense records sorted by date added."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "+"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "\u003d\u003d\u003d Use case: Help"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "1. User requests for help."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "2. ePiggy displays a list of all the commands - brief description and syntax."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "+"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "\u003d\u003d PROJECT:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "---"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "_{To be added.}_"
      }
    ],
    "authorContributionMap": {
      "rahulb99": 256
    }
  },
  {
    "path": "docs/team/tehwenyi.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003d Teh Wen Yi - Project Portfolio for ePiggy"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003d\u003d PROJECT: ePiggy"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003d\u003d\u003d About"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "// what specific project task is, what module it is for, whether it is an indiv or grp proj"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "*ePiggy* is a desktop application designed to inculcate good spending habits in students"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "through allowing them to track their finances. It includes everything from tracking expenses, managing budgets"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "to setting goals. +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "It is written in Java. Interactions by users are done through the Command Line Interface (CLI) and it has a Graphical User Interface (GUI) created with JavaFX. +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "It can be used on both Windows and Mac."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003d\u003d\u003d Project Team"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "*_ePiggy_* was designed for twin modules CS2101 and CS2103T. It was transformed from the link:https://github.com/nus-cs2103-AY1819S2/addressbook-level4[AddressBook - Level 4] application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "My team consists of 5 members, including myself. +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "I contributed the `budget` feature of *_ePiggy_*, which allows users to add, edit and delete budgets to track their spendings."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003d\u003d\u003d Purpose"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "This portfolio aims to document my contributions to *_ePiggy_*."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "*_ePiggy_* Github link: https://github.com/CS2103-AY1819S2-W17-4/main"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003d\u003d\u003d Major Enhancements"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Added the entire `budget` feature of ePiggy. +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "* *What it does:*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Allows users to set a limit on their spendings for a specified time period and provide reminders when they are going to or have exceeded the limit. +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Unlike typical expense trackers where only one budget is set, ePiggy\u0027s `budget` feature consists of a list of budgets. This is because the purpose of ePiggy is to inculcate good spending habits in our users, so users should be able to track their previous spendings."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Being able to view their budget history and plan future budgets would fuel this purpose. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "The `budget` feature is visible on the GUI and comprises of 3 commands: `addBudget`, `editBudget` and `deleteBudget`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "* *Justification:*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "The `budget` feature urges users to be more aware of the amount they spend per time period so that they can better manage their expenses and avoid splurging. It is also a good habit we hope to inculcate in users before they enter the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "workforce and deal with larger sums of money. +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "* *Highlights:*"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "** This enhancement was built from scratch. It is completely new and hence required the creation of many new objects including `budget`, `period`, `uniqueBudgetList` and a new `budgetPanel` for the UI. This enhancement required the familiarity with"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "almost all the different aspects of the code (`commons`, `logic`, `model`, `ui`)."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "** Typically, expense trackers only have one budget but I decided it would be better to have a list of budgets instead, so that users can view their budget history and plan future budgets. This is due to the purpose of ePiggy, which is to inculcate"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "good spending habits in our users. Hence, users should be able to track their previous spendings."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "** For this enhancement, the UI is important as the purpose is to constantly remind users of the remaining amount they can spend. It was challenging to make the UI simple and concise for our target users whilst conveying the crucial information."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "* *Functional code contributed:* link:https://github.com/CS2103-AY1819S2-W17-4/main/blob/master/src/main/java/seedu/address/logic/commands/epiggy/AddBudgetCommand.java[Add Budget] | link:https://github.com/CS2103-AY1819S2-W17-4/main/blob/master/src/main/java/seedu/address/logic/commands/epiggy/EditBudgetCommand.java[Edit Budget] | link:https://github.com/CS2103-AY1819S2-W17-4/main/blob/master/src/main/java/seedu/address/logic/commands/epiggy/DeleteBudgetCommand.java[Delete Budget]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "* *Test code contributed*: link:https://github.com/CS2103-AY1819S2-W17-4/main/blob/master/src/test/java/seedu/address/logic/commands/epiggy/AddBudgetCommandTest.java[Add Budget] | link:https://github.com/CS2103-AY1819S2-W17-4/main/blob/master/src/test/java/seedu/address/logic/commands/epiggy/DeleteBudgetCommandTest.java[Delete Budget]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "// ability to write code, explain and justify design choices, solve a user problem/fulfil a user need"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003d\u003d\u003d Minor Enhancements"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "* *Minor enhancement 1*:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Added the UI component for the `budget` feature."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "* *What it does:*"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "Allows users to view all the details and real-time status of the budgets they have added on the GUI. The status of the budgets will update whenever an expense is added, edited or deleted."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "* *Justification:*"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "*_ePiggy_*\u0027s target audience are students, who may be as young as seven years old. Hence, having a simple and concise GUI to engage them while conveying all the crucial information is very important. +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "* *Functional code contributed*: [https://github.com/CS2103-AY1819S2-W17-4/main/blob/master/src/main/java/seedu/address/ui/BudgetPanel.java[Budget Panel]] | [https://github.com/CS2103-AY1819S2-W17-4/main/blob/master/src/main/java/seedu/address/ui/BudgetCard.java[Budget Card]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "* *Test code contributed*:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003d\u003d\u003d Other Contributions"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "** Project Management:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "*** Managed the refactoring of AddressBook to ePiggy"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "*** Standardised and beautified the User Guide"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "**** Designed and added the header and images across the user guide to suit our target user"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "**** Standardised the language and formatting of the user guide"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "**** Checked for grammar and spelling mistakes throughout the user guide"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "*** Standardised and beautified the Developer Guide"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "**** Designed and added the header"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "**** Standardised the language and formatting of the user guide"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "**** Checked for grammar and spelling mistakes throughout the developer guide"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "*** PRs contributed:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "*** Created the *.jar file for ePiggy"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "*** Set up Coveralls."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "** All code contributed:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "**** View the codes I contributed here"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      }
    ],
    "authorContributionMap": {
      "tehwenyi": 114
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.EPiggy;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.ReadOnlyEPiggy;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.SampleEPiggyDataUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.storage.epiggy.EPiggyStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.storage.epiggy.JsonEPiggyStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing EPiggy ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getEPiggyFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        EPiggyStorage ePiggyStorage \u003d new JsonEPiggyStorage(userPrefs.getEPiggyFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        storage \u003d new StorageManager(ePiggyStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        Optional\u003cReadOnlyEPiggy\u003e ePiggyOptional;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        ReadOnlyEPiggy initialData;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            ePiggyOptional \u003d storage.readEPiggy();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            if (!ePiggyOptional.isPresent()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample EPiggy\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            initialData \u003d ePiggyOptional.orElseGet(SampleEPiggyDataUtil::getSampleEPiggy);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty EPiggy\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            initialData \u003d new EPiggy();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty EPiggy\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            initialData \u003d new EPiggy();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty EPiggy\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        logger.info(\"Starting EPiggy \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping ePiggy ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yunjun199321": 1,
      "kev-inc": 12,
      "tehwenyi": 15,
      "-": 166
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 700;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 1000;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tehwenyi": 2,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public static final String MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX \u003d \"The expense index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final String MESSAGE_EXPENSES_LISTED_OVERVIEW \u003d \"%1$d expenses listed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final String MESSAGE_INVALID_BUDGET_DISPLAYED_INDEX \u003d \"The budget index provided is invalid.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public static final String FORMAT_ERROR_MESSAGE \u003d \"Error: Incorrect date format. \\nCorrect data format: dd/mm/yyyy\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE \u003d \"Date format is invalid. Date format should be dd/mm/yyyy.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yunjun199321": 2,
      "pdnm": 2,
      "tehwenyi": 2,
      "-": 14,
      "rahulb99": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.ReadOnlyEPiggy;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.epiggy.Budget;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.model.epiggy.Expense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Goal;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.item.Cost;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Returns the EPiggy."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * @see seedu.address.model.Model#getEPiggy()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    ReadOnlyEPiggy getEPiggy();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    ObservableList\u003cExpense\u003e getFilteredExpenseList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    ObservableList\u003cBudget\u003e getFilteredBudgetList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    ObservableValue\u003cCost\u003e getSavings();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    ObservableValue\u003cGoal\u003e getGoal();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of commands entered by the user."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The list is ordered from the least recent command to the most recent command."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cString\u003e getHistory();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    Path getEPiggyFilePath();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selected person in the filtered person list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no person is selected."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#selectedPersonProperty()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     * Selected expense in the filtered expense list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     * null if no expense is selected."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     * @see seedu.address.model.Model#selectedExpenseProperty()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    ReadOnlyProperty\u003cExpense\u003e selectedExpenseProperty();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the selected person in the filtered person list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedPerson(Person)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    void setSelectedPerson(Person person);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Sets the current budget."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * @see seedu.address.model.Model#addBudget(Budget)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    void setCurrentBudget(Budget budget);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Adds a new budget."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * @see seedu.address.model.Model#addBudget(Budget)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    void addBudget(int index, Budget budget);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     * Sets the selected expense in the filtered person list."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedExpense(Expense)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    void setSelectedExpense(Expense expense);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 8,
      "pdnm": 19,
      "tehwenyi": 22,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.parser.EPiggyParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.ReadOnlyEPiggy;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.epiggy.Budget;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.model.epiggy.Expense;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Goal;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.item.Cost;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private final EPiggyParser ePiggyParser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean addressBookModified;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        ePiggyParser \u003d new EPiggyParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set addressBookModified to true whenever the models\u0027 address book is modified."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        model.getEPiggy().addListener(observable -\u003e addressBookModified \u003d true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookModified \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            Command command \u003d ePiggyParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            commandResult \u003d command.execute(model, history);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (addressBookModified) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            logger.info(\"ePiggy modified, saving to file.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                storage.saveEPiggy(model.getEPiggy());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public ReadOnlyEPiggy getEPiggy() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return model.getEPiggy();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        return model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public ObservableList\u003cBudget\u003e getFilteredBudgetList() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return model.getFilteredBudgetList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public ObservableValue\u003cCost\u003e getSavings() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return model.getSavings();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public ObservableValue\u003cGoal\u003e getGoal() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return model.getGoal();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public Path getEPiggyFilePath() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return model.getEPiggyFilePath();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.selectedPersonProperty();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setSelectedPerson(person);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public void setSelectedExpense(Expense expense) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        model.setSelectedExpense(expense);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void setCurrentBudget(Budget budget) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        model.setCurrentBudget(budget); }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void addBudget(int index, Budget budget) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        model.addBudget(index, budget); }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public ReadOnlyProperty\u003cExpense\u003e selectedExpenseProperty() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        return model.selectedExpenseProperty();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 13,
      "pdnm": 16,
      "tehwenyi": 27,
      "-": 96
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    // TODO: Modify add command and pass all the JUnit test cases."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"a\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            + \": Adds an expense to the ePiggy. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            + PREFIX_NAME + \"EXPENSE NAME \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            + PREFIX_COST + \"COST \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            + PREFIX_CATEGORY + \"CATEGORY \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            + PREFIX_PHONE + \"9820304 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            + PREFIX_EMAIL + \"123@nus.edu.sg \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            + PREFIX_TAG + \"Lunch\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New expense added: %1$s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    //    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXPENSE \u003d \"This expense already exists int he address book\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            //throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        model.commitEPiggy();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yunjun199321": 20,
      "kev-inc": 1,
      "tehwenyi": 3,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.EPiggy;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"c\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        model.setEPiggy(new EPiggy());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        model.commitEPiggy();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 1,
      "tehwenyi": 3,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Help information should be shown to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Summary should be shown to the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private boolean showSummary;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * TODO: TO ADD SUMMARY BUTTON TO THE GUI."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean summary) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        this.showSummary \u003d summary;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public boolean isSummary() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        return showSummary;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return \"CommandResult{\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                + \"feedbackToUser\u003d\u0027\" + feedbackToUser + \u0027\\\u0027\u0027"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                + \", showHelp\u003d\" + showHelp"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                + \", exit\u003d\" + exit"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                + \", showSummary\u003d\" + showSummary"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                + \u0027}\u0027;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yunjun199321": 26,
      "-": 69,
      "rahulb99": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"d\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        model.commitEPiggy();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 1,
      "tehwenyi": 1,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"ed\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        model.commitEPiggy();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 1,
      "tehwenyi": 1,
      "-": 227
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"ex\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting ePiggy as requested ...\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 1,
      "tehwenyi": 1,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"f\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 1,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"hp\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 1,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"hs\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e previousCommands \u003d new ArrayList\u003c\u003e(history.getHistory());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 1,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "//@@author rahulb99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"l\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all expenses.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        model.updateFilteredExpensesList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "rahulb99": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"r\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        if (!model.canRedoEPiggy()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        model.redoEPiggy();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 1,
      "tehwenyi": 2,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.epiggy.Expense;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Selects a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Selects the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        List\u003cExpense\u003e filteredExpenseList \u003d model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredExpenseList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        model.setSelectedExpense(filteredExpenseList.get(targetIndex.getZeroBased()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 1,
      "-": 51,
      "rahulb99": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previous state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"u\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        if (!model.canUndoEPiggy()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        model.undoEPiggy();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 1,
      "tehwenyi": 2,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/epiggy/AddAllowanceCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "package seedu.address.logic.commands.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Allowance;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " * Adds an allowance to ePiggy."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "public class AddAllowanceCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addAllowance\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"aA\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an allowance to the expense book. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            + PREFIX_NAME + \"ALLOWANCE NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            + PREFIX_COST + \"AMOUNT \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            + PREFIX_NAME + \"From Mummy \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            + PREFIX_COST + \"30 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            + PREFIX_TAG + \"Weekly \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            + PREFIX_DATE + \"31/02/2019 \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New allowance added: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private final Allowance toAdd;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public AddAllowanceCommand(Allowance toAdd) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        model.addAllowance(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        model.commitEPiggy();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 53,
      "tehwenyi": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/epiggy/AddBudgetCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "package seedu.address.logic.commands.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERIOD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.model.epiggy.UniqueBudgetList.MAXIMUM_SIZE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.epiggy.Budget;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " * Sets a budget for the total expenses."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "public class AddBudgetCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addBudget\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"ab\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            + \": Sets a budget for ePiggy. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            + PREFIX_COST + \"BUDGET_IN_DOLLARS \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            + PREFIX_PERIOD + \"TIME_PERIOD_IN_DAYS \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            + PREFIX_DATE + \"START_DATE_IN_DD/MM/YYYY \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            + PREFIX_COST + \"500 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            + PREFIX_PERIOD + \"30 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            + PREFIX_DATE + \"01/04/2019\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Budget is set at:\\n%1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final String MESSAGE_FAIL \u003d \"Budget is too old to be added.\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            + \" The budget list can only accommodate a maximum of \" + MAXIMUM_SIZE"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            + \" budgets. \\nIf you wish to add this budget,\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            + \" please delete one of the existing budgets and add this budget again.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final String MESSAGE_OVERLAPPING_BUDGET \u003d \"Budgets should not overlap.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            + \"Please ensure that the start date of the edited budget \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            + \"is later than the end date of the previous budget.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private final Budget toAdd;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public AddBudgetCommand(Budget budget) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        toAdd \u003d budget;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Date startDate \u003d toAdd.getStartDate();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Date endDate \u003d toAdd.getEndDate();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        List\u003cBudget\u003e currentList \u003d model.getFilteredBudgetList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        if (currentList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            model.addBudget(0, toAdd);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            model.commitEPiggy();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Budget earlierBudget;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Budget laterBudget \u003d currentList.get(0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        while (index \u003c currentList.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            earlierBudget \u003d currentList.get(index);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            if (index \u003e 0) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                laterBudget \u003d currentList.get(index - 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            if (model.budgetsOverlap(startDate, endDate, earlierBudget)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                throw new CommandException(MESSAGE_OVERLAPPING_BUDGET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            if (!startDate.before(earlierBudget.getEndDate())) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                if (index \u003d\u003d 0 || !endDate.after(laterBudget.getStartDate())) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                    model.addBudget(index, toAdd);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                    model.commitEPiggy();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                    return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                    throw new CommandException(MESSAGE_OVERLAPPING_BUDGET);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        if (index \u003c MAXIMUM_SIZE) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            model.addBudget(index, toAdd);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            model.commitEPiggy();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return new CommandResult(MESSAGE_FAIL);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                || (other instanceof AddBudgetCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddBudgetCommand) other).toAdd));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tehwenyi": 106
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/epiggy/AddExpenseCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pdnm"
        },
        "content": "package seedu.address.logic.commands.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.model.epiggy.Expense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pdnm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pdnm"
        },
        "content": " * Adds a person to the toAdd book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pdnm"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pdnm"
        },
        "content": "public class AddExpenseCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addExpense\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"aE\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an expense to the expense book. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            + PREFIX_NAME + \"EXPENSE NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            + PREFIX_COST + \"COST \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            + PREFIX_NAME + \"Chicken Rice \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            + PREFIX_COST + \"3.50 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            + PREFIX_TAG + \"Lunch\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            + PREFIX_DATE + \"31/02/2019 \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New expense added: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    private final Expense toAdd;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public AddExpenseCommand(Expense expense) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        this.toAdd \u003d expense;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        model.addExpense(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        model.commitEPiggy();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pdnm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 15,
      "pdnm": 35,
      "tehwenyi": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/epiggy/DeleteAllowanceCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "package seedu.address.logic.commands.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Allowance;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Expense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " * Deletes an allowance in epiggy."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "public class DeleteAllowanceCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteAllowance\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"da\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            + \": Deletes the allowance identified by the index number used in the displayed expense list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String MESSAGE_DELETE_ALLOWANCE_SUCCESS \u003d \"Deleted allowance: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String MESSAGE_INDEX_OUT_OF_BOUNDS \u003d \"The index does not exist on the expense list.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String MESSAGE_ITEM_NOT_ALLOWANCE \u003d \"The item selected is not an allowance. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            + \"Please use \" + DeleteExpenseCommand.COMMAND_WORD + \" to delete expenses and \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            + COMMAND_WORD + \" to delete allowances.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public DeleteAllowanceCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        List\u003cExpense\u003e lastShownExpenseList \u003d model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownExpenseList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new CommandException(MESSAGE_INDEX_OUT_OF_BOUNDS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        Expense expenseToDelete \u003d lastShownExpenseList.get(this.targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        if (!(expenseToDelete instanceof Allowance)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new CommandException(MESSAGE_ITEM_NOT_ALLOWANCE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        model.deleteExpense(expenseToDelete);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        model.commitEPiggy();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ALLOWANCE_SUCCESS, expenseToDelete));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/epiggy/DeleteBudgetCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "package seedu.address.logic.commands.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.epiggy.Budget;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " * Edits the current budget in ePiggy."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "public class DeleteBudgetCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteBudget\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"db\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            + \": Deletes the budget identified by the index number used in the displayed budget list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final String MESSAGE_DELETE_BUDGET_SUCCESS \u003d \"Deleted budget:\\n%1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final String MESSAGE_INDEX_OUT_OF_BOUNDS \u003d \"The index does not exist on the budget list.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public DeleteBudgetCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        List\u003cBudget\u003e lastShownBudgetList \u003d model.getFilteredBudgetList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownBudgetList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BUDGET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Budget budgetToDelete \u003d lastShownBudgetList.get(this.targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        model.deleteBudgetAtIndex(this.targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        model.commitEPiggy();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_BUDGET_SUCCESS, budgetToDelete));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                || (other instanceof DeleteBudgetCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteBudgetCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tehwenyi": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/epiggy/DeleteExpenseCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pdnm"
        },
        "content": "package seedu.address.logic.commands.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Allowance;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.model.epiggy.Expense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pdnm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pdnm"
        },
        "content": " * Delete an expense in ePiggy."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pdnm"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pdnm"
        },
        "content": "public class DeleteExpenseCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteExpense\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"de\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            + \": Deletes the expense identified by the index number used in the displayed expense list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String MESSAGE_DELETE_EXPENSE_SUCCESS \u003d \"Deleted expense: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String MESSAGE_INDEX_OUT_OF_BOUNDS \u003d \"The index does not exist on the expense list.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String MESSAGE_ITEM_NOT_EXPENSE \u003d \"The item selected is not an expense. \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            + \"Please use \" + COMMAND_WORD + \" to delete expenses and \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            + DeleteAllowanceCommand.COMMAND_WORD + \" to delete allowances.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public DeleteExpenseCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        List\u003cExpense\u003e lastShownExpenseList \u003d model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownExpenseList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            throw new CommandException(MESSAGE_INDEX_OUT_OF_BOUNDS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        Expense expenseToDelete \u003d lastShownExpenseList.get(this.targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        if (expenseToDelete instanceof Allowance) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new CommandException(MESSAGE_ITEM_NOT_EXPENSE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        model.deleteExpense(expenseToDelete);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        model.commitEPiggy();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_EXPENSE_SUCCESS, expenseToDelete));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pdnm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 9,
      "pdnm": 48,
      "tehwenyi": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/epiggy/EditAllowanceCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "package seedu.address.logic.commands.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Allowance;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Expense;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " * Edits the details of an existing allowance."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "public class EditAllowanceCommand extends EditExpenseCommand {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editAllowance\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"eA\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the allowance identified \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            + \"by the index number used in the displayed expense list. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            + \"[\" + PREFIX_COST + \"COST] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            + PREFIX_COST + \"5 \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String MESSAGE_EDIT_ALLOWANCE_SUCCESS \u003d \"Edited Allowance: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private static final String MESSAGE_ITEM_NOT_ALLOWANCE \u003d \"The item selected is not an allowance. \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            + \"Please use \" + EditExpenseCommand.COMMAND_WORD + \" to edit expenses and \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            + COMMAND_WORD + \" to edit allowances.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * @param index                 of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * @param editExpenseDescriptor details to edit the person with"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public EditAllowanceCommand(Index index, EditExpenseDescriptor editExpenseDescriptor) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        super(index, editExpenseDescriptor);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        List\u003cExpense\u003e lastShownList \u003d model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        if (super.index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        Expense toEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        if (!(toEdit instanceof Allowance)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new CommandException(MESSAGE_ITEM_NOT_ALLOWANCE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        Expense editedExpense \u003d createEditedExpense(toEdit, editExpenseDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        model.setExpense(toEdit, editedExpense);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        model.commitEPiggy();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ALLOWANCE_SUCCESS, editedExpense));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/epiggy/EditBudgetCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "package seedu.address.logic.commands.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.epiggy.AddBudgetCommand.MESSAGE_OVERLAPPING_BUDGET;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERIOD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BUDGETS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.epiggy.Budget;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.model.epiggy.item.Cost;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.model.epiggy.item.Period;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " * Edits the current budget in ePiggy."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "public class EditBudgetCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editBudget\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"eb\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    // TODO MESSAGE_USAGE should come out"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the current budget. \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            + \"Parameters: [\" + PREFIX_COST + \"BUDGET_IN_DOLLARS] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            + \"[\" + PREFIX_PERIOD + \"TIME_PERIOD_IN_DAYS] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"START_DATE_IN_DD/MM/YYYY] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            + PREFIX_COST + \"200 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            + PREFIX_PERIOD + \"7\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final String MESSAGE_EDIT_BUDGET_SUCCESS \u003d \"Current budget updated:\\n%1$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final String MESSAGE_EDIT_BUDGET_DOES_NOT_EXIST_FAIL \u003d \"Only the current budget can be edited.\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            + \" There is no current budget to be edited.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"Budget not edited as there are no changes.\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            + MESSAGE_USAGE;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private final EditBudgetDetails editBudgetDetails;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public EditBudgetCommand(EditBudgetDetails editBudgetDetails) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        requireNonNull(editBudgetDetails);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        this.editBudgetDetails \u003d editBudgetDetails;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        List\u003cBudget\u003e lastShownBudgetList \u003d model.getFilteredBudgetList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        int indexOfCurrentBudget \u003d model.getCurrentBudgetIndex();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        if (indexOfCurrentBudget \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new CommandException(MESSAGE_EDIT_BUDGET_DOES_NOT_EXIST_FAIL);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Budget budgetToEdit \u003d lastShownBudgetList.get(indexOfCurrentBudget);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Budget editedBudget \u003d createEditedBudget(budgetToEdit, editBudgetDetails);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        if (lastShownBudgetList.size() \u003e 1) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            // If the budget is not the latest budget"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            if (indexOfCurrentBudget \u003e 0) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                Budget laterBudget \u003d lastShownBudgetList.get(indexOfCurrentBudget - 1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                if (editedBudget.getEndDate().after(laterBudget.getStartDate())) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                    throw new CommandException(MESSAGE_OVERLAPPING_BUDGET);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            // If the budget is not the earliest budget"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            if (indexOfCurrentBudget \u003c lastShownBudgetList.size() - 1) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                Budget earlierBudget \u003d lastShownBudgetList.get(indexOfCurrentBudget + 1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                if (editedBudget.getStartDate().before(earlierBudget.getEndDate())) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                    throw new CommandException(MESSAGE_OVERLAPPING_BUDGET);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        model.setCurrentBudget(editedBudget);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        model.updateFilteredBudgetList(PREDICATE_SHOW_ALL_BUDGETS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        model.commitEPiggy();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_BUDGET_SUCCESS, editedBudget));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Creates and returns a {@code Budget} with the details of {@code budgetToEdit}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * edited with {@code editBudgetDetails}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static Budget createEditedBudget(Budget budgetToEdit, EditBudgetDetails editBudgetDetails) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assert budgetToEdit !\u003d null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Cost updatedAmount \u003d editBudgetDetails.getAmount().orElse(budgetToEdit.getBudgetedAmount());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Date updatedStartDate \u003d editBudgetDetails.getStartDate().orElse((budgetToEdit.getStartDate()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Period updatedPeriod \u003d editBudgetDetails.getPeriod().orElse(budgetToEdit.getPeriod());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return new Budget(updatedAmount, updatedPeriod, updatedStartDate);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        if (!(other instanceof EditBudgetCommand)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        EditBudgetCommand e \u003d (EditBudgetCommand) other;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return this.editBudgetDetails.equals(e.editBudgetDetails);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static class EditBudgetDetails {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        private Cost amount;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        private Date startDate;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        private Period period;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public EditBudgetDetails() {}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public EditBudgetDetails(EditBudgetDetails toCopy) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            setAmount(toCopy.amount);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            setStartDate(toCopy.startDate);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            setPeriod(toCopy.period);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            return CollectionUtil.isAnyNonNull(amount, startDate, period);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        public void setAmount(Cost amount) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            this.amount \u003d amount;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void setStartDate(Date startDate) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void setPeriod(Period period) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            this.period \u003d period;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        public Optional\u003cCost\u003e getAmount() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            return Optional.ofNullable(amount);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public Optional\u003cDate\u003e getStartDate() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            return Optional.ofNullable(startDate);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public Optional\u003cPeriod\u003e getPeriod() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            return Optional.ofNullable(period);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            if (!(other instanceof EditBudgetDetails)) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            EditBudgetDetails e \u003d (EditBudgetDetails) other;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            return getAmount().equals(e.getAmount())"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                    \u0026\u0026 getStartDate().equals(e.getStartDate())"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                    \u0026\u0026 getPeriod().equals(e.getPeriod());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            return new String(\"Amount of $\" + amount + \" and period of \" + period"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                    + \" starting from \" + startDate);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pdnm": 5,
      "tehwenyi": 196
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/epiggy/EditExpenseCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pdnm"
        },
        "content": "package seedu.address.logic.commands.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Allowance;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.model.epiggy.Expense;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.model.epiggy.item.Cost;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.model.epiggy.item.Item;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.model.epiggy.item.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pdnm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pdnm"
        },
        "content": " * Edits the details of an existing expense."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pdnm"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pdnm"
        },
        "content": "public class EditExpenseCommand extends Command {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editExpense\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"eE\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the expense identified \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            + \"by the index number used in the displayed expense list. \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            + \"[\" + PREFIX_COST + \"COST] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            + PREFIX_COST + \"5 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            + PREFIX_TAG + \"food\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public static final String MESSAGE_EDIT_EXPENSE_SUCCESS \u003d \"Edited Expense: %1$s\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private static final String MESSAGE_ITEM_NOT_EXPENSE \u003d \"The item selected is not an expense. \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            + \"Please use \" + COMMAND_WORD + \" to edit expenses and \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            + EditAllowanceCommand.COMMAND_WORD + \" to edit allowances.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    final Index index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    final EditExpenseDescriptor editExpenseDescriptor;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     * @param editExpenseDescriptor details to edit the person with"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public EditExpenseCommand(Index index, EditExpenseDescriptor editExpenseDescriptor) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        requireNonNull(editExpenseDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        this.editExpenseDescriptor \u003d new EditExpenseDescriptor(editExpenseDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        List\u003cExpense\u003e lastShownList \u003d model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        Expense toEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        if (toEdit instanceof Allowance) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new CommandException(MESSAGE_ITEM_NOT_EXPENSE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        Expense editedExpense \u003d createEditedExpense(toEdit, editExpenseDescriptor);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        model.setExpense(toEdit, editedExpense);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        model.commitEPiggy();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     * Creates and returns a {@code Expense} with the details of {@code expenseToEdit}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     * edited with {@code editExpenseDescriptor}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    static Expense createEditedExpense(Expense expenseToEdit, EditExpenseDescriptor editExpenseDescriptor) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        assert expenseToEdit !\u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        Name updatedName \u003d editExpenseDescriptor.getName().orElse(expenseToEdit.getItem().getName());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        Cost updatedCost \u003d editExpenseDescriptor.getCost().orElse(expenseToEdit.getItem().getCost());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        Date updatedDate \u003d editExpenseDescriptor.getDate().orElse(expenseToEdit.getDate());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editExpenseDescriptor.getTags().orElse(expenseToEdit.getItem().getTags());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        if (expenseToEdit instanceof Allowance) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            return new Allowance(new Item(updatedName, updatedCost, updatedTags), updatedDate);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        return new Expense(new Item(updatedName, updatedCost, updatedTags), updatedDate);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        if (!(other instanceof EditExpenseCommand)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        EditExpenseCommand e \u003d (EditExpenseCommand) other;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pdnm"
        },
        "content": "                \u0026\u0026 editExpenseDescriptor.equals(e.editExpenseDescriptor);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public static class EditExpenseDescriptor {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        private seedu.address.model.epiggy.item.Name name;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        private Cost cost;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        private Date date;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        public EditExpenseDescriptor() {}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pdnm"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pdnm"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pdnm"
        },
        "content": "         */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        public EditExpenseDescriptor(EditExpenseDescriptor toCopy) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            setCost(toCopy.cost);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pdnm"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pdnm"
        },
        "content": "         */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, cost, date, tags);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        public void setName(seedu.address.model.epiggy.item.Name name) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        public void setCost(Cost cost) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            this.cost \u003d cost;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        public void setDate(Date date) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pdnm"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pdnm"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "pdnm"
        },
        "content": "         */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        public Optional\u003cseedu.address.model.epiggy.item.Name\u003e getName() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        public Optional\u003cCost\u003e getCost() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            return Optional.ofNullable(cost);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        public Optional\u003cDate\u003e getDate() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "pdnm"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "pdnm"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "pdnm"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "pdnm"
        },
        "content": "         */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "pdnm"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            if (!(other instanceof EditExpenseDescriptor)) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "pdnm"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            EditExpenseDescriptor e \u003d (EditExpenseDescriptor) other;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "pdnm"
        },
        "content": "                    \u0026\u0026 getCost().equals(e.getCost())"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "pdnm"
        },
        "content": "                    \u0026\u0026 getDate().equals(e.getDate())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "pdnm"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "pdnm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 14,
      "pdnm": 209,
      "tehwenyi": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/epiggy/FindExpenseCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "package seedu.address.logic.commands.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EXPENSES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.epiggy.ExpenseContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "//@@author rahulb99"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " * Finds and lists all expenses in EPiggy whose expense contains any of the argument keywords."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "public class FindExpenseCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findExpense\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"fE\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            + \" : Finds the expense as specified by the user. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            + \" The keywords do not need to be in order.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            + \" Parameters: [n/NAME] [$/COST:COST] [t/TAG] [d/DATE:DATE]...\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            + \" Example: \" + COMMAND_WORD + \" n/Mala Hotpot t/lunch t/food $/7.00:15.00 d/14-03-2019:17-03-2019\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d MESSAGE_EXPENSES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    private final ExpenseContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public FindExpenseCommand(ExpenseContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        model.updateFilteredExpensesList(predicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        model.commitEPiggy();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                String.format(MESSAGE_SUCCESS, model.getFilteredExpenseList().size()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                || (other instanceof FindExpenseCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindExpenseCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rahulb99": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/epiggy/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "package seedu.address.logic.commands.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " * Lists all the commands with their brief description and syntax."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"hp\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * Execute `help` command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rahulb99": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/epiggy/ReportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "package seedu.address.logic.commands.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.ui.ReportWindow;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": " * Shows summary to the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "public class ReportCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"report\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"rp\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            + \": Shows report to the user.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            + PREFIX_DATE + \"SPECIFY DATE, MONTH OR YEAR \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            + PREFIX_DATE + \"21/03/2019\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            + PREFIX_DATE + \"03/2019\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            + PREFIX_DATE + \"2019\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Showed report.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private String type \u003d \"ALL\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Constructor with chart type."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * @param date"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public ReportCommand(LocalDate date, String type) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        ReportWindow summaryWindow \u003d new ReportWindow();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        summaryWindow.displayReportController(model, date, type);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yunjun199321": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/epiggy/ReverseListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "package seedu.address.logic.commands.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "//@@author rahulb99"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " * Lists all Expenses in reverse order to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "public class ReverseListCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"reverseList\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"rl\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all expenses in reverse.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        model.reverseFilteredExpensesList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        model.updateFilteredExpensesList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rahulb99": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/epiggy/SetGoalCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "package seedu.address.logic.commands.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Goal;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " * Set goal amount and name."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "public class SetGoalCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"setGoal\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"sg\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            + \": Sets a goal that you would like to reach. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            + PREFIX_NAME + \"GOAL NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            + PREFIX_COST + \"GOAL AMOUNT\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            + PREFIX_NAME + \"Nike shoe \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            + PREFIX_COST + \"79\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Goal set: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private final Goal toSet;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public SetGoalCommand(Goal toSet) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        requireNonNull(toSet);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        this.toSet \u003d toSet;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        model.setGoal(toSet);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        model.commitEPiggy();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toSet));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 43,
      "tehwenyi": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/epiggy/SortExpenseCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "package seedu.address.logic.commands.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.epiggy.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "//@@author rahulb99"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " * Finds and lists all expenses in EPiggy whose expense contains any of the argument keywordss."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " * keywords matching is case insensitive."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "public class SortExpenseCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sortExpense\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"sE\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            + \" : Sorts the expenses as specified by the user, according to name, cost, date or tag. \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            + \" Parameters: -[n/d/$]/...\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            + \" Example: \" + COMMAND_WORD + \" n/\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Sorted %1$d Expenses...\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    private final Comparator\u003cExpense\u003e expenseComparator;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public SortExpenseCommand(Comparator\u003cExpense\u003e expenseComparator) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        assert expenseComparator !\u003d null : \"keywords should not be null.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        this.expenseComparator \u003d expenseComparator;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        model.sortExpenses(expenseComparator);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        model.updateFilteredExpensesList(Model.PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        model.commitEPiggy();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                String.format(MESSAGE_SUCCESS, model.getFilteredExpenseList().size()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public Comparator\u003cExpense\u003e getExpenseComparator() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return expenseComparator;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rahulb99": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/epiggy/ViewGoalCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "package seedu.address.logic.commands.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Goal;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.item.Cost;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " * Views the current goal set."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "public class ViewGoalCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewGoal\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"vg\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": View your goal set. \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Your current goal is: %1$s\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String MESSAGE_SAVINGS_LESS_THAN_GOAL \u003d \"$%2$s more to go!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String MESSAGE_SAVINGS_MORE_THAN_GOAL \u003d \"You have reached your savings goal! Congratulations!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        SimpleObjectProperty\u003cCost\u003e savings \u003d model.getSavings();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        SimpleObjectProperty\u003cGoal\u003e goal \u003d model.getGoal();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        double goalAmount \u003d goal.getValue().getAmount().getAmount();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        double savingsAmount \u003d savings.getValue().getAmount();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        double diff \u003d goalAmount - savingsAmount;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        if (diff \u003c 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                    + MESSAGE_SAVINGS_MORE_THAN_GOAL, goal.getValue()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                    + MESSAGE_SAVINGS_LESS_THAN_GOAL, goal.getValue(), diff));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 48,
      "pdnm": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/epiggy/ViewSavingsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "package seedu.address.logic.commands.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.item.Cost;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " * Allows the user to view the savings recorded in ePiggy."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "public class ViewSavingsCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewSavings\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"vs\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": View your savings. \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Your savings are %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        SimpleObjectProperty\u003cCost\u003e savings \u003d model.getSavings();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, savings.getValue()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public static final Prefix PREFIX_COST \u003d new Prefix(\"$/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public static final Prefix PREFIX_CATEGORY \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final Prefix PREFIX_PERIOD \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public static final Prefix PREFIX_TYPE \u003d new Prefix(\"type/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yunjun199321": 5,
      "tehwenyi": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EPiggyParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.commands.epiggy.AddAllowanceCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.commands.epiggy.AddBudgetCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.commands.epiggy.AddExpenseCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.commands.epiggy.DeleteAllowanceCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.commands.epiggy.DeleteBudgetCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.logic.commands.epiggy.DeleteExpenseCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.commands.epiggy.EditAllowanceCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.commands.epiggy.EditBudgetCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.logic.commands.epiggy.EditExpenseCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.commands.epiggy.FindExpenseCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.commands.epiggy.ReportCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.commands.epiggy.ReverseListCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.commands.epiggy.SetGoalCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.commands.epiggy.SortExpenseCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.commands.epiggy.ViewGoalCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.commands.epiggy.ViewSavingsCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.parser.epiggy.AddAllowanceCommandParser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.parser.epiggy.AddBudgetCommandParser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.logic.parser.epiggy.AddExpenseCommandParser;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.parser.epiggy.DeleteAllowanceCommandParser;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.parser.epiggy.DeleteBudgetCommandParser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.logic.parser.epiggy.DeleteExpenseCommandParser;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.parser.epiggy.EditAllowanceCommandParser;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.parser.epiggy.EditBudgetCommandParser;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.logic.parser.epiggy.EditExpenseCommandParser;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.parser.epiggy.FindExpenseCommandParser;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.logic.parser.epiggy.ReportCommandParser;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.parser.epiggy.SetGoalCommandParser;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.parser.epiggy.SortExpenseCommandParser;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "public class EPiggyParser {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        case AddExpenseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        case AddExpenseCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            return new AddExpenseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        case EditExpenseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        case EditExpenseCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            return new EditExpenseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        case DeleteExpenseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        case DeleteExpenseCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            return new DeleteExpenseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        case AddAllowanceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        case AddAllowanceCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            return new AddAllowanceCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        case EditAllowanceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        case EditAllowanceCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            return new EditAllowanceCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        case DeleteAllowanceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        case DeleteAllowanceCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            return new DeleteAllowanceCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        case ViewSavingsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        case ViewSavingsCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            return new ViewSavingsCommand();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        case AddCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        case EditCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        case FindExpenseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        case FindExpenseCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            return new FindExpenseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        case SortExpenseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        case SortExpenseCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            return new SortExpenseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        case ReverseListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        case ReverseListCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            return new ReverseListCommand();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        case SelectCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        case DeleteCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        case ClearCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        case FindCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        case ListCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        case HistoryCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        case ExitCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        case HelpCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        case AddBudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        case AddBudgetCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            return new AddBudgetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        case EditBudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        case EditBudgetCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            return new EditBudgetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        case DeleteBudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        case DeleteBudgetCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            return new DeleteBudgetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        case SetGoalCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        case SetGoalCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            return new SetGoalCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        case ViewGoalCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        case ViewGoalCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            return new ViewGoalCommand();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        case UndoCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        case RedoCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        case ReportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        case ReportCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            if (arguments.equals(\"\")) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                return new ReportCommandParser().parse(\"\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                return new ReportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yunjun199321": 9,
      "kev-inc": 48,
      "pdnm": 17,
      "tehwenyi": 19,
      "-": 76,
      "rahulb99": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.model.epiggy.item.Cost;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.model.epiggy.item.Period;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static seedu.address.model.epiggy.item.Name parseItemName(String name) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        if (!seedu.address.model.epiggy.item.Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new ParseException(seedu.address.model.epiggy.item.Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        return new seedu.address.model.epiggy.item.Name(trimmedName);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     * Parses a {@code String cost} into a {@code Cost}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public static Cost parseCost(String cost) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        requireNonNull(cost);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        String trimmedCost \u003d cost.trim();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        if (!Cost.isValidCost(trimmedCost)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            throw new ParseException(Cost.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        return new Cost(Double.parseDouble(trimmedCost));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Parses a {@code String Date} into a {@code Date}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static Date parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        Date parsedDate;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // TODO add more forms of setting date eg. dd.mm.yyyy"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        dateFormat.setLenient(false);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            parsedDate \u003d dateFormat.parse(date.trim());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        } catch (java.text.ParseException parseException) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return parsedDate;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Parses a {@code String period} into a {@code Period}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static Period parsePeriod(String period) throws ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        requireNonNull(period);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        String trimmedPeriod \u003d period.trim();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        if (!Period.isValidPeriod(trimmedPeriod)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new ParseException(Period.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return new Period(Integer.parseInt(trimmedPeriod));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 6,
      "pdnm": 22,
      "tehwenyi": 33,
      "-": 124,
      "rahulb99": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/epiggy/AddAllowanceCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "package seedu.address.logic.parser.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.commands.epiggy.AddAllowanceCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Allowance;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.model.epiggy.item.Cost;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.item.Item;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.item.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " * Parses input arguments and creates a new AddAllowanceCommand object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "public class AddAllowanceCommandParser implements Parser\u003cAddAllowanceCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public AddAllowanceCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_COST, PREFIX_DATE, PREFIX_TAG);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_COST)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAllowanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        Name name \u003d ParserUtil.parseItemName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        Cost cost \u003d ParserUtil.parseCost(argMultimap.getValue(PREFIX_COST).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        Date date \u003d new Date();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_DATE)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        tagList.add(new Tag(\"Allowance\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        Item item \u003d new Item(name, cost, tagList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        Allowance allowance \u003d new Allowance(item, date);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return new AddAllowanceCommand(allowance);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 58,
      "pdnm": 2,
      "tehwenyi": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/epiggy/AddBudgetCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "package seedu.address.logic.parser.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERIOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.commands.epiggy.AddBudgetCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.epiggy.Budget;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.model.epiggy.item.Cost;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.model.epiggy.item.Period;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "public class AddBudgetCommandParser implements Parser\u003cAddBudgetCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddBudgetCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * and returns an AddBudgetCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public AddBudgetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_COST, PREFIX_PERIOD, PREFIX_DATE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_COST, PREFIX_PERIOD, PREFIX_DATE)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddBudgetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Cost budgetAmount \u003d ParserUtil.parseCost(argMultimap.getValue(PREFIX_COST).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Period period \u003d ParserUtil.parsePeriod(argMultimap.getValue(PREFIX_PERIOD).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Budget budget \u003d new Budget(budgetAmount, period, date);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return new AddBudgetCommand(budget);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pdnm": 2,
      "tehwenyi": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/epiggy/AddExpenseCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pdnm"
        },
        "content": "package seedu.address.logic.parser.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.logic.commands.epiggy.AddExpenseCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.model.epiggy.Expense;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.epiggy.item.Cost;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.model.epiggy.item.Item;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.model.epiggy.item.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pdnm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pdnm"
        },
        "content": " * Parses input arguments and creates a new AddExpenseCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pdnm"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pdnm"
        },
        "content": "public class AddExpenseCommandParser implements Parser\u003cAddExpenseCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddExpenseCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public AddExpenseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pdnm"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_COST, PREFIX_DATE, PREFIX_TAG);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_COST)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pdnm"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddExpenseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        Name name \u003d ParserUtil.parseItemName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        Cost cost \u003d ParserUtil.parseCost(argMultimap.getValue(PREFIX_COST).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        Date date \u003d new Date();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_DATE)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        tagList.add(new Tag(\"Expense\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        Item item \u003d new Item(name, cost, tagList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        Expense expense \u003d new Expense(item, date);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        return new AddExpenseCommand(expense);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pdnm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 2,
      "pdnm": 57,
      "tehwenyi": 1,
      "rahulb99": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/epiggy/DeleteAllowanceCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "package seedu.address.logic.parser.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.commands.epiggy.DeleteAllowanceCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " * Parses input arguments and creates a new DeleteAllowanceCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "public class DeleteAllowanceCommandParser implements Parser\u003cDeleteAllowanceCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public DeleteAllowanceCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            return new DeleteAllowanceCommand(index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteAllowanceCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/epiggy/DeleteBudgetCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "package seedu.address.logic.parser.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.commands.epiggy.DeleteBudgetCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " * Parses input arguments and creates a new DeleteBudgetCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "public class DeleteBudgetCommandParser implements Parser\u003cDeleteBudgetCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteBudgetCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * and returns an DeleteBudgetCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public DeleteBudgetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            return new DeleteBudgetCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteBudgetCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tehwenyi": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/epiggy/DeleteExpenseCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pdnm"
        },
        "content": "package seedu.address.logic.parser.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.logic.commands.epiggy.DeleteExpenseCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pdnm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pdnm"
        },
        "content": " * Parses input arguments and creates a new DeleteExpenseCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pdnm"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pdnm"
        },
        "content": "public class DeleteExpenseCommandParser implements Parser\u003cDeleteExpenseCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteBudgetCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     * and returns an DeleteBudgetCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public DeleteExpenseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            return new DeleteExpenseCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pdnm"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteExpenseCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pdnm"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "pdnm": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/epiggy/EditAllowanceCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "package seedu.address.logic.parser.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.commands.epiggy.EditAllowanceCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.commands.epiggy.EditExpenseCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " * Parses input arguments and creates a new EditAllowanceCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "public class EditAllowanceCommandParser implements Parser\u003cEditAllowanceCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public EditAllowanceCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_COST, PREFIX_DATE, PREFIX_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                            EditAllowanceCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                    pe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        EditExpenseCommand.EditExpenseDescriptor editExpenseDescriptor \u003d new EditExpenseCommand.EditExpenseDescriptor();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            editExpenseDescriptor.setName(ParserUtil.parseItemName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COST).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            editExpenseDescriptor.setCost(ParserUtil.parseCost(argMultimap.getValue(PREFIX_COST).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            editExpenseDescriptor.setDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editExpenseDescriptor::setTags);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        if (!editExpenseDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new ParseException(EditExpenseCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return new EditAllowanceCommand(index, editExpenseDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        tagSet.add(\"Allowance\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/epiggy/EditBudgetCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "package seedu.address.logic.parser.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERIOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.commands.epiggy.EditBudgetCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.commands.epiggy.EditBudgetCommand.EditBudgetDetails;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " * Parses input arguments and creates a new EditBudgetCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "public class EditBudgetCommandParser implements Parser\u003cEditBudgetCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditBudgetCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * and returns an EditBudgetCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public EditBudgetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_COST, PREFIX_PERIOD, PREFIX_DATE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        EditBudgetDetails editBudgetDetails \u003d new EditBudgetDetails();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COST).isPresent()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            editBudgetDetails.setAmount(ParserUtil.parseCost(argMultimap.getValue(PREFIX_COST).get()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PERIOD).isPresent()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            editBudgetDetails.setPeriod(ParserUtil.parsePeriod(argMultimap.getValue(PREFIX_PERIOD).get()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            editBudgetDetails.setStartDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        if (!editBudgetDetails.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new ParseException(EditBudgetCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return new EditBudgetCommand(editBudgetDetails);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tehwenyi": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/epiggy/EditExpenseCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pdnm"
        },
        "content": "package seedu.address.logic.parser.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.logic.commands.epiggy.EditExpenseCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pdnm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pdnm"
        },
        "content": " * Parses input arguments and creates a new EditExpenseCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pdnm"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pdnm"
        },
        "content": "public class EditExpenseCommandParser implements Parser\u003cEditExpenseCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public EditExpenseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pdnm"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_COST, PREFIX_DATE, PREFIX_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pdnm"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pdnm"
        },
        "content": "                    EditExpenseCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pdnm"
        },
        "content": "                    pe);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        EditExpenseCommand.EditExpenseDescriptor editExpenseDescriptor \u003d new EditExpenseCommand.EditExpenseDescriptor();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            editExpenseDescriptor.setName(ParserUtil.parseItemName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COST).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            editExpenseDescriptor.setCost(ParserUtil.parseCost(argMultimap.getValue(PREFIX_COST).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            editExpenseDescriptor.setDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editExpenseDescriptor::setTags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        if (!editExpenseDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            throw new ParseException(EditExpenseCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        return new EditExpenseCommand(index, editExpenseDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        tagSet.add(\"Expense\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pdnm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 1,
      "pdnm": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/epiggy/FindExpenseCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "package seedu.address.logic.parser.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.commands.epiggy.FindExpenseCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.epiggy.ExpenseContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "//@@author rahulb99"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " * Parses input arguments and creates a new FindExpenseCommand object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "public class FindExpenseCommandParser implements Parser\u003cFindExpenseCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindExpenseCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * and returns an FindExpenseCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public FindExpenseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindExpenseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        //Check whether the user follow the pattern"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        if (!trimmedArgs.contains(\"/\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindExpenseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        String[] splitTrimmedArgs \u003d trimmedArgs.split(\"/\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        if (splitTrimmedArgs[0].equals(\"\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            //Ensure args contains at least one prefix"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindExpenseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        ArgumentMultimap keywordsMap \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_COST, PREFIX_TAG, PREFIX_DATE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        ExpenseContainsKeywordsPredicate predicate \u003d new ExpenseContainsKeywordsPredicate(keywordsMap);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return new FindExpenseCommand(predicate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rahulb99": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/epiggy/ReportCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "package seedu.address.logic.parser.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import static seedu.address.commons.core.Messages.FORMAT_ERROR_MESSAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.logic.commands.epiggy.ReportCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": " * Parses input arguments and display report."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "public class ReportCommandParser implements Parser\u003cReportCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ReportCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * and returns an ReportCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public ReportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        LocalDate date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        int day \u003d 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        int month \u003d 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        int year \u003d 1970;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        String[] type \u003d {\"YEAR\", \"MONTH\", \"DAY\", \"ALL\"};"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        if (args.equals(\"\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            // no parameter found"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            return new ReportCommand(null, type[3]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DATE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DATE)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    ReportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            String dateString \u003d argMultimap.getValue(PREFIX_DATE).get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            // splits the dateString into year, month and day."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            String[] dateArr \u003d dateString.split(\"/\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                if (dateArr.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    // date string contains year, month and day"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    day \u003d Integer.valueOf(dateArr[0]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    month \u003d Integer.valueOf(dateArr[1]);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    year \u003d Integer.valueOf(dateArr[2]);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    date \u003d LocalDate.of(year, month, day);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    return new ReportCommand(date, type[2]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                } else if (dateArr.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    // date string only contains month and year"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    month \u003d Integer.valueOf(dateArr[0]);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    year \u003d Integer.valueOf(dateArr[1]);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    date \u003d LocalDate.of(year, month, day);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    return new ReportCommand(date, type[1]);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                } else if (dateArr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    year \u003d Integer.valueOf(dateArr[0]);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    date \u003d LocalDate.of(year, month, day);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    return new ReportCommand(date, type[0]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                            ReportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                throw new ParseException(String.format(FORMAT_ERROR_MESSAGE,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                        ReportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            date \u003d LocalDate.now(); // useless value"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            return new ReportCommand(date, type[3]);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yunjun199321": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/epiggy/SetGoalCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "package seedu.address.logic.parser.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.commands.epiggy.SetGoalCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Goal;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.model.epiggy.item.Cost;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.model.epiggy.item.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " * Parses input arguments and creates a new SetGoalCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "public class SetGoalCommandParser implements Parser\u003cSetGoalCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public SetGoalCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_COST);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_COST)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetGoalCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        Name name \u003d ParserUtil.parseItemName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        Cost cost \u003d ParserUtil.parseCost(argMultimap.getValue(PREFIX_COST).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        Goal goal \u003d new Goal(name, cost);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return new SetGoalCommand(goal);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 47,
      "pdnm": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/epiggy/SortExpenseCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "package seedu.address.logic.parser.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.commands.epiggy.SortExpenseCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.epiggy.Expense;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.epiggy.comparators.CompareExpenseByCost;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.epiggy.comparators.CompareExpenseByDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.epiggy.comparators.CompareExpenseByName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "//@@author rahulb99"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " * Parses input arguments and creates a new SortExpenseCommand object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "public class SortExpenseCommandParser implements Parser\u003cSortExpenseCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SortExpenseCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * and returns an SortExpenseCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public SortExpenseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortExpenseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        //Check whether the user follow the pattern"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        if (!trimmedArgs.contains(\"/\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortExpenseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        String[] splitTrimmedArgs \u003d trimmedArgs.split(\"/\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        if (splitTrimmedArgs[0].equals(\"\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            //Ensure args contains at least one prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortExpenseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        ArgumentMultimap keywordsMap \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_COST, PREFIX_DATE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        Comparator\u003cExpense\u003e comparator \u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        if (arePrefixesPresent(keywordsMap, PREFIX_NAME)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            comparator \u003d new CompareExpenseByName();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        } else if (arePrefixesPresent(keywordsMap, PREFIX_DATE)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            comparator \u003d new CompareExpenseByDate();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        } else if (arePrefixesPresent(keywordsMap, PREFIX_COST)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            comparator \u003d new CompareExpenseByCost();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortExpenseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return new SortExpenseCommand(comparator);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rahulb99": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/model/EPiggy.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import java.util.ListIterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.epiggy.Allowance;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.epiggy.Budget;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.epiggy.Expense;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.epiggy.ExpenseList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.epiggy.Goal;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.epiggy.UniqueBudgetList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.item.Cost;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.item.Item;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.epiggy.item.Period;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "public class EPiggy implements ReadOnlyEPiggy {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    private final ExpenseList expenses;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    private final ObservableList\u003cItem\u003e items;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private SimpleObjectProperty\u003cGoal\u003e goal;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private final UniqueBudgetList budgetList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        expenses \u003d new ExpenseList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        items \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        budgetList \u003d new UniqueBudgetList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        goal \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public EPiggy() {}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Creates an EPiggy using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public EPiggy(ReadOnlyEPiggy toBeCopied) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void addBudgetList(List\u003cBudget\u003e budgets) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        this.budgetList.addBudgetList(budgets);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * Replaces the contents of the expense list with {@code expenses}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * {@code expenses} can contain duplicate expenses."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public void setExpenses(List\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        this.expenses.setExpenses(expenses);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Resets the existing data of this {@code EPiggy} with {@code newData}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public void resetData(ReadOnlyEPiggy newData) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        setExpenses(newData.getExpenseList());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        setGoal(newData.getGoal().get());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        addBudgetList(newData.getBudgetList());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     * Adds an expense to the expense book."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        expenses.add(expense);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        if (budgetList.getBudgetListSize() \u003e 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            updateBudgetList(expense);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Updates the budgetList. Called every time an expense is added, edited or deleted."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private void updateBudgetList(Expense expense) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        int indexOfBudgetToEdit \u003d budgetList.getBudgetIndexBasedOnDate(expense.getDate());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        if (indexOfBudgetToEdit \u003e\u003d 0) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            Budget budgetToEdit \u003d budgetList.getBudgetAtIndex(indexOfBudgetToEdit);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            Budget editedBudget \u003d updateBudget(budgetToEdit);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            budgetList.replaceAtIndex(indexOfBudgetToEdit, editedBudget);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * Adds an allowance to the expense book."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * @param allowance to be added."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public void addAllowance(Allowance allowance) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        expenses.add(allowance);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public SimpleObjectProperty\u003cCost\u003e getSavings() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return new SimpleObjectProperty\u003c\u003e(new Cost(expenses.getTotalSavings()));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Adds a budget to the budgetList."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Called by the Command addBudget only."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * @param budget to be added into budgetList."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void addBudget(int index, Budget budget) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        budget \u003d updateBudget(budget);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        budgetList.addAtIndex(index, budget);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Deletes the budget at the specific index."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * @param index of the to be deleted budget."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void deleteBudgetAtIndex(int index) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        budgetList.remove(index);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     * Deletes the expense {@code toDelete}."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     * @param toDelete the expense to be deleted."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public void deleteExpense(Expense toDelete) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        expenses.remove(toDelete);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        updateBudgetList(toDelete);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Updates the remaining amount and days of the budget."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Allowances in the Expense list does not affect the budget."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * @param budget to be updated."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * @return updated budget."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private Budget updateBudget(Budget budget) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        budget.setRemainingDays(calculateRemainingDays(budget));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        budget.resetRemainingAmount();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        SortedList\u003cExpense\u003e sortedExpensesByDate \u003d sortExpensesByDate();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        ListIterator\u003cExpense\u003e iterator \u003d sortedExpensesByDate.listIterator();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        while (iterator.hasNext()) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            Expense expense \u003d iterator.next();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            if (!expense.getDate().before(budget.getStartDate())) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                if (budget.getEndDate().after(expense.getDate())) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                    if (!(expense instanceof Allowance)) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "pdnm"
        },
        "content": "                        budget.deductRemainingAmount(expense.getItem().getCost());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                    return budget;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return budget;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Calculates the remaining days for the budget based on the current date."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * @param budget to calculate the remaining days for."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * @return remaining days."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private Period calculateRemainingDays(Budget budget) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Date todaysDate \u003d new Date();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        if (todaysDate.after(budget.getEndDate())) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            return new Period(0);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        long diffInMillies \u003d budget.getEndDate().getTime() - todaysDate.getTime();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        long diff \u003d TimeUnit.DAYS.convert(diffInMillies, TimeUnit.MILLISECONDS);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return new Period((int) Math.ceil(diff));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Checks if there are any overlapping budgets."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public boolean budgetsOverlap(Date startDate, Date endDate, Budget earlierBudget) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        if (!startDate.after(earlierBudget.getStartDate()) \u0026\u0026 endDate.after(earlierBudget.getStartDate())) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        if (!startDate.before(earlierBudget.getStartDate()) \u0026\u0026 !endDate.after(earlierBudget.getEndDate())) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        if (startDate.before(earlierBudget.getEndDate()) \u0026\u0026 !endDate.before(earlierBudget.getEndDate())) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Sorts Expenses according to Date. Earlier Dates will have lower indexes."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * @return SortedList of Expenses"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public SortedList\u003cExpense\u003e sortExpensesByDate() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return expenses.sortByDate();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public void sortExpense(Comparator\u003cExpense\u003e comparator) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        expenses.sort(comparator);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * Replaces the given expense {@code target} in the list with {@code editedExpense}."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * {@code target} must exist in the expense tracker."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * The expense identity of {@code editedExpense}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * must not be the same as another existing expense in the expense tracker."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        requireNonNull(editedExpense);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        expenses.setExpense(target, editedExpense);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        updateBudgetList(editedExpense);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Replaces the current/previous budget in the list with {@code editedBudget}."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void setCurrentBudget(Budget editedBudget) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        requireNonNull(editedBudget);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        int indexOfCurrentBudget \u003d budgetList.getCurrentBudgetIndex();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        budgetList.replaceAtIndex(indexOfCurrentBudget, updateBudget(editedBudget));"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Gets the current budget\u0027s index."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * @return -1 if there is no current budget."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public int getCurrentBudgetIndex() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return this.budgetList.getCurrentBudgetIndex();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    };"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * Sets the saving goal for ePiggy."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public void setGoal(Goal goal) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        this.goal.setValue(goal);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * Get the saving goal for ePiggy."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public SimpleObjectProperty\u003cGoal\u003e getGoal() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return goal;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Removes {@code key} from this {@code EPiggy}."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "     * Notifies listeners that the address book has been modified."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void indicateModified() {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return budgetList.asUnmodifiableObservableList() + \" budgets\";"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public ObservableList\u003cExpense\u003e getExpenseList() {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return expenses.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public ObservableList\u003cItem\u003e getItemList() {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        return FXCollections.unmodifiableObservableList(items);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Gets the current budget list for ePiggy."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public ObservableList\u003cBudget\u003e getBudgetList() {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return budgetList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                || (other instanceof EPiggy // instanceof handles nulls"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                \u0026\u0026 persons.equals(((EPiggy) other).persons));"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public void reverseExpenseList() {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        expenses.reverse();"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 38,
      "pdnm": 27,
      "tehwenyi": 156,
      "-": 129,
      "rahulb99": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.epiggy.Allowance;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.epiggy.Budget;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.epiggy.Expense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.epiggy.Goal;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.item.Cost;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    Predicate\u003cBudget\u003e PREDICATE_SHOW_ALL_BUDGETS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    Predicate\u003cExpense\u003e PREDICATE_SHOW_ALL_EXPENSES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    Path getEPiggyFilePath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    void setEPiggyFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Replaces address book data with the data in {@code ePiggy}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    void setEPiggy(ReadOnlyEPiggy ePiggy);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /** Returns the EPiggy */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    ReadOnlyEPiggy getEPiggy();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Adds the given expense."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    void addExpense(Expense expense);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * Adds the given allowance."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    void addAllowance(Allowance allowance);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Adds a new budget."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    void addBudget(int index, Budget budget);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Checks if there are any overlapping budgets."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    boolean budgetsOverlap(Date startDate, Date endDate, Budget earlierBudget);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Deletes the budget at the specific index."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    void deleteBudgetAtIndex(int index);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     * Deletes the expense {@code toDelete}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     * @param toDelete the expense to be deleted."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    void deleteExpense(Expense toDelete);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * Replaces the given expense {@code target} with {@code editedExpense}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * The expense identity of {@code editedExpense} must not be the same as"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * another existing expense in the address book."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    void setExpense(Expense target, Expense editedExpense);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * Updates the filter of the filtered expense list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    void updateFilteredExpensesList(Predicate\u003cseedu.address.model.epiggy.Expense\u003e predicate);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Gets the current budget list."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    ObservableList\u003cBudget\u003e getBudgetList();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * Gets the Expense list."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    ObservableList\u003cExpense\u003e getExpenseList();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Gets the current budget\u0027s index."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * @return -1 if there is no current budget."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    int getCurrentBudgetIndex();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * Get the current savings."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    SimpleObjectProperty\u003cCost\u003e getSavings();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * Get the savings goal."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    SimpleObjectProperty\u003cGoal\u003e getGoal();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * Sets the savings goal."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    void setGoal(Goal goal);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Replaces the current budget with {@code editedBudget}."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    void setCurrentBudget(Budget editedBudget);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    /** Returns an unmodifiable view of the filtered expense list */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    ObservableList\u003cExpense\u003e getFilteredExpenseList();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /** Returns an unmodifiable view of the filtered budget list */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    ObservableList\u003cBudget\u003e getFilteredBudgetList();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Updates the filter of the filtered budget list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    void updateFilteredBudgetList(Predicate\u003cBudget\u003e predicate);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    boolean canUndoEPiggy();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    boolean canRedoEPiggy();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    void undoEPiggy();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    void redoEPiggy();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    void commitEPiggy();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selected person in the filtered person list."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no person is selected."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     * Selected person in the filtered person list."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     * null if no person is selected."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    ReadOnlyProperty\u003cExpense\u003e selectedExpenseProperty();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the selected person in the filtered person list."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no person is selected."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    Expense getSelectedExpense();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the selected person in the filtered person list."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    void setSelectedPerson(Person person);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     * Sets the selected expense in the filtered expense list."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    void setSelectedExpense(Expense expense);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * Sorts the expenses according to the specified {@param expenseComparator}."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    void sortExpenses(Comparator\u003cExpense\u003e expenseComparator);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * Reveres the {@code filteredExpenses} list."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    void reverseFilteredExpensesList();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 21,
      "pdnm": 26,
      "tehwenyi": 57,
      "-": 118,
      "rahulb99": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.epiggy.Allowance;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.epiggy.Budget;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.epiggy.Expense;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.epiggy.Goal;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.item.Cost;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private final VersionedEPiggy versionedEPiggy;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    private final FilteredList\u003cExpense\u003e filteredExpenses;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private final FilteredList\u003cBudget\u003e filteredBudget;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final SimpleObjectProperty\u003cPerson\u003e selectedPerson \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    private final SimpleObjectProperty\u003cExpense\u003e selectedExpense \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Initializes a ModelManager with the given ePiggy and userPrefs."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public ModelManager(ReadOnlyEPiggy ePiggy, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        requireAllNonNull(ePiggy, userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + ePiggy + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        versionedEPiggy \u003d new VersionedEPiggy(ePiggy);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedEPiggy.getPersonList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.addListener(this::ensureSelectedPersonIsValid);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        filteredExpenses \u003d new FilteredList\u003c\u003e(versionedEPiggy.getExpenseList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        filteredBudget \u003d new FilteredList\u003c\u003e(versionedEPiggy.getBudgetList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        this(new EPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public Path getEPiggyFilePath() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return userPrefs.getEPiggyFilePath();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void setEPiggyFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        userPrefs.setEPiggyFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d EPiggy \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void setEPiggy(ReadOnlyEPiggy ePiggy) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        versionedEPiggy.resetData(ePiggy);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public ReadOnlyEPiggy getEPiggy() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return versionedEPiggy;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public void setExpense(seedu.address.model.epiggy.Expense target,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                           seedu.address.model.epiggy.Expense editedExpense) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        requireAllNonNull(target, editedExpense);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        versionedEPiggy.setExpense(target, editedExpense);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return versionedEPiggy.hasPerson(person);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        versionedEPiggy.removePerson(target);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        versionedEPiggy.addPerson(person);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        versionedEPiggy.addExpense(expense);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public void addAllowance(Allowance allowance) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        versionedEPiggy.addAllowance(allowance);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void addBudget(int index, Budget budget) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        versionedEPiggy.addBudget(index, budget); }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Checks if there are any overlapping budgets."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public boolean budgetsOverlap(Date startDate, Date endDate, Budget earlierBudget) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return versionedEPiggy.budgetsOverlap(startDate, endDate, earlierBudget);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void deleteBudgetAtIndex(int index) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        versionedEPiggy.deleteBudgetAtIndex(index);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public void deleteExpense(Expense toDelete) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        versionedEPiggy.deleteExpense(toDelete);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public ObservableList\u003cBudget\u003e getBudgetList() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return versionedEPiggy.getBudgetList();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public ObservableList\u003cExpense\u003e getExpenseList() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return versionedEPiggy.getExpenseList();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public int getCurrentBudgetIndex() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return versionedEPiggy.getCurrentBudgetIndex();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public SimpleObjectProperty\u003cCost\u003e getSavings() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return versionedEPiggy.getSavings();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public SimpleObjectProperty\u003cGoal\u003e getGoal() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return versionedEPiggy.getGoal();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public void setGoal(Goal goal) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        versionedEPiggy.setGoal(goal);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        versionedEPiggy.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void setCurrentBudget(Budget editedBudget) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        requireNonNull(editedBudget);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        versionedEPiggy.setCurrentBudget(editedBudget);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * {@code versionedEPiggy}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * {@code versionedEPiggy}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        return filteredExpenses;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Budget} backed by the internal list of"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * {@code versionedEPiggy}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public ObservableList\u003cBudget\u003e getFilteredBudgetList() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return filteredBudget;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    //@@author rahulb99"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public void updateFilteredExpensesList(Predicate\u003cseedu.address.model.epiggy.Expense\u003e predicate) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        filteredExpenses.setPredicate(predicate);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    //@@author rahulb99"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * Sorts the expenses according to the keyword."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * @param comparator expense comparator"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public void sortExpenses(Comparator\u003cExpense\u003e comparator) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        requireAllNonNull(comparator);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        versionedEPiggy.sortExpense(comparator);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public void updateFilteredBudgetList(Predicate\u003cBudget\u003e predicate) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        filteredBudget.setPredicate(predicate);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    //@@author rahulb99"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * Reveres the {@code filteredExpenses} list."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public void reverseFilteredExpensesList() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        versionedEPiggy.reverseExpenseList();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public boolean canUndoEPiggy() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return versionedEPiggy.canUndo();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public boolean canRedoEPiggy() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return versionedEPiggy.canRedo();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public void undoEPiggy() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        versionedEPiggy.undo();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public void redoEPiggy() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        versionedEPiggy.redo();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public void commitEPiggy() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        versionedEPiggy.commit();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected person \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return selectedPerson;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public ReadOnlyProperty\u003cExpense\u003e selectedExpenseProperty() {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return selectedExpense;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public Expense getSelectedExpense() {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return selectedExpense.getValue();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        if (person !\u003d null \u0026\u0026 !filteredPersons.contains(person)) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        selectedPerson.setValue(person);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public void setSelectedExpense(Expense expense) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        if (expense !\u003d null \u0026\u0026 !filteredExpenses.contains(expense)) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            throw new PersonNotFoundException(); //TODO"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        selectedExpense.setValue(expense);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * Ensures {@code selectedPerson} is a valid person in {@code filteredPersons}."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    private void ensureSelectedPersonIsValid(ListChangeListener.Change\u003c? extends Person\u003e change) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            if (selectedPerson.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                // null is always a valid selected person, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            boolean wasSelectedPersonReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedPerson.getValue());"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            if (wasSelectedPersonReplaced) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                // Update selectedPerson to its new value."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedPerson.getValue());"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                selectedPerson.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            boolean wasSelectedPersonRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                    .anyMatch(removedPerson -\u003e selectedPerson.getValue().isSamePerson(removedPerson));"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            if (wasSelectedPersonRemoved) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                // Select the person that came before it in the list,"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                // or clear the selection if there is no such person."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                selectedPerson.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return versionedEPiggy.equals(other.versionedEPiggy)"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedPerson.get(), other.selectedPerson.get());"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return \"ModelManager{\""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                + \"versionedAddressBook\u003d\" + versionedEPiggy"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                + \", userPrefs\u003d\" + userPrefs"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                + \", filteredPersons\u003d\" + filteredPersons"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                + \", filteredExpenses\u003d\" + filteredExpenses"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                + \", filteredBudget\u003d\" + filteredBudget"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                + \", selectedPerson\u003d\" + selectedPerson"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                + \", selectedExpense\u003d\" + selectedExpense"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                + \u0027}\u0027;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 19,
      "pdnm": 20,
      "tehwenyi": 72,
      "-": 121,
      "rahulb99": 167
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyEPiggy.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.epiggy.Budget;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.epiggy.Expense;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.epiggy.Goal;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.item.Cost;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.item.Item;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "public interface ReadOnlyEPiggy extends Observable {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * Returns an unmodifiable view of the expense list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    ObservableList\u003cExpense\u003e getExpenseList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * Returns an unmodifiable view of the item list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    ObservableList\u003cItem\u003e getItemList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * Returns an unmodifiable view of the budget list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    ObservableList\u003cBudget\u003e getBudgetList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    ObservableValue\u003cCost\u003e getSavings();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    SimpleObjectProperty\u003cGoal\u003e getGoal();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 37,
      "tehwenyi": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    Path getEPiggyFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tehwenyi": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"epiggy.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        setEPiggyFilePath(newUserPrefs.getEPiggyFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public Path getEPiggyFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void setEPiggyFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 1,
      "tehwenyi": 3,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedEPiggy.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " * {@code EPiggy} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "public class VersionedEPiggy extends EPiggy {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private final List\u003cReadOnlyEPiggy\u003e addressBookStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public VersionedEPiggy(ReadOnlyEPiggy initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        addressBookStateList.add(new EPiggy(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Saves a copy of the current {@code EPiggy} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        addressBookStateList.add(new EPiggy(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStateList.subList(currentStatePointer + 1, addressBookStateList.size()).clear();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the address book to its previous state."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(addressBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the address book to its previously undone state."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(addressBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code undo()} has address book states to undo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code redo()} has address book states to redo."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003c addressBookStateList.size() - 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        if (!(other instanceof VersionedEPiggy)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        VersionedEPiggy otherVersionedEPiggyBook \u003d (VersionedEPiggy) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return super.equals(otherVersionedEPiggyBook)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                \u0026\u0026 addressBookStateList.equals(otherVersionedEPiggyBook.addressBookStateList)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedEPiggyBook.currentStatePointer;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            super(\"Current state pointer at start of addressBookState list, unable to undo.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            super(\"Current state pointer at end of addressBookState list, unable to redo.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 1,
      "tehwenyi": 11,
      "-": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/model/epiggy/Allowance.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "package seedu.address.model.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.item.Item;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " * Represents an allowance in the expense book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "public class Allowance extends Expense {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public Allowance(Item item, Date date) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        super(item, date);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 15,
      "tehwenyi": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/epiggy/Budget.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pdnm"
        },
        "content": "package seedu.address.model.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.model.epiggy.item.Cost;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.epiggy.item.Period;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pdnm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pdnm"
        },
        "content": " * Represents a Budget in the expense book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pdnm"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pdnm"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pdnm"
        },
        "content": "public class Budget {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            \"Budgeted amount should be greater than $0.00.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final String CURRENT_BUDGET \u003d \"Current\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private static final String OLD_BUDGET \u003d \"Old\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private static final String FUTURE_BUDGET \u003d \"Future\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    private final Cost amount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    private final Date startDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    private final Date endDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private final Period period;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    private Cost remainingAmount;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private Period remainingDays;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private String status \u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private Date todaysDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Represents a Budget in the expense book."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public Budget(Cost amount, Period period, Date startDate) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        this.period \u003d period;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        this.endDate \u003d calculateEndDate(startDate, period);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        this.remainingAmount \u003d amount;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        this.remainingDays \u003d period;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        this.todaysDate \u003d new Date();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        if (!todaysDate.before(startDate) \u0026\u0026 !todaysDate.after(endDate)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            this.status \u003d CURRENT_BUDGET;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        } else if (todaysDate.before(startDate)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            this.status \u003d FUTURE_BUDGET;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            this.status \u003d OLD_BUDGET;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Calculates the end date \u003d startDate + period (number of days)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * @param startDate"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * @param period"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * @return endDate"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private Date calculateEndDate(Date startDate, Period period) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        cal.setTime(this.startDate);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        cal.add(Calendar.DATE, period.getTimePeriod());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return cal.getTime();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void setRemainingDays(Period remainingDays) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        this.remainingDays \u003d remainingDays;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void setRemainingAmount(Cost remainingAmount) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        this.remainingAmount \u003d remainingAmount;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void resetRemainingAmount() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        this.remainingAmount \u003d this.amount;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public void deductRemainingAmount(Cost amountToDeduct) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        this.remainingAmount \u003d this.remainingAmount.deduct(amountToDeduct);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public Cost getRemainingAmount() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return remainingAmount;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public Cost getPositiveRemainingAmount() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        if (remainingAmount.getAmount() \u003c 0) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            return new Cost(-remainingAmount.getAmount());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return remainingAmount;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public Period getRemainingDays() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return remainingDays; }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public Cost getBudgetedAmount() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return this.amount;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public Period getPeriod() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return this.period;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public Date getStartDate() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return this.startDate;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public Date getEndDate() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return this.endDate;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public int getDay() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        cal.setTime(this.startDate);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return cal.get(Calendar.DAY_OF_MONTH);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public int getMonth() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        cal.setTime(this.startDate);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return cal.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public int getYear() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        cal.setTime(this.startDate);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return cal.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        if (!(o instanceof Budget)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Budget b \u003d (Budget) o;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        cal.setTime(this.startDate);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return this.amount.equals(b.getBudgetedAmount())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                \u0026\u0026 cal.get(Calendar.YEAR) \u003d\u003d b.getYear()"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                \u0026\u0026 cal.get(Calendar.MONTH) \u003d\u003d b.getMonth()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                \u0026\u0026 cal.get(Calendar.DAY_OF_MONTH) \u003d\u003d b.getDay()"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                \u0026\u0026 this.period.equals(b.getPeriod());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        builder.append(\"$\")"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                .append(getBudgetedAmount())"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                .append(\" for \")"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                .append(getPeriod())"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                .append(\" days starting from \")"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                .append(sdf.format(getStartDate()))"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                .append(\" till \")"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                .append(sdf.format(getEndDate()))"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                .append(\".\\n\")"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                .append(getRemainingDays())"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                .append(\" days remaining and $\")"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                .append(getRemainingAmount())"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                .append(\" remaining.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "pdnm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 11,
      "pdnm": 20,
      "tehwenyi": 134,
      "rahulb99": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/epiggy/Expense.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pdnm"
        },
        "content": "package seedu.address.model.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.model.epiggy.item.Item;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pdnm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pdnm"
        },
        "content": " * Represents an Expense in the expense book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pdnm"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pdnm"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pdnm"
        },
        "content": "public class Expense {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    private final Item item;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public Expense(Item item, Date date) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public Item getItem() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        return item;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"EEE, MMM d, \u0027\u0027yy\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        builder.append(item)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                .append(\"\\nAdded on: \")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                .append(format.format(date));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pdnm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 10,
      "pdnm": 27,
      "rahulb99": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/epiggy/ExpenseContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "package seedu.address.model.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.epiggy.item.Item;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "//@@author rahulb99"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " * TODO: Refactor"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " * Tests that a {@code Expense}\u0027s {@code Name, Cost, Category, Date} matches any of the keywords given."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "public class ExpenseContainsKeywordsPredicate implements Predicate\u003cExpense\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    private final ArgumentMultimap keywords;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public ExpenseContainsKeywordsPredicate(ArgumentMultimap keywords) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        assert keywords !\u003d null : \"keywords should not be null.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * Evaluates this predicate on the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * @param expense the input argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * @return {@code true} if the input argument matches the predicate,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * otherwise {@code false}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public boolean test(Expense expense) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        assert expense !\u003d null : \"Expense should not be null.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        String nameKeywords \u003d keywords.getValue(PREFIX_NAME).orElse(\"\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        List\u003cString\u003e tagKeywords \u003d keywords.getAllValues(PREFIX_TAG);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        String dateKeywords \u003d keywords.getValue(PREFIX_DATE).orElse(\"\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        String costKeywords \u003d keywords.getValue(PREFIX_COST).orElse(\"\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        //if all keywords are absent, return false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        if (nameKeywords.equals(\"\") \u0026\u0026 tagKeywords.isEmpty()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                \u0026\u0026 dateKeywords.equals(\"\") \u0026\u0026 costKeywords.equals(\"\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        //if one or more keywords are present"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        boolean result \u003d true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        if (!nameKeywords.equals(\"\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            result \u003d containsNameKeywords(nameKeywords, expense);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        if (!costKeywords.equals(\"\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            result \u003d result \u0026\u0026 isWithinCostRange(costKeywords, expense);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        if (!dateKeywords.equals(\"\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            result \u003d result \u0026\u0026 isWithinDateRange(dateKeywords, expense);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        if (!tagKeywords.isEmpty()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            result \u003d result \u0026\u0026 checkTagKeywords(tagKeywords, expense);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * Return true if the {@code Name} of {@code expense} contains {@code nameKeywords}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public boolean containsNameKeywords(String nameKeywords, Expense expense) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        assert nameKeywords !\u003d null : \"nameKeywords should not be null.\\n\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        List\u003cString\u003e splitNameKeywords \u003d Arrays.asList(nameKeywords.trim().split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        Item item \u003d expense.getItem();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        boolean result \u003d splitNameKeywords.stream()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(item.getName().name, keyword));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * Return true if any of the {@code Tag} of {@code expense} contains any element of {@code tagKeywords}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public boolean checkTagKeywords(List\u003cString\u003e tagKeywords, Expense expense) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        assert tagKeywords !\u003d null : \"tagKeywords should not be null.\\n\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        List\u003cString\u003e tagKeywordsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        for (String tag : tagKeywords) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            tagKeywordsList.addAll(Arrays.asList(tag.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        Item item \u003d expense.getItem();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        boolean result \u003d tagKeywords.stream()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                .anyMatch(keyword -\u003e item.getTags().stream()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                        .anyMatch(tag -\u003e StringUtil.containsWordIgnoreCase(tag.tagName, keyword)));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * Return true if the {@code Cost} of {@code expense} is within the range denoted by {@code costKeywords}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public boolean isWithinCostRange(String costKeywords, Expense expense) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        assert costKeywords !\u003d null : \"costKeywords should not be null.\\n\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        boolean result;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        String[] splitCost \u003d costKeywords.split(\":\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        Item item \u003d expense.getItem();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        if (splitCost.length \u003d\u003d 1) { //if the user enters an exact cost"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            double chosenCost \u003d Double.parseDouble(splitCost[0]);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            result \u003d item.getCost().getAmount() \u003d\u003d chosenCost;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        } else { //if the user enters a range of dates"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            double lowerBound \u003d Double.parseDouble(splitCost[0]);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            double higherBound \u003d Double.parseDouble(splitCost[1]);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            result \u003d lowerBound \u003c\u003d item.getCost().getAmount()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                    \u0026\u0026 item.getCost().getAmount() \u003c\u003d higherBound;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * Return true if the {@code Date} of {@code expense} is within the range denoted by {@code dateKeywords}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public boolean isWithinDateRange(String dateKeywords, Expense expense) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        assert dateKeywords !\u003d null : \"dateKeywords should not be null.\\n\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        boolean result;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        String[] splitDate \u003d dateKeywords.split(\":\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        if (splitDate.length \u003d\u003d 1) { //if the user only enter an exact date"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            Date chosenDate \u003d new Date(splitDate[0]);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            result \u003d expense.getDate().equals(chosenDate);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        } else { //if the user enter a range of dates"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            Date start \u003d new Date(splitDate[0]);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            Date end \u003d new Date(splitDate[1]);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            boolean isWithinRange \u003d start.before(expense.getDate())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                    \u0026\u0026 end.after(expense.getDate());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            result \u003d start.equals(expense.getDate())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                    || end.equals(expense.getDate())"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                    || isWithinRange;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                || (other instanceof ExpenseContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                \u0026\u0026 keywords.equals(((ExpenseContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rahulb99": 152
    }
  },
  {
    "path": "src/main/java/seedu/address/model/epiggy/ExpenseList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "package seedu.address.model.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "//@@author rahulb99"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " * A expense is considered unique by comparing using {@code Expense#isSamePerson(Expense)}. As such,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " * adding and updating of persons uses Expense#isSamePerson(Expense) for equality so as to"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " * ensure that the expense being added or updated is"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " * unique in terms of identity in the ExpenseList. However, the removal of a expense uses Expense#equals(Object) so"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " * as to ensure that the expense with exactly the same fields will be removed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "public class ExpenseList implements Iterable\u003cExpense\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    private final ObservableList\u003cExpense\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    private final ObservableList\u003cExpense\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * Adds a expense to the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public void add(Expense toAdd) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * Replaces the expense {@code target} in the list with {@code editedExpense}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * The expense identity of {@code editedExpense} must not be the same as another existing expense in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public void setExpense(Expense target,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                           Expense editedExpense) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        requireAllNonNull(target, editedExpense);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        internalList.set(index, editedExpense);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * Removes the equivalent expense from the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * The expense must exist in the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public void remove(Expense toRemove) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * Removes the expense with the specific index from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * The expense of the index must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * @param index of the expense to be removed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public void remove(int index) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        internalList.remove(index, index + 1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * Replaces the contents of this list with {@code expenses}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * {@code expenses} must not contain duplicate expenses."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public void setExpenses(List\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        requireAllNonNull(expenses);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        internalList.setAll(expenses);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public double getTotalExpenses() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        double sum \u003d internalUnmodifiableList.stream()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                .filter(expense -\u003e !(expense instanceof Allowance))"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                .mapToDouble(expense -\u003e expense.getItem().getCost().getAmount())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                .sum();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return sum;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public double getTotalAllowances() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        double sum \u003d internalUnmodifiableList.stream()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                .filter(allowance -\u003e allowance instanceof Allowance)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                .mapToDouble(allowance -\u003e allowance.getItem().getCost().getAmount())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                .sum();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return sum;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public double getTotalSavings() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return getTotalAllowances() - getTotalExpenses();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public ObservableList\u003cExpense\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public Iterator\u003cExpense\u003e iterator() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                || (other instanceof ExpenseList // instanceof handles nulls"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                \u0026\u0026 internalList.equals(((ExpenseList) other).internalList));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * @return size of {@param internalList}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * Returns list of expenses sorted by date"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * @return SortedList of Expense"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public SortedList\u003cExpense\u003e sortByDate() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return internalList.sorted(new Comparator\u003cExpense\u003e() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            public int compare(Expense e1, Expense e2) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                if (e1.getDate() \u003d\u003d null || e2.getDate() \u003d\u003d null) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                    return 0;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                return e1.getDate().compareTo(e2.getDate());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        });"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public void sort(Comparator\u003cExpense\u003e comparator) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        FXCollections.sort(internalList, comparator);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public void reverse() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        FXCollections.reverse(internalList);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public double getTotalSpendings() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        List\u003cDouble\u003e costList \u003d internalList.stream().map(e -\u003e e.getItem().getCost().getAmount())"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return costList.stream().mapToDouble(f -\u003e f.doubleValue()).sum();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rahulb99": 169
    }
  },
  {
    "path": "src/main/java/seedu/address/model/epiggy/Goal.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "package seedu.address.model.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.model.epiggy.item.Cost;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.item.Name;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " * Represents a Goal in the expense book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "public class Goal {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    private final Cost amount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public Goal(Name name, Cost amount) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public Cost getAmount() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return String.format(\"%s - %2s\", name, amount);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        if (!(other instanceof Goal)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        Goal otherGoal \u003d (Goal) other;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return otherGoal.getName().equals(getName())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                \u0026\u0026 otherGoal.getAmount().equals(getAmount());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 40,
      "pdnm": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/epiggy/SampleEPiggyDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "package seedu.address.model.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.EPiggy;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.ReadOnlyEPiggy;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.item.Cost;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.item.Item;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.item.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.item.Period;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " * Contains utility methods for populating {@code EPiggy} with sample data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "public class SampleEPiggyDataUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static Expense[] getSampleExpenses() throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return new Expense[] {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            new Allowance(new Item("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                    new Name(\"Allowance\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                    new Cost(20), getTagSet(\"Allowance\")),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                    sdf.parse(\"31/01/2019\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            new Expense(new Item("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                    new Name(\"Fishball Noodles\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                    new Cost(4),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                    getTagSet(\"Lunch\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                    sdf.parse(\"02/02/2019\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            )"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        };"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static Goal getSampleGoal() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return new Goal(new Name(\"Nintendo Switch\"), new Cost(499));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static Budget[] getSampleBudget() throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return new Budget[] {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            new Budget(new Cost(200), new Period(30), sdf.parse(\"01/04/2019\")),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            new Budget(new Cost(200), new Period(31), sdf.parse(\"01/03/2019\"))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        };"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static ReadOnlyEPiggy getSampleEPiggy() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        EPiggy sampleEp \u003d new EPiggy();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            for (Expense sampleExpense : getSampleExpenses()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                if (sampleExpense instanceof Allowance) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                    sampleEp.addAllowance((Allowance) sampleExpense);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                    sampleEp.addExpense(sampleExpense);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            Budget[] budgets \u003d getSampleBudget();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            for (int i \u003d 0; i \u003c budgets.length; i++) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                sampleEp.addBudget(i, budgets[i]);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            sampleEp.setGoal(getSampleGoal());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return sampleEp;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 73,
      "tehwenyi": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/epiggy/UniqueBudgetList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "package seedu.address.model.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.model.epiggy.Budget.CURRENT_BUDGET;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.epiggy.exceptions.DuplicateBudgetException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " * A list of budgetList that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " * A budget is considered unique by comparing using {@code Budget#equals(Budget)}. As such, adding and updating of"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " * budgetList uses Budget#equals(Budget) for equality so as to ensure that the budget being added or updated is"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a budget uses Budget#equals(Object) so"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " * as to ensure that the budget with exactly the same fields will be removed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "public class UniqueBudgetList implements Iterable\u003cBudget\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final int MAXIMUM_SIZE \u003d 20;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private final ObservableList\u003cBudget\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private final ObservableList\u003cBudget\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Adds a new budget to the top of the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Only called when a new budget is added."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * @param toAdd the budget to be added."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void addAtIndex(int index, Budget toAdd) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        internalList.add(index, toAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        limitSize();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Replaces the budget at index {@code index} with budget {@code toSet}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * @param toSet the budget to be added."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void replaceAtIndex(int index, Budget toSet) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        requireNonNull(toSet);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        internalList.set(index, toSet);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        limitSize();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Gets the budget on the internal list with the corresponding index."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * There must be at least one budget in {@code internalList}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * @return the corresponding budget in {@code internalList}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public Budget getBudgetAtIndex(int index) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return internalList.get(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Gets the index of the budget based on the date."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * @return the index of the budget or -1 if the expense date is not in any of the budgets."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public int getBudgetIndexBasedOnDate(Date date) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        requireAllNonNull(internalList, date);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            Budget toCheck \u003d internalList.get(i);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            if ((!toCheck.getStartDate().after(date)) \u0026\u0026 (!toCheck.getEndDate().before(date))) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                return i;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Gets the current budget\u0027s index."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * @return -1 if there is no current budget."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public int getCurrentBudgetIndex() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        while (index \u003c internalList.size()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            if (internalList.get(index).getStatus().equals(CURRENT_BUDGET)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                return index;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Gets the size of internal list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * @return the size of {@code internalList}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public int getBudgetListSize() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Replaces the contents of this list with {@code budgetList}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * {@code budgetList} must not contain duplicate budgetList."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * @param newBudgetList to replace."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void addBudgetList(List\u003cBudget\u003e newBudgetList) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        requireAllNonNull(newBudgetList);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        if (!budgetsAreUnique(newBudgetList)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new DuplicateBudgetException();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        this.internalList.setAll(newBudgetList);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        limitSize();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Returns true if {@code budgetList} contains only unique budgetList."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private boolean budgetsAreUnique(List\u003cBudget\u003e budgetList) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        for (int i \u003d 0; i \u003c budgetList.size() - 1; i++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            for (int j \u003d i + 1; j \u003c budgetList.size(); j++) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                if (budgetList.get(i).equals(budgetList.get(j))) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Ensures the size of budgetList does not exceed {@code MAXIMUM_SIZE}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Deletes all budgets after the {@code MAXIMUM_SIZE} has exceeded."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private void limitSize() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        requireNonNull(internalList);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        int budgetListSize \u003d internalList.size();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        if (budgetListSize \u003e MAXIMUM_SIZE) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            for (int i \u003d budgetListSize; i \u003e MAXIMUM_SIZE; i--) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                internalList.remove(MAXIMUM_SIZE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Removes the budget with the specific index from the list."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * The budget of the index must exist in the list."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * @param index of the budget to be removed."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void remove(int index) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        internalList.remove(index, index + 1);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public ObservableList\u003cBudget\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public Iterator\u003cBudget\u003e iterator() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                || (other instanceof UniqueBudgetList // instanceof handles nulls"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueBudgetList) other).internalList));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tehwenyi": 172
    }
  },
  {
    "path": "src/main/java/seedu/address/model/epiggy/comparators/CompareExpenseByCost.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "package seedu.address.model.epiggy.comparators;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.epiggy.Expense;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " * Comparator function for sorting Expenses by cost in descending order."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "public class CompareExpenseByCost implements Comparator\u003cExpense\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return super.equals(obj);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public int compare(Expense o1, Expense o2) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        if (o1.getItem().getCost() \u003d\u003d null || o2.getItem().getCost() \u003d\u003d null) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return o1.getItem().getCost().getAmount() \u003c o2.getItem().getCost().getAmount() ? 1 : -1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rahulb99": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/epiggy/comparators/CompareExpenseByDate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "package seedu.address.model.epiggy.comparators;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.epiggy.Expense;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " * Comparator function for sorting Expenses by date in with the latest date being first."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "public class CompareExpenseByDate implements Comparator\u003cExpense\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return super.equals(obj);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public int compare(Expense o1, Expense o2) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        if (o1.getDate() \u003d\u003d null || o2.getDate() \u003d\u003d null) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return o2.getDate().compareTo(o1.getDate());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rahulb99": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/epiggy/comparators/CompareExpenseByName.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "package seedu.address.model.epiggy.comparators;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.epiggy.Expense;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " * Comparator function for sorting Expenses by name in lexicographical order."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "public class CompareExpenseByName implements Comparator\u003cExpense\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public int compare(Expense o1, Expense o2) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        if (o1.getItem().getName() \u003d\u003d null || o2.getItem().getName() \u003d\u003d null) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return o1.getItem().getName().name.compareToIgnoreCase(o2.getItem().getName().name);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return super.equals(obj);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rahulb99": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/epiggy/exceptions/DuplicateBudgetException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "package seedu.address.model.epiggy.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "public class DuplicateBudgetException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public DuplicateBudgetException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        super(\"Operation would result in duplicate budgets\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tehwenyi": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/epiggy/item/Cost.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pdnm"
        },
        "content": "package seedu.address.model.epiggy.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pdnm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pdnm"
        },
        "content": " * Represents a Cost."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pdnm"
        },
        "content": " * Guarantees: immutable"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pdnm"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pdnm"
        },
        "content": "public class Cost {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Cost should be an amount not more than 6 digits.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private static final Pattern AMOUNT_FORMAT \u003d Pattern.compile(\"^(?!\\\\.?$)\\\\d{0,6}(\\\\.\\\\d{0,2})?$\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    private final double amount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public Cost(double amount) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public Cost(String amount) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        checkArgument(isValidCost(amount), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        this.amount \u003d Double.parseDouble(amount);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public Cost deduct(Cost amountToDeduct) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        return new Cost(this.amount - amountToDeduct.getAmount());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public double getAmount() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     * Returns true if a given string is a valid Cost."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public static boolean isValidCost(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            Matcher matcher \u003d AMOUNT_FORMAT.matcher(test);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            if (!matcher.matches()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            double d \u003d Double.parseDouble(test);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            return d \u003e 0. \u0026\u0026 d \u003c 1000000.0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        } catch (NumberFormatException | ParseException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        return String.format(\"$%.2f\", amount);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        if (!(other instanceof Cost)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return amount \u003d\u003d ((Cost) other).getAmount();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pdnm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 23,
      "pdnm": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/model/epiggy/item/Item.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pdnm"
        },
        "content": "package seedu.address.model.epiggy.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pdnm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pdnm"
        },
        "content": " * Represents an Item in the expense book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pdnm"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pdnm"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pdnm"
        },
        "content": "public class Item {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    private final Cost cost;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    private final Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public Item(Name name, Cost cost, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public Cost getCost() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        return cost;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        builder.append(name)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                .append(\": $\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pdnm"
        },
        "content": "                .append(cost)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                .append(\"\\nTags: \")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                .append(tags);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pdnm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 10,
      "pdnm": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/epiggy/item/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pdnm"
        },
        "content": "package seedu.address.model.epiggy.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pdnm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pdnm"
        },
        "content": " * Represents an Item\u0027s name in the expense book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pdnm"
        },
        "content": " * Guarantees: immutable}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pdnm"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pdnm"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            \"Name should have at least 1 alphanumeric character and less than 50 characters in length.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[a-zA-Z0-9 ]{1,50}$\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public final String name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static boolean isValidName(String name) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return name.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        if (!(other instanceof Name)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return name.equals(((Name) other).name);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pdnm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 24,
      "pdnm": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/epiggy/item/Period.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "package seedu.address.model.epiggy.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " * Represents a time period."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " * Guarantees: immutable"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "public class Period {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            \"Time period is in terms of days and should only contain whole numbers of at least value 1.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                    + \"Time period cannot exceed 1 million days (1,000,000)\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\b([1-9]|[1-8][0-9]|9[0-9]|[1-8][0-9]{2}|9[0-8][0-9]|99[0-9]\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            + \"|[1-8][0-9]{3}|9[0-8][0-9]{2}|99[0-8][0-9]|999[0-9]|[1-8][0-9]{4}|9[0-8][0-9]{3}|99[0-8][0-9]{2}\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            + \"|999[0-8][0-9]|9999[0-9]|[1-8][0-9]{5}|9[0-8][0-9]{4}|99[0-8][0-9]{3}|999[0-8][0-9]{2}|9999[0-8][0-9]\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            + \"|99999[0-9]|1000000)\\\\b\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private final int timePeriod;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public Period(int timePeriod) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        checkArgument(isValidPeriod(timePeriod), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        this.timePeriod \u003d timePeriod;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public Period(String period) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        requireNonNull(period);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        checkArgument(isValidPeriod(period), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        this.timePeriod \u003d Integer.parseInt(period);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public int getTimePeriod() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return timePeriod;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Returns true if a given string is a valid time period."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static boolean isValidPeriod(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Returns true if a given string is a valid time period."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static boolean isValidPeriod(int test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        if (test \u003c 0 || test \u003e 2147483647) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        if (!(o instanceof Period)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Period p \u003d (Period) o;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return this.timePeriod \u003d\u003d p.getTimePeriod();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return Integer.toString(timePeriod);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tehwenyi": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.EPiggy;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.ReadOnlyEPiggy;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " * Contains utility methods for populating {@code EPiggy} with sample data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static ReadOnlyEPiggy getSampleEPiggy() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        EPiggy sampleAb \u003d new EPiggy();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tehwenyi": 6,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/EPiggyStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.EPiggy;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.ReadOnlyEPiggy;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " * Represents a storage for {@link EPiggy}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "public interface EPiggyStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    Path getEPiggyFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Returns EPiggy data as a {@link ReadOnlyEPiggy}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    Optional\u003cseedu.address.model.ReadOnlyEPiggy\u003e readEPiggy() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * @see #getEPiggyFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    Optional\u003cseedu.address.model.ReadOnlyEPiggy\u003e readEPiggy(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Saves the given {@link ReadOnlyEPiggy} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * @param ePiggy cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    void saveEPiggy(ReadOnlyEPiggy ePiggy) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * @see #saveEPiggy(ReadOnlyEPiggy)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    void saveEPiggy(ReadOnlyEPiggy ePiggy, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Creates a backup file for {@link ReadOnlyEPiggy}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * @param ePiggy"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    void backupEPiggy(ReadOnlyEPiggy ePiggy) throws IOException;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tehwenyi": 17,
      "-": 32,
      "rahulb99": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonEPiggyStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.ReadOnlyEPiggy;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.storage.epiggy.EPiggyStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.storage.epiggy.JsonSerializableEPiggy;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " * A class to access EPiggy data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "public class JsonEPiggyStorage implements EPiggyStorage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonEPiggyStorage.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    private Path backupFilePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public JsonEPiggyStorage(Path filePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        backupFilePath \u003d Paths.get(filePath.toString() + \".backup\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public Path getEPiggyFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public Optional\u003cReadOnlyEPiggy\u003e readEPiggy() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return readEPiggy(filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public Optional\u003cReadOnlyEPiggy\u003e readEPiggy(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        Optional\u003cJsonSerializableEPiggy\u003e jsonEPiggy \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                filePath, JsonSerializableEPiggy.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        if (!jsonEPiggy.isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            return Optional.of(jsonEPiggy.get().toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public void saveEPiggy(ReadOnlyEPiggy ePiggy) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        saveEPiggy(ePiggy, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public void saveEPiggy(ReadOnlyEPiggy ePiggy, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        requireNonNull(ePiggy);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableEPiggy(ePiggy), filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public void backupEPiggy(ReadOnlyEPiggy ePiggy) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        saveEPiggy(ePiggy, backupFilePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 20,
      "tehwenyi": 6,
      "-": 51,
      "rahulb99": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.EPiggy;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.ReadOnlyEPiggy;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " * An Immutable EPiggy that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "class JsonSerializableEPiggy {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Constructs a {@code JsonSerializableEPiggy} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public JsonSerializableEPiggy(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Converts a given {@code ReadOnlyEPiggy} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableEPiggy}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public JsonSerializableEPiggy(ReadOnlyEPiggy source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Converts this address book into the model\u0027s {@code EPiggy} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public EPiggy toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        EPiggy ePiggy \u003d new EPiggy();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            if (ePiggy.hasPerson(person)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            ePiggy.addPerson(person);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return ePiggy;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tehwenyi": 15,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.ReadOnlyEPiggy;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.storage.epiggy.EPiggyStorage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "public interface Storage extends EPiggyStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    Path getEPiggyFilePath();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    Optional\u003cReadOnlyEPiggy\u003e readEPiggy() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    void saveEPiggy(ReadOnlyEPiggy ePiggy) throws IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 6,
      "tehwenyi": 1,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.ReadOnlyEPiggy;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.storage.epiggy.EPiggyStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " * Manages storage of EPiggy data in local storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private EPiggyStorage ePiggyStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public StorageManager(EPiggyStorage ePiggyStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        this.ePiggyStorage \u003d ePiggyStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d EPiggy methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public Path getEPiggyFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return ePiggyStorage.getEPiggyFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public Optional\u003cReadOnlyEPiggy\u003e readEPiggy() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return readEPiggy(ePiggyStorage.getEPiggyFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public Optional\u003cReadOnlyEPiggy\u003e readEPiggy(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return ePiggyStorage.readEPiggy(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public void saveEPiggy(ReadOnlyEPiggy ePiggy) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        saveEPiggy(ePiggy, ePiggyStorage.getEPiggyFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public void saveEPiggy(ReadOnlyEPiggy ePiggy, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        ePiggyStorage.saveEPiggy(ePiggy, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public void backupEPiggy(ReadOnlyEPiggy ePiggy) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        logger.fine(\"Creating a backup file: \" + getEPiggyFilePath() + \".backup\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        ePiggyStorage.backupEPiggy(ePiggy);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 17,
      "tehwenyi": 3,
      "-": 64,
      "rahulb99": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/epiggy/EPiggyStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "package seedu.address.storage.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.EPiggy;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.ReadOnlyEPiggy;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " * Represents a storage for {@link EPiggy}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "public interface EPiggyStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    Path getEPiggyFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    Optional\u003cReadOnlyEPiggy\u003e readEPiggy() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    Optional\u003cReadOnlyEPiggy\u003e readEPiggy(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    void saveEPiggy(ReadOnlyEPiggy ePiggy) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    void saveEPiggy(ReadOnlyEPiggy ePiggy, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    void backupEPiggy(ReadOnlyEPiggy ePiggy) throws IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 23,
      "tehwenyi": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/epiggy/JsonAdaptedBudget.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "package seedu.address.storage.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Budget;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.item.Cost;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.item.Period;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " * Json friendly version of (@Link Budget)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "public class JsonAdaptedBudget {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Budget\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private final String amount;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private final String startDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private final String period;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private final String remainingAmount;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * Constructs a {@code JsonAdaptedBudget} with the given expense details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public JsonAdaptedBudget(@JsonProperty(\"amount\") String amount,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                             @JsonProperty(\"startDate\") String startDate,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                             @JsonProperty(\"period\") String period,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                             @JsonProperty(\"remainingAmount\") String remainingAmount) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        this.period \u003d period;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        this.remainingAmount \u003d remainingAmount;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * Converts a given {@code Budget} into this class for Jackson use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public JsonAdaptedBudget(Budget source) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        amount \u003d String.valueOf(source.getBudgetedAmount().getAmount());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        Date sd \u003d source.getStartDate();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        startDate \u003d sdf.format(sd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        period \u003d source.getPeriod().toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        remainingAmount \u003d String.valueOf(source.getRemainingAmount().getAmount());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * Converts this Jackson-friendly adapted budget object into the model\u0027s {@code Budget} object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * @throws IllegalValueException"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public Budget toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        if (amount \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Cost.class.getSimpleName()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        final Cost modelAmount \u003d new Cost(amount);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        if (startDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        final Date modelStartDate \u003d ParserUtil.parseDate(startDate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        if (period \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Period.class.getSimpleName()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        final Period modelPeriod \u003d new Period(period);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        if (remainingAmount \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Cost.class.getSimpleName()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        final Cost modelRemaining \u003d new Cost(Double.parseDouble(remainingAmount));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        Budget b \u003d new Budget(modelAmount, modelPeriod, modelStartDate);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        b.setRemainingAmount(modelRemaining);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return b;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/epiggy/JsonAdaptedExpense.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "package seedu.address.storage.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Allowance;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Expense;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.item.Cost;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.item.Item;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.item.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " * Json friendly version of (@Link Expense)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "public class JsonAdaptedExpense {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Expense\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private final String cost;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private final List\u003cJsonAdaptedTags\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * Constructs a {@code JsonAdaptedExpense} with the given expense details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public JsonAdaptedExpense(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                              @JsonProperty(\"cost\") String cost,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                              @JsonProperty(\"date\") String date,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                              @JsonProperty(\"type\") String type,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                              @JsonProperty(\"tags\") List\u003cJsonAdaptedTags\u003e tags) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        if (tags !\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            this.tags.addAll(tags);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * Converts a given {@code Expense} into this class for Jackson use."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public JsonAdaptedExpense(Expense source) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        name \u003d source.getItem().getName().name;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        cost \u003d String.valueOf(source.getItem().getCost().getAmount());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        date \u003d source.getDate().toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        if (source instanceof Allowance) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            type \u003d \"allowance\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            type \u003d \"expense\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        tags.addAll(source.getItem().getTags().stream()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                .map(JsonAdaptedTags::new)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Expense} object."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted expense."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public Expense toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        final List\u003cTag\u003e expenseTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        for (JsonAdaptedTags tag: tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            expenseTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        if (cost \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Cost.class.getSimpleName()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        if (!Cost.isValidCost(cost)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new IllegalValueException(Cost.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        final Cost modelCost \u003d new Cost(cost);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final Date modelDate \u003d new Date();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(expenseTags);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        if (type.equals(\"allowance\")) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            return new Allowance(new Item(modelName, modelCost, modelTags), modelDate);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return new Expense(new Item(modelName, modelCost, modelTags), modelDate);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 105,
      "-": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/epiggy/JsonAdaptedGoal.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "package seedu.address.storage.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Goal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.item.Cost;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.item.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " * Json friendly version of (@Link Goal)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "public class JsonAdaptedGoal {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Goal\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    private final Boolean isNull;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private final String cost;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * Constructs a {@code JsonAdaptedGoal} with the given goal details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public JsonAdaptedGoal("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            @JsonProperty(\"isNull\") Boolean isNull,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            @JsonProperty(\"cost\") String cost) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        this.isNull \u003d isNull;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * Converts a given {@code Goal} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public JsonAdaptedGoal(Goal source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        if (source \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            isNull \u003d true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            name \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            cost \u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            isNull \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            name \u003d source.getName().toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            cost \u003d String.valueOf(source.getAmount().getAmount());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * Converts this Jackson-friendly adapted goal object into the model\u0027s {@code Goal} object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * @throws IllegalValueException"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public Goal toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        if (isNull) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new IllegalValueException(String.format(Name.MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        if (cost \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Cost.class.getSimpleName()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        if (!Cost.isValidCost(cost)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new IllegalValueException(Cost.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        final Cost modelCost \u003d new Cost(cost);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return new Goal(modelName, modelCost);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 62,
      "pdnm": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/epiggy/JsonAdaptedTags.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "package seedu.address.storage.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "class JsonAdaptedTags {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public JsonAdaptedTags(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public JsonAdaptedTags(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/epiggy/JsonEPiggyStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "package seedu.address.storage.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.ReadOnlyEPiggy;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " * A class to access epiggy data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "public class JsonEPiggyStorage implements EPiggyStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonEPiggyStorage.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private Path backupFilePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public JsonEPiggyStorage(Path filePath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        backupFilePath \u003d Paths.get(filePath.toString() + \".backup\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public Path getEPiggyFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public Optional\u003cReadOnlyEPiggy\u003e readEPiggy() throws DataConversionException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return readEPiggy(filePath);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public Optional\u003cReadOnlyEPiggy\u003e readEPiggy(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        Optional\u003cJsonSerializableEPiggy\u003e jsonEPiggy \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                filePath, JsonSerializableEPiggy.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        if (!jsonEPiggy.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            return Optional.of(jsonEPiggy.get().toModelType());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + e.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public void saveEPiggy(ReadOnlyEPiggy ePiggy) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        saveEPiggy(ePiggy, filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public void saveEPiggy(ReadOnlyEPiggy ePiggy, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        requireNonNull(ePiggy);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableEPiggy(ePiggy), filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public void backupEPiggy(ReadOnlyEPiggy ePiggy) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        saveEPiggy(ePiggy, backupFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 76,
      "tehwenyi": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/epiggy/JsonSerializableEPiggy.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "package seedu.address.storage.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.EPiggy;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.ReadOnlyEPiggy;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Allowance;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Budget;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Expense;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " * An Immutable epiggy that is serializable to JSON format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "@JsonRootName(value \u003d \"epiggy\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "public class JsonSerializableEPiggy {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private final List\u003cJsonAdaptedExpense\u003e expenses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private final List\u003cJsonAdaptedBudget\u003e budgets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private final JsonAdaptedGoal goal;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * Constructs a {@code JsonSerializableEPiggy} with the given expense."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public JsonSerializableEPiggy(@JsonProperty(\"expenses\") List\u003cJsonAdaptedExpense\u003e expenses,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                                  @JsonProperty(\"goal\") JsonAdaptedGoal goal,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                                  @JsonProperty(\"budgets\") List\u003cJsonAdaptedBudget\u003e budgets) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        this.expenses.addAll(expenses);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        this.budgets.addAll(budgets);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        this.goal \u003d goal;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * Converts a given {@code ReadOnlyEPiggy} into this class for Jackson use."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableEPiggy}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public JsonSerializableEPiggy(ReadOnlyEPiggy source) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        expenses.addAll(source.getExpenseList().stream().map(JsonAdaptedExpense::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        budgets.addAll(source.getBudgetList().stream().map(JsonAdaptedBudget::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        goal \u003d new JsonAdaptedGoal(source.getGoal().get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * Converts this epiggy into the model\u0027s {@code EPiggy} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public EPiggy toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        EPiggy ePiggy \u003d new EPiggy();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        for (JsonAdaptedExpense jsonAdaptedExpense : expenses) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            Expense expense \u003d jsonAdaptedExpense.toModelType();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            if (expense instanceof Allowance) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                ePiggy.addAllowance((Allowance) expense);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                ePiggy.addExpense(expense);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        for (int i \u003d 0; i \u003c budgets.size(); i++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            Budget budget \u003d budgets.get(i).toModelType();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            ePiggy.addBudget(i, budget);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        ePiggy.setGoal(goal.toModelType());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return ePiggy;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 65,
      "tehwenyi": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final URL DEFAULT_PAGE \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(MainApp.class.getResource(FXML_FILE_FOLDER + \"default.html\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final String SEARCH_PAGE_URL \u003d \"https://se-education.org/dummy-search-page/?name\u003d\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanel(ObservableValue\u003cPerson\u003e selectedPerson) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Load person page when selected person changes."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        selectedPerson.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                loadDefaultPage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            loadPersonPage(newValue);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadPersonPage(Person person) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(SEARCH_PAGE_URL + person.getName().fullName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(DEFAULT_PAGE.toExternalForm());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tehwenyi": 1,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BudgetCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.epiggy.Budget;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " * A UI component that displays information of a {@code Budget}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "public class BudgetCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(BudgetCard.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private static final String FXML \u003d \"BudgetListCard.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public final Budget budget;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private Label budgetTitle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private Label budgetedAmount;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private Label startDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private Label endDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private Label period;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private Label currentStatus;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private Label remainingAmount;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private Label remainingDays;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private Label notification;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public BudgetCard(int displayedIndex, Budget budget) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        budgetTitle.setText(displayedIndex + \". \" + budget.getStatus() + \" Budget\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        budgetedAmount.setText(\"Amount: $\" + budget.getBudgetedAmount().toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        DateFormat dateFormat \u003d new SimpleDateFormat(\"dd MMM yyyy (E)\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        startDate.setText(\"Start Date: \" + dateFormat.format(budget.getStartDate()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        calendar.setTime(budget.getEndDate());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        calendar.add(Calendar.DAY_OF_MONTH, -1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        endDate.setText(\"End Date: \" + dateFormat.format(calendar.getTime()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        period.setText(\"Period of Budget: \" + budget.getPeriod().toString() + \" days\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        currentStatus.setText(\"Status\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        if (budget.getRemainingAmount().getAmount() \u003e\u003d 0) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            remainingAmount.setText(\"Amount remaining: $\" + budget.getRemainingAmount().toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            remainingAmount.setText(\"Amount exceeded: $\" + budget.getPositiveRemainingAmount().toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        remainingDays.setText(\"Days remaining: \" + budget.getRemainingDays().toString() + \" days\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        if (budget.getRemainingAmount().getAmount() \u003c 0) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            notification.setText(\"You have exceeded your budget!\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            notification.setStyle(\"-fx-font-weight: bold; -fx-border-color: firebrick;\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                    + \"-fx-text-fill: white; -fx-background-color: crimson;\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        } else if (budget.getRemainingAmount().getAmount() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            notification.setText(\"You have $0 left of your budget!\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            notification.setStyle(\"-fx-font-weight: bold; -fx-border-color: orchid; \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                    + \"-fx-text-fill: white; -fx-background-color: mediumorchid;\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        } else if (budget.getRemainingAmount().getAmount() \u003c (budget.getBudgetedAmount().getAmount() / 5)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            notification.setText(\"You have spent more than 80% of your budget. \\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                    + \"Please control your expenses!\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            notification.setStyle(\"-fx-font-weight: bold; -fx-border-color: tomato; \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                    + \"-fx-text-fill: white; -fx-background-color: coral;\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            notification.setText(\"“Save money and money will save you.”\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                    + \"Remember to spend wisely!\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            notification.setStyle(\"-fx-font-weight: bold; -fx-border-color: thistle;\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                    + \"-fx-text-fill: white; -fx-background-color: plum;\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    //     * Returns the color style for {@code tagName}\u0027s label."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    //    private String getTagColorStyleFor(String tagName) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    //        // generate a random color from the hash code of the tag so the color remain consistent"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    //        // between different runs of the program while still making it random enough between tags."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    //        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    //     * Creates the tag labels for {@code person}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    //    private void initialiseTags(Budget budget) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    //        budget.getItem().getTags().forEach(tag -\u003e {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    //            Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    //            tagLabel.getStyleClass().add(getTagColorStyleFor(tag.tagName));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    //            tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    //        });"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        if (!(other instanceof BudgetCard)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // need to change"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        //        BudgetCard card \u003d (BudgetCard) other;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        //        return remainingDays.getText().equals(card.remainingDays.getText())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        //                \u0026\u0026 budget.equals(card.budget);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tehwenyi": 129
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BudgetPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.epiggy.Budget;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " * Panel containing the budget status."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "public class BudgetPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private static final String FXML \u003d \"BudgetPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(BudgetPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private ListView\u003cBudget\u003e budgetView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public BudgetPanel(ObservableList\u003cBudget\u003e budgetList, Consumer\u003cBudget\u003e setCurrentBudget) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        budgetView.setItems(budgetList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        budgetView.setCellFactory(listView -\u003e new BudgetListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        //        budget.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        //            logger.fine(\"Budget changed to: \" + newValue);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        //            // Don\u0027t modify selection if we are already selecting the selected expense,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        //            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        //            if (Objects.equals(budgetView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        //                return;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        //            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        //"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        //            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        //                budgetView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        //            } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        //                int index \u003d budgetView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        //                budgetView.scrollTo(index);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        //                budgetView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        //            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        //        });"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Budget} using a {@code ExpenseCard}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    class BudgetListViewCell extends ListCell\u003cBudget\u003e {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        protected void updateItem(Budget budget, boolean empty) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            super.updateItem(budget, empty);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            if (empty || budget \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                setGraphic(new BudgetCard(getIndex() + 1, budget).getRoot());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tehwenyi": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private static int tabCount \u003d 0; // count for \"tab\" pressed"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e history;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private String[] keywords \u003d { \"addExpense n/ $/ t/ d/\", \"deleteExpense \", \"editExpense\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        \"report d/\", \"list \", \"help \", \"edit \", \"search \", \"sort \", \"exit\", \"view \","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        \"editBudget $/ p/ d/\", \"percentage\", \"addBudget $/ p/ d/\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        \"addAllowance $/\", \"deleteBudget \", \"setGoal n/ $/\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        \"viewGoal\", \"viewSavings \", \"sE n/\"};"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor, List\u003cString\u003e history) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.history \u003d history;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d new ListElementPointer(history);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Find set of similar prefix keywords."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * @param partOfString user enters prefix"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * @param strings      keywords checklist"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * @return set of same prefix keywords."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private static String[] findString(String partOfString, String[] strings) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        if (partOfString.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            // partOfString is null, return empty array"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            return new String[0];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        ArrayList\u003cString\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        // for each elements in strings, compare with part of the string."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        for (int i \u003d 0; i \u003c strings.length; i++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            if (partOfString.length() \u003e strings[i].length()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            } else if (partOfString.equals(strings[i].substring(0, partOfString.trim().length()))) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                result.add(strings[i]);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        return result.toArray(new String[result.size()]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        case TAB:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            autoCompleteText();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * auto complete text."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private void autoCompleteText() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        String[] inputString \u003d commandTextField.getText().split(\" \"); //split with white space"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        String partOfString \u003d inputString[inputString.length - 1]; // get the last element of input string"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        String[] results \u003d findString(partOfString, keywords);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        for (int i \u003d 0; i \u003c inputString.length - 1; i++) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            /* group user inputs */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            stringBuilder.append(inputString[i].trim());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            stringBuilder.append(\" \");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        if (results.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            /* if result is null, nothing match */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            stringBuilder.append(inputString[inputString.length - 1]); // adds back last element of input string"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            if (tabCount \u003e\u003d results.length) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                tabCount \u003d 0; // reset tabCount when tabCount bigger than match keywords number"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                stringBuilder.append(results[tabCount]); // adds found keyword"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                stringBuilder.append(results[tabCount]); // adds found keyword"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        commandTextField.requestFocus(); // set focus back to the textfield"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        commandTextField.setText(stringBuilder.toString()); // updates the textfield"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        commandTextField.positionCaret(stringBuilder.length()); // set caret after the new text"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        tabCount++;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d new ListElementPointer(history);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yunjun199321": 69,
      "-": 153
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ExpenseCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pdnm"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Allowance;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.model.epiggy.Expense;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pdnm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pdnm"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pdnm"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pdnm"
        },
        "content": "public class ExpenseCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ExpenseCard.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    private static final String FXML \u003d \"ExpenseListCard.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    private static final String[] TAG_COLOR_STYLES \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        { \"turquoise\", \"orange\", \"yellow\", \"green\", \"black\", \"blue\", \"pink\", \"grey\" };"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on EPiggy level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public final Expense expense;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    private Label cost;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public ExpenseCard(Expense expense, int displayedIndex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        this.expense \u003d expense;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        name.setText(expense.getItem().getName().name);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        if (expense instanceof Allowance) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            cost.setText(\"Amount: \" + expense.getItem().getCost().toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            cost.setText(\"Cost: \" + expense.getItem().getCost().toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"EEE, MMM d, yyyy\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        date.setText(String.format(\"Added on: %s \\n\", formatter.format(expense.getDate())));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        initialiseTags(expense);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     * Returns the color style for {@code tagName}\u0027s label."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    private String getTagColorStyleFor(String tagName) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        // generate a random color from the hash code of the tag so the color remain consistent"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        // between different runs of the program while still making it random enough between tags."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     * Creates the tag labels for {@code person}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    private void initialiseTags(Expense expense) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        expense.getItem().getTags().forEach(tag -\u003e {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            tagLabel.getStyleClass().add(getTagColorStyleFor(tag.tagName));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        });"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        if (!(other instanceof ExpenseCard)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        ExpenseCard card \u003d (ExpenseCard) other;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pdnm"
        },
        "content": "                \u0026\u0026 expense.equals(card.expense);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pdnm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 7,
      "pdnm": 92,
      "tehwenyi": 1,
      "rahulb99": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ExpenseListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pdnm"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.model.epiggy.Expense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pdnm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pdnm"
        },
        "content": " * Panel containing the list of expenses."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pdnm"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pdnm"
        },
        "content": "public class ExpenseListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    private static final String FXML \u003d \"ExpenseListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ExpenseListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    private ListView\u003cExpense\u003e expenseListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public ExpenseListPanel(ObservableList\u003cExpense\u003e expenseList, ObservableValue\u003cExpense\u003e selectedExpense,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            Consumer\u003cExpense\u003e onSelectedExpenseChange) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        ObservableList uilist;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        expenseListView.setItems(expenseList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        expenseListView.setCellFactory(listView -\u003e new ExpenseListViewCell());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        expenseListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            logger.fine(\"Selection in expense list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            onSelectedExpenseChange.accept(newValue);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        });"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        selectedExpense.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            logger.fine(\"Selected expense changed to: \" + newValue);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected expense,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            if (Objects.equals(expenseListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pdnm"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pdnm"
        },
        "content": "                expenseListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pdnm"
        },
        "content": "                int index \u003d expenseListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pdnm"
        },
        "content": "                expenseListView.scrollTo(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pdnm"
        },
        "content": "                expenseListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        });"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Expense} using a {@code ExpenseCard}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    class ExpenseListViewCell extends ListCell\u003cExpense\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        protected void updateItem(Expense expense, boolean empty) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            super.updateItem(expense, empty);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            if (empty || expense \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pdnm"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pdnm"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pdnm"
        },
        "content": "                setGraphic(new ExpenseCard(expense, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pdnm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pdnm": 71,
      "rahulb99": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    private ExpenseListPanel expenseListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private SavingsPanel savingsPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private BudgetPanel budgetPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private StackPane savingsPanelPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    private StackPane expenseListPanelPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private StackPane budgetPanelPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanel(logic.selectedPersonProperty());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        expenseListPanel \u003d new ExpenseListPanel(logic.getFilteredExpenseList(),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                logic.selectedExpenseProperty(), expense -\u003e {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        }); //TODO"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        expenseListPanelPlaceholder.getChildren().add(expenseListPanel.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        savingsPanel \u003d new SavingsPanel(logic.getFilteredExpenseList(), logic.getGoal(), logic::getSavings);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        savingsPanelPlaceholder.getChildren().add(savingsPanel.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        budgetPanel \u003d new BudgetPanel(logic.getFilteredBudgetList(), logic::setCurrentBudget);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        budgetPanelPlaceholder.getChildren().add(budgetPanel.getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getEPiggyFilePath(), logic.getEPiggy());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, logic.getHistory());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Shows daily summary to user."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private void handleDailyReport() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            logic.execute(\"report\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage(), \"report t/daily\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Shows monthly summary to user."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private void handleMonthlyReport() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            logic.execute(\"report type/monthly\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage(), \"report t/monthly\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Shows yearly summary to user."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private void handleYearlyReport() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            logic.execute(\"report type/yearly\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage(), \"report t/yearly\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Shows percentage summary to user."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private void handlePercentageReport() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            logic.execute(\"report type/percentage\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage(), \"report t/percentage\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    public ExpenseListPanel getExpenseListPanel() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        return expenseListPanel;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser(), commandText);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage(), commandText);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yunjun199321": 53,
      "kev-inc": 11,
      "pdnm": 7,
      "tehwenyi": 6,
      "-": 194
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private static final String[] TAG_COLOR_STYLES \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        { \"turquoise\", \"orange\", \"yellow\", \"green\", \"black\", \"blue\", \"beige\", \"pink\", \"white\", \"grey\" };"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on EPiggy level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        initialiseTags(person);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Returns the color style for {@code tagName}\u0027s label."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private String getTagColorStyleFor(String tagName) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // generate a random color from the hash code of the tag so the color remain consistent"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // between different runs of the program while still making it random enough between tags."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Creates the tag labels for {@code person}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private void initialiseTags(Person person) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        person.getTags().forEach(tag -\u003e {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            tagLabel.getStyleClass().add(getTagColorStyleFor(tag.tagName));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tehwenyi": 24,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel(ObservableList\u003cPerson\u003e personList, ObservableValue\u003cPerson\u003e selectedPerson,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pdnm"
        },
        "content": "                           Consumer\u003cPerson\u003e onSelectedPersonChange) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            onSelectedPersonChange.accept(newValue);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        selectedPerson.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.fine(\"Selected person changed to: \" + newValue);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected person,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            if (Objects.equals(personListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                personListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                int index \u003d personListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                personListView.scrollTo(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                personListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pdnm": 1,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ReportData.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": " * Data class is used for collecting data from expenses, savings and budgets."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": " * Data class is also used for spot the data to the report chart."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "public class ReportData {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private double budget;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private double expense;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private double allowance;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public ReportData(int year) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public double getAllowance() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        return allowance;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public void setAllowance(double allowance) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        this.allowance \u003d allowance;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public double getBudget() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        return budget;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public void setBudget(double budget) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public double getExpense() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        return expense;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public void setExpense(double expense) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        this.expense \u003d expense;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public double updateValue(double original, double newValue) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        return original + newValue;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yunjun199321": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ReportWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import javafx.scene.Group;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import javafx.scene.chart.AreaChart;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import javafx.scene.chart.BarChart;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import javafx.scene.chart.LineChart;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import javafx.stage.Modality;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.model.epiggy.Budget;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.model.epiggy.Expense;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": " * Report Window. Provides report and chart to the user."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "public class ReportWindow {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private Stage window;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * A method controls report chart display."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * @param model EPiggy model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * @param date  User specified date, month or year"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * @param type  Report display type"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public void displayReportController(Model model, LocalDate date, String type) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        logger.info(\"Creates Report window\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        ReportDisplayType expenseDisplayType \u003d ReportDisplayType.valueOf(type);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        window \u003d new Stage();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        window.initModality(Modality.APPLICATION_MODAL);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        window.setTitle(\"Report\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        switch (expenseDisplayType) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        case ALL:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            displayCompleteReport(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        case DAY:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            displayReportOnSpecifiedDay(model, date);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        case MONTH:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            displayReportOnSpecifiedMonth(model, date);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        case YEAR:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            displayReportOnSpecifiedYear(model, date);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            displayCompleteReport(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        window.showAndWait();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Display daily summary on area chart."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private void displayReportOnSpecifiedDay(Model model, LocalDate date) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        double minSpend \u003d Double.MAX_VALUE; // minimum spend of the day"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        double maxSpend \u003d Double.MIN_VALUE; // maximum spend of the day"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        double totalSpend \u003d 0; // total spend of the day"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        boolean isEmptyExpenseData \u003d true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        // Creates an Area Chart"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        final NumberAxis xAxis \u003d new NumberAxis(0, 24, 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        final NumberAxis yAxis \u003d new NumberAxis();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        final AreaChart\u003cNumber, Number\u003e areaChart \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                new AreaChart\u003c\u003e(xAxis, yAxis);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        areaChart.setTitle(\"Report for date: \" + date);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        XYChart.Series seriesExpense \u003d new XYChart.Series();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        seriesExpense.setName(\"Expense\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        yAxis.setLabel(\"Expense\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        xAxis.setLabel(\"Hours\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        Calendar calExpenseDay \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        Calendar calSpecifiedDay \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        calSpecifiedDay.setTime(Date.from(date.atStartOfDay().atZone(ZoneId.systemDefault())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                .toInstant())); // coverts localDate to calendar."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        final ObservableList\u003cExpense\u003e expenses \u003d model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        double[] hours \u003d new double[24];"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        if (!expenses.isEmpty()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            // expense is not empty"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            for (Expense expense : expenses) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                Date currentDate \u003d expense.getDate();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                // convert to calender object."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                calExpenseDay.setTime(currentDate);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                // find specified date and type of the expense is not allowance"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                if (calExpenseDay.get(Calendar.DAY_OF_MONTH)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                        \u003d\u003d calSpecifiedDay.get(Calendar.DAY_OF_MONTH)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                        \u0026\u0026 !expense.getItem().getName()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                        .toString().equals(\"Allowance\")) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    // data is not empty"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    isEmptyExpenseData \u003d false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    // find min value"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    double price \u003d expense.getItem().getCost().getAmount();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    if (price \u003c minSpend) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                        minSpend \u003d price;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    // find max value"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    if (price \u003e maxSpend) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                        maxSpend \u003d price;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    // calculate total value"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    totalSpend +\u003d price;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    // hour as index, amount as value"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    int hour \u003d calExpenseDay.get(Calendar.HOUR_OF_DAY);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    hours[hour] +\u003d expense.getItem().getCost().getAmount();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            for (int i \u003d 0; i \u003c hours.length; i++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                seriesExpense.getData().add(new XYChart.Data(i, hours[i])); // spot data to the chart"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        // JavaFx chart setup"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        // create a layout of the new window"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        VBox layout \u003d new VBox(10);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        Label min \u003d new Label();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        Label max \u003d new Label();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        Label total \u003d new Label();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        if (!isEmptyExpenseData) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            min.setText(\"The minimum amount of expense for today: S$\" + minSpend);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            max.setText(\"The maximum amount of expense for today: S$\" + maxSpend);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            total.setText(\"The total amount of expense for today: S$\" + totalSpend);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            layout.getChildren().addAll(areaChart, min, max, total);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            // JavaFx bug, need to manually set all nodes margin!!!"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            VBox.setMargin(areaChart, new Insets(10, 20, 10, 10));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            VBox.setMargin(min, new Insets(5, 10, 0, 50));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            VBox.setMargin(max, new Insets(5, 10, 0, 50));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            VBox.setMargin(total, new Insets(5, 10, 0, 50));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            total.setText(\"No Record found!\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            layout.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            layout.getChildren().addAll(areaChart, total);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        Scene scene \u003d new Scene(layout, 800, 600);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        areaChart.getData().add(seriesExpense);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        window.setScene(scene);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Displays monthly summary on line chart."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private void displayReportOnSpecifiedMonth(Model model, LocalDate date) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        Date targetDate \u003d Date.from(date.atStartOfDay().atZone(ZoneId.systemDefault()).toInstant());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        cal.setTime(targetDate);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //defining the axes"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        final NumberAxis xAxis \u003d new NumberAxis(1, 31, 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        final NumberAxis yAxis \u003d new NumberAxis();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        xAxis.setLabel(\"Days\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        yAxis.setLabel(\"Amount\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //creates the chart"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        final LineChart\u003cNumber, Number\u003e lineChart \u003d new LineChart\u003c\u003e(xAxis, yAxis);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        lineChart.setTitle(\"Report for month: \" + date.getMonth().toString()"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                .substring(0, 1).toUpperCase() + date.getMonth().toString().substring(1).toLowerCase()"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                + \" \" + date.getYear()); // Format chart title."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        XYChart.Series seriesExpense \u003d new XYChart.Series();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        seriesExpense.setName(\"Expense\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        XYChart.Series seriesAllowance \u003d new XYChart.Series();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        seriesAllowance.setName(\"Allowance\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        final ObservableList\u003cExpense\u003e expenses \u003d model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        double[] exps \u003d new double[31];"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        double[] allowances \u003d new double[31];"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        double totalAllowance \u003d 0; // total allowance of the month"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        double totalExpense \u003d 0; // total expense of the month"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        double minExpense \u003d Double.MAX_VALUE; // a minimum amount of expense within the month"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        double maxExpense \u003d Double.MIN_VALUE; // a maximum amount of expense within the month"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        int dayWithMinExpense \u003d 0; // the day with minimum expense"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        int dayWithMaxExpense \u003d 0; // the day with maximum expense"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        boolean isExpenseDataEmpty \u003d true;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        boolean isAllowanceDataEmpty \u003d true;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        if (!expenses.isEmpty()) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            for (Expense expense : expenses) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                LocalDate currentDay \u003d expense.getDate().toInstant().atZone(ZoneId.systemDefault())"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                        .toLocalDate();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                // find same year and same month with the target month"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                if (currentDay.getMonthValue() \u003d\u003d date.getMonthValue()"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                        \u0026\u0026 currentDay.getYear() \u003d\u003d date.getYear()) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    // -1 because getMonthValue from 1 to 12"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    if (expense.getItem().getName().toString().equals(\"Allowance\")) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                        // calculate total allowance"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                        allowances[currentDay.getMonthValue() - 1] +\u003d expense.getItem().getCost().getAmount();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                        isAllowanceDataEmpty \u003d false;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                        exps[currentDay.getMonthValue() - 1] +\u003d expense.getItem().getCost().getAmount();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                        isExpenseDataEmpty \u003d false;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        // spot the data into the chart"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        for (int i \u003d 0; i \u003c allowances.length; i++) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            // calculate total expense and allowance"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            totalAllowance +\u003d allowances[i];"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            totalExpense +\u003d exps[i];"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            // get the days with min, max expense value"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            if (exps[i] \u003c minExpense) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                minExpense \u003d exps[i];"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                dayWithMinExpense \u003d i + 1; // day is not start from 0."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            if (exps[i] \u003e maxExpense) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                maxExpense \u003d exps[i];"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                dayWithMaxExpense \u003d i + 1;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            // spot the chart"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            seriesExpense.getData().add(new XYChart.Data(i + 1, exps[i]));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            seriesAllowance.getData().add(new XYChart.Data(i + 1, allowances[i]));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        // JavaFX stage content setup"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        lineChart.getData().addAll(seriesExpense, seriesAllowance);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        VBox layout \u003d new VBox(10);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        Label labelOfTotalExpense \u003d new Label();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        Label labelOfTotalAllowance \u003d new Label();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        Label labelOfTotalSaving \u003d new Label();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        Label labelOfMinExpenseDay \u003d new Label();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        Label labelOfMaxExpenseDay \u003d new Label();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        if (!isAllowanceDataEmpty || !isExpenseDataEmpty) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            if (isExpenseDataEmpty) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                minExpense \u003d 0;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                maxExpense \u003d 0;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            // adds labels into layout"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            labelOfTotalExpense.setText(\"The total amount of expense on this month: S$\""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    + totalExpense);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            labelOfTotalAllowance.setText(\"The total amount of allowance on this month: S$\""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    + totalAllowance);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            labelOfTotalSaving.setText(\"The total amount of Saving on this month: S$\""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    + (totalAllowance - totalExpense));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            labelOfMinExpenseDay.setText(\"The lowest expense record is S$\""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    + minExpense"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    + \" at \""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    + dayWithMinExpense"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    + \" \""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    + new SimpleDateFormat(\"MMM\").format(cal.getTime())"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    + \" \""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    + cal.get(Calendar.YEAR));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            labelOfMaxExpenseDay.setText(\"The highest expense record is S$\""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    + maxExpense"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    + \" at \""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    + dayWithMaxExpense"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    + \" \""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    + new SimpleDateFormat(\"MMM\").format(cal.getTime())"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    + \" \""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    + cal.get(Calendar.YEAR));"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            layout.getChildren().addAll(lineChart, labelOfTotalExpense, labelOfTotalAllowance,"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    labelOfTotalSaving, labelOfMaxExpenseDay, labelOfMinExpenseDay);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            // JavaFx bug, need to manually set all nodes margin!!!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            VBox.setMargin(lineChart, new Insets(10, 20, 10, 10));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            VBox.setMargin(labelOfTotalAllowance, new Insets(5, 10, 0, 50));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            VBox.setMargin(labelOfTotalExpense, new Insets(5, 10, 0, 50));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            VBox.setMargin(labelOfTotalSaving, new Insets(5, 10, 0, 50));"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            VBox.setMargin(labelOfMaxExpenseDay, new Insets(5, 10, 0, 50));"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            VBox.setMargin(labelOfMinExpenseDay, new Insets(5, 10, 0, 50));"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            layout.getChildren().addAll(lineChart, labelOfTotalExpense);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            labelOfTotalExpense.setText(\"No record found!\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            layout.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            // JavaFx bug, need to manually set all nodes margin!!!"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            VBox.setMargin(lineChart, new Insets(10, 20, 10, 10));"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            VBox.setMargin(labelOfTotalExpense, new Insets(5, 10, 0, 50));"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        Scene scene \u003d new Scene(layout, 800, 600);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        window.setScene(scene);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Display the proportion of income spent on different categories on pie chart."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private Group displayExpensePercentageReport(double totalExpense, double totalAllowance) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        double totalSaving \u003d (totalAllowance \u003c totalExpense) ? 0 : (totalAllowance - totalExpense);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e pieChartData \u003d"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                FXCollections.observableArrayList("
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                        new PieChart.Data(\"Total expense\", totalExpense),"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                        new PieChart.Data(\"Total saving\", totalSaving));"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        final PieChart chart \u003d new PieChart(pieChartData);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        chart.setTitle(\"Percentage of total saving over total expense\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //setting the direction to arrange the data"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        chart.setClockwise(true);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //Setting legend and labels"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        chart.setLabelLineLength(15);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //Setting the labels of the pie chart visible"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        chart.setLabelsVisible(true);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //Setting the start angle of the pie chart"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        chart.setStartAngle(180);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //Creating a Group object"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        return new Group(chart);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Displays yearly summary on bar chart."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private void displayReportOnSpecifiedYear(Model model, LocalDate date) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        final NumberAxis yAxis \u003d new NumberAxis();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        final CategoryAxis xAxis \u003d new CategoryAxis();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        final BarChart\u003cString, Number\u003e bc \u003d"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                new BarChart\u003c\u003e(xAxis, yAxis);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        bc.setTitle(\"Report for year: \" + date.getYear());"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        yAxis.setLabel(\"Amount\");"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        xAxis.setLabel(\"Months\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        XYChart.Series seriesAllowance \u003d new XYChart.Series();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        seriesAllowance.setName(\"Allowance\");"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        XYChart.Series seriesExpense \u003d new XYChart.Series();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        seriesExpense.setName(\"Expense\");"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        XYChart.Series seriesBudget \u003d new XYChart.Series();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        seriesBudget.setName(\"Budget\");"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        final ObservableList\u003cBudget\u003e budgetList \u003d model.getFilteredBudgetList();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        final ObservableList\u003cExpense\u003e expenseList \u003d model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        double[] budgets \u003d new double[12];"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        double[] allowances \u003d new double[12];"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        double[] expenses \u003d new double[12];"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        double totalAllowance \u003d 0; // total allowance of the year"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        double totalExpense \u003d 0; // total expense of the year"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        double totalBudget \u003d 0; // total budget of the year"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        double minExpenseValue \u003d Double.MAX_VALUE;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        double maxExpenseValue \u003d Double.MIN_VALUE;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        int monthWithMinExpense \u003d 0; // the day with minimum expense"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        int monthWithMaxExpense \u003d 0; // the day with maximum expense"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        boolean isExpenseEmpty \u003d true;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        boolean isBudgetEmpty \u003d true;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        boolean isAllowanceEmpty \u003d true;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        if (!expenseList.isEmpty()) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            for (Expense expense : expenseList) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                LocalDate currentDate \u003d expense.getDate().toInstant().atZone(ZoneId.systemDefault())"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                        .toLocalDate();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                if (currentDate.getYear() \u003d\u003d date.getYear()) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    // found the specified year"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    double value \u003d expense.getItem().getCost().getAmount();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    if (expense.getItem().getName().toString().equals(\"Allowance\")) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                        // allowance"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                        allowances[currentDate.getMonthValue() - 1] +\u003d value;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                        isAllowanceEmpty \u003d false;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                        // expense"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                        expenses[currentDate.getMonthValue() - 1] +\u003d value;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                        isExpenseEmpty \u003d false;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        if (!budgetList.isEmpty()) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            for (Budget budget : budgetList) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                LocalDate currentDate \u003d budget.getStartDate().toInstant().atZone(ZoneId.systemDefault())"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                        .toLocalDate();"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                if (currentDate.getYear() \u003d\u003d date.getYear()) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                    budgets[currentDate.getMonthValue() - 1] +\u003d budget.getBudgetedAmount().getAmount();"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    isBudgetEmpty \u003d false;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        String[] months \u003d {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\","
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            \"Sep\", \"Oct\", \"Nov\", \"Dec\"};"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        String[] monthsLong \u003d {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\","
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            \"August\", \"September\", \"October\", \"November\", \"December\"};"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        for (int i \u003d 0; i \u003c expenses.length; i++) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            // calculate total expense and allowance"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            totalExpense +\u003d expenses[i];"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            totalAllowance +\u003d allowances[i];"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            totalBudget +\u003d budgets[i];"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            // get the days with min, max expense value"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            if (expenses[i] \u003c minExpenseValue) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                minExpenseValue \u003d expenses[i];"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                monthWithMinExpense \u003d i;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            if (expenses[i] \u003e maxExpenseValue) {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                maxExpenseValue \u003d expenses[i];"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                monthWithMaxExpense \u003d i;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            seriesExpense.getData().add(new XYChart.Data(months[i], expenses[i]));"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            seriesBudget.getData().add(new XYChart.Data(months[i], budgets[i]));"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            seriesAllowance.getData().add(new XYChart.Data(months[i], allowances[i]));"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        VBox layout \u003d new VBox(10);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        Label labelOfTotalExpense \u003d new Label();"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        Label labelOfTotalAllowance \u003d new Label();"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        Label labelOfTotalSaving \u003d new Label();"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        Label labelOfTotalBudget \u003d new Label();"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        Label labelOfMinExpenseDay \u003d new Label();"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        Label labelOfMaxExpenseDay \u003d new Label();"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        if (!isAllowanceEmpty || !isBudgetEmpty || !isExpenseEmpty) {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            if (isExpenseEmpty) {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                minExpenseValue \u003d 0;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                maxExpenseValue \u003d 0;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            // adds labels into layout"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            labelOfTotalExpense.setText(\"The total amount of expense on this year: S$\""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    + totalExpense);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            labelOfTotalAllowance.setText(\"The total amount of allowance on this year: S$\""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    + totalAllowance);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            labelOfTotalSaving.setText(\"The total amount of saving on this year: S$\""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    + (totalAllowance - totalExpense));"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            labelOfTotalBudget.setText(\"The total amount of budget on this year: S$\""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    + totalBudget);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            labelOfMinExpenseDay.setText(monthsLong[monthWithMinExpense]"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    + \" is the least consumed month in \""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    + date.getYear()"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    + \". The lowest expense record is S$\""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    + minExpenseValue);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            labelOfMaxExpenseDay.setText(monthsLong[monthWithMaxExpense]"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    + \" is the most consumed month in \""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    + date.getYear()"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    + \". The highest expense record is S$\""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    + maxExpenseValue);"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            layout.getChildren().addAll(bc, labelOfTotalExpense, labelOfTotalAllowance,"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    labelOfTotalBudget, labelOfTotalSaving, labelOfMaxExpenseDay, labelOfMinExpenseDay);"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            VBox.setMargin(bc, new Insets(10, 20, 10, 10));"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            VBox.setMargin(labelOfTotalAllowance, new Insets(5, 10, 0, 50));"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            VBox.setMargin(labelOfTotalExpense, new Insets(5, 10, 0, 50));"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            VBox.setMargin(labelOfTotalSaving, new Insets(5, 10, 0, 50));"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            VBox.setMargin(labelOfTotalBudget, new Insets(5, 10, 0, 50));"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            VBox.setMargin(labelOfMaxExpenseDay, new Insets(5, 10, 0, 50));"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            VBox.setMargin(labelOfMinExpenseDay, new Insets(5, 10, 0, 50));"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            labelOfTotalExpense.setText(\"No record found!\");"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            layout.getChildren().addAll(bc, labelOfTotalExpense);"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            VBox.setMargin(bc, new Insets(10, 20, 10, 10));"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            layout.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        Scene scene \u003d new Scene(layout, 800, 650);"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        bc.getData().addAll(seriesBudget, seriesExpense, seriesAllowance);"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        window.setScene(scene);"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Displays all expenses, allowances and budgets of the user on bar chart."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private void displayCompleteReport(Model model) {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        final NumberAxis yAxis \u003d new NumberAxis();"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        final CategoryAxis xAxis \u003d new CategoryAxis();"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        final BarChart\u003cString, Number\u003e bc \u003d"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                new BarChart\u003c\u003e(xAxis, yAxis);"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        final ObservableList\u003cBudget\u003e budgets \u003d model.getFilteredBudgetList();"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        final ObservableList\u003cExpense\u003e expenses \u003d model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        boolean isExpenseEmpty \u003d true;"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        bc.setTitle(\"Completed Summary\");"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        yAxis.setLabel(\"Amount\");"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        xAxis.setLabel(\"Year\");"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        HashMap\u003cInteger, ReportData\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        // convert expense data into ReportData"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        if (!expenses.isEmpty()) {"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            for (int i \u003d 0; i \u003c expenses.size(); i++) {"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                int year \u003d expenses.get(i).getDate().toInstant().atZone(ZoneId.systemDefault())"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                        .toLocalDate().getYear(); // get year from expense"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                ReportData data;"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "pdnm"
        },
        "content": "                double amount \u003d expenses.get(i).getItem().getCost().getAmount();"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                if (map.containsKey(year)) {"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    // if year data exists"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    ReportData temp \u003d map.get(year);"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    if (expenses.get(i).getItem().getName().toString().equals(\"Allowance\")) {"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                        // expense type is allowance."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                        temp.setAllowance(temp.updateValue(temp.getAllowance(), amount));"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                        // expense type is expense."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                        temp.setExpense(temp.updateValue(temp.getExpense(), amount));"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                        isExpenseEmpty \u003d false;"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    map.put(year, temp);"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    // year data does not exist"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    data \u003d new ReportData(year);"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    if (expenses.get(i).getItem().getName().toString().equals(\"Allowance\")) {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                        data.setAllowance(amount);"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                        data.setExpense(amount);"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    map.put(year, data);"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                }"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            }"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        // convert expense data to ReportData"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        if (!budgets.isEmpty()) {"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            for (int i \u003d 0; i \u003c budgets.size(); i++) {"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                int year \u003d budgets.get(i).getStartDate().toInstant().atZone(ZoneId.systemDefault())"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                        .toLocalDate().getYear(); // get year from expense"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                ReportData data;"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                double amount \u003d budgets.get(i).getBudgetedAmount().getAmount();"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                if (map.containsKey(year)) {"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    // if year data exists"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    ReportData temp \u003d map.get(year);"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    temp.setBudget(temp.updateValue(temp.getBudget(), amount));"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    map.put(year, temp);"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    // year data does not exist"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    data \u003d new ReportData(year);"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    data.setBudget(amount);"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    map.put(year, data);"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                }"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            }"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        XYChart.Series series1 \u003d new XYChart.Series();"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        series1.setName(\"Allowance\");"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        XYChart.Series series2 \u003d new XYChart.Series();"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        series2.setName(\"Expense\");"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        XYChart.Series series3 \u003d new XYChart.Series();"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        series3.setName(\"Budget\");"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        double totalExpense \u003d 0;"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        double totalBudget \u003d 0;"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        double totalAllowance \u003d 0;"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        double maxExpense \u003d Double.MIN_VALUE;"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        String yearWithMaxExpense \u003d \"\";"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        TreeMap\u003cInteger, ReportData\u003e tm \u003d new TreeMap\u003c\u003e(map);"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        for (Map.Entry\u003cInteger, ReportData\u003e entry : tm.entrySet()) {"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            totalAllowance +\u003d entry.getValue().getAllowance();"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            totalBudget +\u003d entry.getValue().getBudget();"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            totalExpense +\u003d entry.getValue().getExpense();"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            if (entry.getValue().getExpense() \u003e maxExpense) {"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                maxExpense \u003d entry.getValue().getExpense();"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                yearWithMaxExpense \u003d entry.getKey().toString();"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            }"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            series1.getData().add(new XYChart.Data(entry.getKey().toString(),"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    entry.getValue().getAllowance()));"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            series2.getData().add(new XYChart.Data(entry.getKey().toString(),"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    entry.getValue().getExpense()));"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            series3.getData().add(new XYChart.Data(entry.getKey().toString(),"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    entry.getValue().getBudget()));"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        VBox layout \u003d new VBox(10);"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        Label labelOfTotalExpense \u003d new Label();"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        Label labelOfTotalAllowance \u003d new Label();"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        Label labelOfTotalSaving \u003d new Label();"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        Label labelOfTotalBudget \u003d new Label();"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        Label labelOfMaxExpenseValue \u003d new Label();"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        Label labelOfMaxExpenseYear \u003d new Label();"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        if (!tm.isEmpty()) {"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            if (isExpenseEmpty) {"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                // reset max expense value to 0"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                maxExpense \u003d 0;"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            }"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            // adds labels into layout"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            labelOfTotalExpense.setText(\"The total amount of expense: S$\""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    + totalExpense);"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            labelOfTotalAllowance.setText(\"The total amount of allowance: S$\""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    + totalAllowance);"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            labelOfTotalSaving.setText(\"The total amount of saving: S$\""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    + (totalAllowance - totalExpense));"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            labelOfTotalBudget.setText(\"The total amount of budget: S$\""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    + totalBudget);"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            labelOfMaxExpenseYear.setText(yearWithMaxExpense"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    + \" is the most consumed year. \""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    + \"The highest expense record is S$\""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    + maxExpense);"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            // show pie chart"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            Group pieChart \u003d displayExpensePercentageReport(totalExpense, totalAllowance);"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            layout.getChildren().addAll(bc, pieChart, labelOfTotalExpense, labelOfTotalBudget,"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    labelOfTotalAllowance, labelOfTotalSaving, labelOfMaxExpenseYear, labelOfMaxExpenseValue);"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            // creates a scroll pane"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            ScrollPane sp \u003d new ScrollPane();"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            sp.setContent(layout);"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            // JavaFx bug, need to manually set all nodes margin!!!"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            VBox.setMargin(bc, new Insets(10, 20, 10, 10));"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            VBox.setMargin(labelOfTotalAllowance, new Insets(5, 10, 0, 50));"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            VBox.setMargin(labelOfTotalExpense, new Insets(5, 10, 0, 50));"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            VBox.setMargin(labelOfTotalSaving, new Insets(5, 10, 0, 50));"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            VBox.setMargin(labelOfTotalBudget, new Insets(5, 10, 0, 50));"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            VBox.setMargin(labelOfMaxExpenseValue, new Insets(5, 10, 0, 50));"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            VBox.setMargin(labelOfMaxExpenseYear, new Insets(5, 10, 0, 50));"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            Scene scene \u003d new Scene(sp, 800, 650);"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            bc.getData().addAll(series1, series2, series3);"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            window.setScene(scene);"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            labelOfTotalExpense.setText(\"No record found!\");"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            layout.getChildren().addAll(bc, labelOfTotalExpense);"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            layout.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            Scene scene \u003d new Scene(layout, 800, 650);"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            bc.getData().addAll(series1, series2, series3);"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            window.setScene(scene);"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Chart will be displayed according to report display type."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private enum ReportDisplayType {"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        MONTH, DAY, YEAR, ALL"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yunjun199321": 627,
      "pdnm": 1,
      "tehwenyi": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ResultDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private String messages \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        resultDisplay.setText(\"Welcome to ePiggy! \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                + \"Enter a command to get started, or enter \u0027help\u0027 to view all the available commands!\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser, String commandEntered) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        messages \u003d \"ePiggy: \" + feedbackToUser + \"\\n\\n\" + \"You: \" + commandEntered + \"\\n\\n\" + messages;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        resultDisplay.setText(messages);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 9,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/SavingsPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Expense;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Goal;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.item.Cost;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " * Panel containing savings information."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "public class SavingsPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private static final String FXML \u003d \"SavingsPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(SavingsPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private Label currentSavings;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private Label currentGoal;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private Label amountDifferenceTitle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private Label amountDifference;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public SavingsPanel(ObservableList\u003cExpense\u003e expense, ObservableValue\u003cGoal\u003e goal,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                        Supplier\u003cObservableValue\u003cCost\u003e\u003e onSavingsChange) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        expense.addListener((ListChangeListener\u003c? super Expense\u003e) observable -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            refreshPanel(goal, onSavingsChange);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        });"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        goal.addListener(observable -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            refreshPanel(goal, onSavingsChange);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        refreshPanel(goal, onSavingsChange);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * Updates the savings panel with new changes."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * @param goal"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * @param onSavingsChange"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private void refreshPanel(ObservableValue\u003cGoal\u003e goal, Supplier\u003cObservableValue\u003cCost\u003e\u003e onSavingsChange) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        currentSavings.setText(onSavingsChange.get().getValue().toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        if (goal.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            currentGoal.setText(\"(None set)\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            amountDifference.setText(\"$0.00\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            currentGoal.setText(goal.getValue().toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            double diff \u003d goal.getValue().getAmount().getAmount() - onSavingsChange.get().getValue().getAmount();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            if (diff \u003e 0) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                amountDifferenceTitle.setVisible(true);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                amountDifference.setText(\"$\" + diff);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                amountDifferenceTitle.setVisible(false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                amountDifference.setText(\"Congratulations!\\nYou\u0027ve reached your\\nsavings goal!\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.ReadOnlyEPiggy;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label syncStatus;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public StatusBarFooter(Path saveLocation, ReadOnlyEPiggy ePiggy) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        ePiggy.addListener(observable -\u003e updateSyncStatus());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates \"last updated\" status to the current time."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private void updateSyncStatus() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tehwenyi": 4,
      "-": 66
    }
  },
  {
    "path": "src/main/resources/view/BudgetListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003c?import javafx.scene.paint.*?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003c?import javafx.scene.text.*?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003cHBox fx:id\u003d\"cardPane\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/2.2\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "  \u003cGridPane prefHeight\u003d\"271.0\" prefWidth\u003d\"302.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"150.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105.0\" prefHeight\u003d\"284.9998779296875\" prefWidth\u003d\"323.0\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "      \u003cLabel fx:id\u003d\"budgetTitle\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        \u003cminWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "          \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "          \u003cDouble fx:value\u003d\"-Infinity\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "      \u003cLabel fx:id\u003d\"budgetedAmount\" prefWidth\u003d\"182.0\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$budgetedAmount\" textFill\u003d\"#9f9f9f\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "      \u003cLabel fx:id\u003d\"startDate\" prefWidth\u003d\"182.0\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$startDate\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        \u003ctextFill\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "          \u003cColor blue\u003d\"0.625\" green\u003d\"0.625\" red\u003d\"0.625\" fx:id\u003d\"x1\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        \u003c/textFill\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "      \u003cLabel fx:id\u003d\"endDate\" prefWidth\u003d\"182.0\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$endDate\" textFill\u003d\"$x1\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "      \u003cLabel fx:id\u003d\"period\" prefWidth\u003d\"196.0\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$period\" textFill\u003d\"$x1\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "      \u003cLabel fx:id\u003d\"currentStatus\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        \u003cminWidth\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "          \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "          \u003cDouble fx:value\u003d\"-Infinity\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "      \u003cLabel fx:id\u003d\"remainingAmount\" prefWidth\u003d\"174.0\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remainingAmount\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "      \u003cLabel fx:id\u003d\"remainingDays\" prefWidth\u003d\"166.0\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remainingDays\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        \u003cInsets bottom\u003d\"5.0\" left\u003d\"15.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "      \u003cLabel text\u003d\"Reminder:\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "      \u003cLabel fx:id\u003d\"notification\" alignment\u003d\"CENTER\" blendMode\u003d\"SRC_OVER\" contentDisplay\u003d\"TOP\" labelFor\u003d\"$notification\" prefHeight\u003d\"67.0\" prefWidth\u003d\"282.0\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$notification\" textAlignment\u003d\"CENTER\" textFill\u003d\"WHITE\" textOverrun\u003d\"ELLIPSIS\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        \u003cfont\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "          \u003cFont name\u003d\"Lobster1.4\" size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        \u003c/font\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "tehwenyi": 58
    }
  },
  {
    "path": "src/main/resources/view/BudgetPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    \u003cListView fx:id\u003d\"budgetView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "tehwenyi": 8
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ".savings-text {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    -fx-font-size: 18pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "#tags .turquoise {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    -fx-background-color: #40E0D0;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "#tags .orange {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    -fx-background-color: orange;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "#tags .yellow {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    -fx-background-color: yellow;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "}"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "#tags .green {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    -fx-background-color: green;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "}"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "#tags .black {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "#tags .blue {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    -fx-background-color: blue;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "}"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "#tags .beige {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    -fx-background-color: #F5F5DC;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "}"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "#tags .pink {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    -fx-background-color: pink;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "}"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "#tags .white {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "}"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "#tags .grey {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    -fx-background-color: grey;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 7,
      "tehwenyi": 50,
      "-": 350
    }
  },
  {
    "path": "src/main/resources/view/ExpenseListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pdnm"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pdnm"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pdnm"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pdnm"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pdnm"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pdnm"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pdnm"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pdnm"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pdnm"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pdnm"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pdnm"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pdnm"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pdnm"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pdnm"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pdnm"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pdnm"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pdnm"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pdnm"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            \u003cLabel fx:id\u003d\"cost\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$cost\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pdnm"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "pdnm": 35
    }
  },
  {
    "path": "src/main/resources/view/ExpenseListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pdnm"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pdnm"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pdnm"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pdnm"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    \u003cListView fx:id\u003d\"expenseListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pdnm"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "pdnm": 8
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- TODO: set a more appropriate initial size --\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "         title\u003d\"Help\" maximized\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cWebView fx:id\u003d\"browser\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "rahulb99": 1
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "         title\u003d\"ePiggy\" minWidth\u003d\"750\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\" \u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"How To Use\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"User Manual\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Report\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"summaryMenuItem_daily\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleDailyReport\" text\u003d\"Completed Report\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4, 0.5, 0.5, 0.5\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "               \u003cVBox fx:id\u003d\"messages\" minWidth\u003d\"340.0\" prefWidth\u003d\"340.0\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                         \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                             \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                                 \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                             \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                         \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                         \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                             \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                                 \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                             \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                         \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                     \u003cInsets top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "               \u003c/VBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                    \u003cVBox fx:id\u003d\"expenseList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"expenseListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                    \u003cVBox fx:id\u003d\"savings\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pdnm"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pdnm"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"savingsPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pdnm"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                    \u003cVBox fx:id\u003d\"budgetList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"budgetPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\"\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "yunjun199321": 23,
      "kev-inc": 4,
      "pdnm": 3,
      "tehwenyi": 5,
      "-": 55,
      "rahulb99": 1
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 2,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/SavingsPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "   \u003cLabel styleClass\u003d\"label-bright\" text\u003d\"Current Savings:\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "   \u003cLabel fx:id\u003d\"currentSavings\" styleClass\u003d\"savings-text\" text\u003d\"\\$0.00\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "   \u003cRegion prefHeight\u003d\"53.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "   \u003cLabel styleClass\u003d\"label-bright\" text\u003d\"Current Savings Goal:\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "   \u003cLabel fx:id\u003d\"currentGoal\" styleClass\u003d\"savings-text\" text\u003d\"item name\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "   \u003cRegion layoutX\u003d\"10.0\" layoutY\u003d\"44.0\" prefHeight\u003d\"53.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "   \u003cLabel fx:id\u003d\"amountDifferenceTitle\" styleClass\u003d\"label-bright\" text\u003d\"Difference of:\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "   \u003cLabel fx:id\u003d\"amountDifference\" styleClass\u003d\"savings-text\" text\u003d\"amount diff\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 16,
      "-": 1
    }
  },
  {
    "path": "src/main/resources/view/SummaryWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "\u003c?import javafx.scene.chart.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "\u003c?import javafx.scene.chart.AreaChart?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "\u003c?import javafx.scene.chart.CategoryAxis?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "\u003c?import javafx.scene.chart.NumberAxis?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "\u003cBorderPane fx:id\u003d\"default_expense_chart\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    \u003cbottom\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        \u003cTextArea fx:id\u003d\"command_text_area\" prefHeight\u003d\"86.0\" prefWidth\u003d\"600.0\" promptText\u003d\"Enter command\" BorderPane.alignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    \u003c/bottom\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    \u003ccenter\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        \u003cAreaChart fx:id\u003d\"Expense_area_chart\" title\u003d\"Expense chart\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            \u003cxAxis\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                \u003cCategoryAxis label\u003d\"Date\" side\u003d\"BOTTOM\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            \u003cyAxis\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                \u003cNumberAxis label\u003d\"Expense\" side\u003d\"LEFT\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        \u003c/AreaChart\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    \u003c/center\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "\u003c/BorderPane\u003e"
      }
    ],
    "authorContributionMap": {
      "yunjun199321": 27
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "  \"_comment\": \"EPiggy save file which contains the same Person values as in TypicalPersons#getTypicalEPiggy()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"alice@example.com\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"friends\" ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"98765432\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"johnd@example.com\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"311, Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"owesMoney\", \"friends\" ]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"95352563\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"heinz@example.com\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"wall street\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"87652533\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"cornelia@example.com\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"10th street\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"friends\" ]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482224\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"werner@example.com\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"michegan ave\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482427\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"lydia@example.com\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"little tokyo\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"George Best\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482442\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"anna@example.com\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"4th street\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tehwenyi": 1,
      "-": 45
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainMenuHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle to the main menu of the app."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainMenuHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MENU_BAR_ID \u003d \"#menuBar\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle(Node mainMenuNode) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(mainMenuNode);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the {@code HelpWindow} using the menu bar in {@code MainWindow}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindowUsingMenu() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        clickOnMenuItemsSequentially(\"Help\", \"F1\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Opens the {@code ReportWindow} using the menu bar in {@code MainWindow}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public void openReportWindowUsingMenu() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        clickOnMenuItemsSequentially(\"Report\", \"Completed Report\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the {@code HelpWindow} by pressing the shortcut key associated"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * with the menu bar in {@code MainWindow}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindowUsingAccelerator() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.F1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Clicks on {@code menuItems} in order."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private void clickOnMenuItemsSequentially(String... menuItems) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(menuItems).forEach(guiRobot::clickOn);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yunjun199321": 7,
      "-": 39
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    //    private final PersonListPanelHandle personListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final BrowserPanelHandle browserPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //personListPanel \u003d new PersonListPanelHandle(getChildNode(PersonListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    //    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    //        return personListPanel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return browserPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yunjun199321": 5,
      "-": 46
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/epiggy/ReportWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "package guitests.guihandles.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": " * This class is used to handle report window."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "public class ReportWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public static final String REPORT_WINDOW_TITLE \u003d \"Report\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Report window constructor."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * @param reportWindowStage Stage of window."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public ReportWindowHandle(Stage reportWindowStage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        super(reportWindowStage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Returns true if a report window is currently present in the application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public static boolean isWindowPresent() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        return new GuiRobot().isWindowShown(REPORT_WINDOW_TITLE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yunjun199321": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/EpiggyTestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.model.EPiggy;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.model.ReadOnlyEPiggy;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.storage.epiggy.JsonEPiggyStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "public class EpiggyTestApp extends MainApp {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            .getFilePathInSandboxFolder(\"sampleEpiggyData.json\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing_epiggy.json\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    protected Supplier\u003cReadOnlyEPiggy\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public EpiggyTestApp() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public EpiggyTestApp(Supplier\u003cReadOnlyEPiggy\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            JsonEPiggyStorage jsonEPiggyStorage \u003d new JsonEPiggyStorage(saveFileLocation);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                jsonEPiggyStorage.saveEPiggy(initialDataSupplier.get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        userPrefs.setEPiggyFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public EPiggy readStorageEPiggy() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            return new EPiggy(storage.readEPiggy().get());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            throw new AssertionError(\"Data is not in the EPiggy format.\", dce);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        return storage.getEPiggyFilePath();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        Model copy \u003d new ModelManager((model.getEPiggy()), new UserPrefs());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredPersonList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yunjun199321": 112
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.EPiggy;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.ReadOnlyEPiggy;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.storage.epiggy.JsonEPiggyStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.json\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    protected Supplier\u003cReadOnlyEPiggy\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyEPiggy\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            JsonEPiggyStorage jsonEPiggyStorage \u003d new JsonEPiggyStorage(saveFileLocation);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                jsonEPiggyStorage.saveEPiggy(initialDataSupplier.get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        userPrefs.setEPiggyFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public EPiggy readStorageEPiggy() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            return new EPiggy(storage.readEPiggy().get());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"Data is not in the EPiggy format.\", dce);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return storage.getEPiggyFilePath();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Model copy \u003d new ModelManager((model.getEPiggy()), new UserPrefs());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredPersonList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 4,
      "tehwenyi": 10,
      "-": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.storage.JsonEPiggyStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        JsonEPiggyStorage addressBookStorage \u003d new JsonEPiggyStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // Setup LogicManager with JsonEPiggyIoExceptionThrowingStub"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        JsonEPiggyStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                new JsonEPiggyIoExceptionThrowingStub(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        expectedModel.commitEPiggy();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(CommandException.class, addCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(addCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private static class JsonEPiggyIoExceptionThrowingStub extends JsonEPiggyStorage {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        private JsonEPiggyIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 3,
      "tehwenyi": 9,
      "-": 175
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalEPiggy;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        model \u003d new ModelManager(getTypicalEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        expectedModel.commitEPiggy();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model, commandHistory,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Person personInList \u003d model.getEPiggy().getPersonList().get(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, commandHistory,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yunjun199321": 1,
      "kev-inc": 2,
      "tehwenyi": 5,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.EPiggy;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.ReadOnlyEPiggy;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Allowance;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Budget;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Expense;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Goal;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.item.Cost;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        public void reverseFilteredExpensesList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        public void sortExpenses(Comparator\u003cExpense\u003e comparator) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        public ObservableList\u003cExpense\u003e getExpenseList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        public ObservableList\u003cBudget\u003e getBudgetList() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public Path getEPiggyFilePath() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void setEPiggyFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void addAllowance(Allowance allowance) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        public ReadOnlyProperty\u003cExpense\u003e selectedExpenseProperty() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void addBudget(int index, Budget budget) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public boolean budgetsOverlap(Date startDate, Date endDate, Budget earlierBudget) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void deleteBudgetAtIndex(int index) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        public void deleteExpense(Expense toDelete) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public int getCurrentBudgetIndex() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public SimpleObjectProperty\u003cCost\u003e getSavings() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public SimpleObjectProperty\u003cGoal\u003e getGoal() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void setGoal(Goal goal) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        public void setSelectedExpense(Expense expense) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void setEPiggy(ReadOnlyEPiggy newData) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public ReadOnlyEPiggy getEPiggy() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void setCurrentBudget(Budget editedBudget) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public ObservableList\u003cBudget\u003e getFilteredBudgetList() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void updateFilteredBudgetList(Predicate\u003cBudget\u003e predicate) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        public void updateFilteredExpensesList(Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public boolean canUndoEPiggy() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public boolean canRedoEPiggy() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void undoEPiggy() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void redoEPiggy() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void commitEPiggy() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        public Expense getSelectedExpense() {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void commitEPiggy() {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public ReadOnlyEPiggy getEPiggy() {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            return new EPiggy();"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yunjun199321": 1,
      "kev-inc": 22,
      "pdnm": 18,
      "tehwenyi": 47,
      "-": 251,
      "rahulb99": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalEPiggy;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.EPiggy;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void execute_emptyEPiggy_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        expectedModel.commitEPiggy();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void execute_nonEmptyEPiggy_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        expectedModel.setEPiggy(new EPiggy());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        expectedModel.commitEPiggy();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tehwenyi": 9,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERIOD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.commands.epiggy.EditBudgetCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.commands.epiggy.EditExpenseCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.EPiggy;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.epiggy.Budget;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.epiggy.Expense;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.epiggy.ExpenseContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.testutil.epiggy.EditBudgetDetailsBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.testutil.epiggy.EditExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final String VALID_TAG_FOOD \u003d \"food\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final String VALID_TAG_FRIENDS \u003d \"friends\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final String VALID_DATE_2018 \u003d \"10/07/2018\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final String VALID_DATE_2019 \u003d \"03/20/2019\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final String VALID_NAME_BOWLING \u003d \"bowling at West Bowl centre\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final String VALID_COST_BOWLING \u003d \"4.80\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final String VALID_NAME_IPHONE \u003d \"IPhone XR from challenger\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final String VALID_COST_IPHONE \u003d \"1799.00\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final String VALID_AMOUNT_FIRSTEXTRA \u003d \"500\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final String VALID_AMOUNT_SECONDEXTRA \u003d \"1000\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final String VALID_PERIOD_FIRSTEXTRA \u003d \"7\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final String VALID_PERIOD_SECONDEXTRA \u003d \"28\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final String VALID_DATE_FIRSTEXTRA \u003d \"03/03/2019\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final String VALID_DATE_SECONDEXTRA \u003d \"01/02/2019\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final String AMOUNT_DESC_FIRSTEXTRA \u003d \" \" + PREFIX_COST + VALID_AMOUNT_FIRSTEXTRA;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final String AMOUNT_DESC_SECONDEXTRA \u003d \" \" + PREFIX_COST + VALID_AMOUNT_SECONDEXTRA;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final String PERIOD_DESC_FIRSTEXTRA \u003d \" \" + PREFIX_PERIOD + VALID_PERIOD_FIRSTEXTRA;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final String PERIOD_DESC_SECONDEXTRA \u003d \" \" + PREFIX_PERIOD + VALID_PERIOD_SECONDEXTRA;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final String DATE_DESC_FIRSTEXTRA \u003d \" \" + PREFIX_DATE + VALID_DATE_FIRSTEXTRA;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final String DATE_DESC_SECONDEXTRA \u003d \" \" + PREFIX_DATE + VALID_DATE_SECONDEXTRA;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final String INVALID_AMOUNT_DESC \u003d \" \" + PREFIX_COST + \"-500.00\"; // negative cost is not allowed"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final String INVALID_PERIOD_DESC \u003d \" \" + PREFIX_PERIOD + \"0\"; // period of 0 is not allowed"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE + \"12/04\"; // year should be mentioned"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final String NAME_DESC_BOWLING \u003d \" \" + PREFIX_NAME + VALID_NAME_BOWLING;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final String NAME_DESC_IPHONE \u003d \" \" + PREFIX_NAME + VALID_NAME_IPHONE;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final String COST_DESC_BOWLING \u003d \" \" + PREFIX_COST + VALID_COST_BOWLING;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final String COST_DESC_IPHONE \u003d \" \" + PREFIX_COST + VALID_COST_IPHONE;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final String DATE_DESC_2018 \u003d \" \" + PREFIX_DATE + VALID_DATE_2018;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final String DATE_DESC_2019 \u003d \" \" + PREFIX_DATE + VALID_DATE_2019;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final String TAG_DESC_FRIENDS \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIENDS;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final String INVALID_COST_DESC \u003d \" \" + PREFIX_COST + \"0.00\"; // cost of 0 is not allowed"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"food*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final EditExpenseCommand.EditExpenseDescriptor DESC_BOWLING;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final EditExpenseCommand.EditExpenseDescriptor DESC_IPHONE;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final EditBudgetCommand.EditBudgetDetails DESC_FIRSTEXTRA;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final EditBudgetCommand.EditBudgetDetails DESC_SECONDEXTRA;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        DESC_BOWLING \u003d new EditExpenseDescriptorBuilder().withName(VALID_NAME_BOWLING)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                .withCost(VALID_COST_BOWLING).withDate(VALID_DATE_2018)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                .withTags(VALID_TAG_FRIENDS).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        DESC_IPHONE \u003d new EditExpenseDescriptorBuilder().withName(VALID_NAME_IPHONE)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                .withCost(VALID_COST_IPHONE).withDate(VALID_DATE_2019).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        DESC_FIRSTEXTRA \u003d new EditBudgetDetailsBuilder().withAmount(VALID_AMOUNT_FIRSTEXTRA)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                .withPeriod(VALID_PERIOD_FIRSTEXTRA).withDate(VALID_DATE_FIRSTEXTRA).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        DESC_SECONDEXTRA \u003d new EditBudgetDetailsBuilder().withAmount(VALID_AMOUNT_SECONDEXTRA)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                .withPeriod(VALID_PERIOD_SECONDEXTRA).withDate(VALID_DATE_SECONDEXTRA).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model)}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        EPiggy expectedEPiggy \u003d new EPiggy(actualModel.getEPiggy());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        List\u003cExpense\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredExpenseList());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        Expense expectedSelectedExpense \u003d actualModel.getSelectedExpense();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            assertEquals(expectedEPiggy, actualModel.getEPiggy());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredExpenseList());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            assertEquals(expectedSelectedExpense, actualModel.getSelectedExpense());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the expense at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        Expense expense \u003d model.getFilteredExpenseList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        String[] splitName \u003d expense.getItem().getName().name.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        final ArgumentMultimap keywordsMap \u003d ArgumentTokenizer.tokenize(\" n/\""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                + splitName[0], PREFIX_NAME);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        model.updateFilteredExpensesList(new ExpenseContainsKeywordsPredicate(keywordsMap));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        assertEquals(1, model.getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the budget at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * {@code model}\u0027s epiggy."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static void showBudgetAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredBudgetList().size());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Budget budget \u003d model.getFilteredBudgetList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        model.updateFilteredBudgetList(Predicate.isEqual(budget));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(1, model.getFilteredBudgetList().size());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the expense at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * {@code model}\u0027s epiggy."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static void showExpenseAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredExpenseList().size());;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        Expense expense \u003d model.getExpenseList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        model.updateFilteredExpensesList(Predicate.isEqual(expense));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertEquals(1, model.getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * Deletes the first expense in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        Expense firstExpense \u003d model.getFilteredExpenseList().get(0);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        model.deleteExpense(firstExpense);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        model.commitEPiggy();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 11,
      "tehwenyi": 43,
      "-": 134,
      "rahulb99": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalEPiggy;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        expectedModel.commitEPiggy();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        expectedModel.commitEPiggy();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getEPiggy().getPersonList().size());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        expectedModel.commitEPiggy();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e first person deleted"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        expectedModel.undoEPiggy();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person deleted again"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        expectedModel.redoEPiggy();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Deletes a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted person in the"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the person object regardless of indexing."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        expectedModel.commitEPiggy();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e deletes second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        expectedModel.undoEPiggy();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(personToDelete, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e deletes same second person in unfiltered person list"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        expectedModel.redoEPiggy();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 5,
      "tehwenyi": 15,
      "-": 162,
      "rahulb99": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalEPiggy;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.EPiggy;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new EPiggy(model.getEPiggy()), new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        expectedModel.commitEPiggy();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new EPiggy(model.getEPiggy()), new UserPrefs());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        expectedModel.commitEPiggy();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new EPiggy(model.getEPiggy()), new UserPrefs());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        expectedModel.commitEPiggy();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new EPiggy(model.getEPiggy()), new UserPrefs());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        expectedModel.commitEPiggy();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Person personInList \u003d model.getEPiggy().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getEPiggy().getPersonList().size());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new EPiggy(model.getEPiggy()), new UserPrefs());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        expectedModel.commitEPiggy();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e first person edited"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        expectedModel.undoEPiggy();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person edited again"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        expectedModel.redoEPiggy();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Edits a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new EPiggy(model.getEPiggy()), new UserPrefs());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        expectedModel.commitEPiggy();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        expectedModel.undoEPiggy();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e edits same second person in unfiltered person list"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        expectedModel.redoEPiggy();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 7,
      "tehwenyi": 21,
      "-": 227
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalEPiggy;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 2,
      "tehwenyi": 3,
      "-": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalEPiggy;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        model \u003d new ModelManager(getTypicalEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tehwenyi": 3,
      "-": 38,
      "rahulb99": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalEPiggy;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        model.undoEPiggy();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        model.undoEPiggy();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        expectedModel.undoEPiggy();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        expectedModel.undoEPiggy();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        expectedModel.redoEPiggy();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        expectedModel.redoEPiggy();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 2,
      "tehwenyi": 9,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalEPiggy;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_PERSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getEPiggy().getPersonList().size());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index},"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * and checks that the model\u0027s selected person is set to the person at {@code index} in the filtered person list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setSelectedPerson(model.getFilteredPersonList().get(index.getZeroBased()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 2,
      "tehwenyi": 4,
      "-": 104
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalEPiggy;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        expectedModel.undoEPiggy();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        expectedModel.undoEPiggy();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tehwenyi": 5,
      "-": 40,
      "rahulb99": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/epiggy/AddAllowanceCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "package seedu.address.logic.commands.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.ReadOnlyEPiggy;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Allowance;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Budget;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Expense;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Goal;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.item.Cost;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.testutil.epiggy.AllowanceBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "public class AddAllowanceCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public void execute_allowanceAcceptedByModel_addSuccessful() throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        ModelStubAcceptingAllowanceAdded modelStub \u003d new ModelStubAcceptingAllowanceAdded();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        Allowance validAllowance \u003d new AllowanceBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        CommandResult commandResult \u003d new AddAllowanceCommand(validAllowance).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertEquals(String.format(AddAllowanceCommand.MESSAGE_SUCCESS, validAllowance),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertEquals(Arrays.asList(validAllowance), modelStub.allowanceAdded);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void reverseFilteredExpensesList() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public ObservableList\u003cBudget\u003e getBudgetList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void sortExpenses(Comparator\u003cExpense\u003e comparator) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public ObservableList\u003cExpense\u003e getExpenseList() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public Path getEPiggyFilePath() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void setEPiggyFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void addAllowance(Allowance allowance) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public ReadOnlyProperty\u003cExpense\u003e selectedExpenseProperty() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void addBudget(int index, Budget budget) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public boolean budgetsOverlap(Date startDate, Date endDate, Budget earlierBudget) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void deleteBudgetAtIndex(int index) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void deleteExpense(Expense toDelete) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public int getCurrentBudgetIndex() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public SimpleObjectProperty\u003cCost\u003e getSavings() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public SimpleObjectProperty\u003cGoal\u003e getGoal() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void setGoal(Goal goal) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void setSelectedExpense(Expense expense) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void setEPiggy(ReadOnlyEPiggy newData) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public ReadOnlyEPiggy getEPiggy() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void setCurrentBudget(Budget editedBudget) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public ObservableList\u003cBudget\u003e getFilteredBudgetList() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void updateFilteredBudgetList(Predicate\u003cBudget\u003e predicate) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void updateFilteredExpensesList(Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public boolean canUndoEPiggy() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public boolean canRedoEPiggy() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void undoEPiggy() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void redoEPiggy() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void commitEPiggy() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public Expense getSelectedExpense() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private class ModelStubAcceptingAllowanceAdded extends ModelStub {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        final ArrayList\u003cExpense\u003e allowanceAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void addAllowance(Allowance allowance) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            requireNonNull(allowance);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            allowanceAdded.add(allowance);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void commitEPiggy() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            // called by {@code AddAllowance#execute()}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 293
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/epiggy/AddBudgetCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "package seedu.address.logic.commands.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.EPiggy;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.ReadOnlyEPiggy;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.epiggy.Allowance;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.epiggy.Budget;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.epiggy.Expense;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.epiggy.Goal;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.item.Cost;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.testutil.TypicalBudgets;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.testutil.epiggy.BudgetBuilder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "public class AddBudgetCommandTest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void constructor_nullBudget_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        new AddBudgetCommand(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void execute_budgetAcceptedByModelWithEmptyBudgetList_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        ModelStubAcceptingBudgetAdded modelStub \u003d new ModelStubAcceptingBudgetAdded();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Budget validBudget \u003d new BudgetBuilder().build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        CommandResult commandResult \u003d new AddBudgetCommand(validBudget).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(String.format(AddBudgetCommand.MESSAGE_SUCCESS, validBudget), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(Arrays.asList(validBudget), modelStub.budgetsAdded);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void execute_budgetAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        ModelStubWithBudgetAcceptingBudgetAdded modelStub \u003d new ModelStubWithBudgetAcceptingBudgetAdded();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Budget validBudget \u003d new BudgetBuilder().build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        CommandResult commandResult \u003d new AddBudgetCommand(validBudget).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(String.format(AddBudgetCommand.MESSAGE_SUCCESS, validBudget), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void execute_duplicateBudget_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Budget validBudget \u003d new BudgetBuilder().build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        AddBudgetCommand addBudgetCommand \u003d new AddBudgetCommand(validBudget);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithBudget(validBudget);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        thrown.expectMessage(AddBudgetCommand.MESSAGE_OVERLAPPING_BUDGET);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        addBudgetCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void execute_overlappingStartDate_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Budget validBudget \u003d new BudgetBuilder().build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        calendar.setTime(validBudget.getEndDate());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        calendar.add(Calendar.DAY_OF_MONTH, -1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        String endDate \u003d simpleDateFormat.format(calendar.getTime());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Budget overlappingBudget \u003d new BudgetBuilder().withDate(endDate).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        AddBudgetCommand addBudgetCommand \u003d new AddBudgetCommand(validBudget);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithBudget(overlappingBudget);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        thrown.expectMessage(AddBudgetCommand.MESSAGE_OVERLAPPING_BUDGET);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        addBudgetCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void execute_overlappingEndDate_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Budget validBudget \u003d new BudgetBuilder().build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        calendar.setTime(validBudget.getStartDate());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        calendar.add(Calendar.DAY_OF_MONTH, 1 - Integer.parseInt(BudgetBuilder.DEFAULT_PERIOD));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        String startDate \u003d simpleDateFormat.format(calendar.getTime());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Budget overlappingBudget \u003d new BudgetBuilder().withDate(startDate).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        AddBudgetCommand addBudgetCommand \u003d new AddBudgetCommand(validBudget);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithBudget(overlappingBudget);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        thrown.expectMessage(AddBudgetCommand.MESSAGE_OVERLAPPING_BUDGET);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        addBudgetCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void execute_budgetTooOld_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Budget validBudget \u003d new BudgetBuilder().withDate(\"01/01/2010\").build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        ModelStubWithMaximumNumberOfBudgets modelStub \u003d new ModelStubWithMaximumNumberOfBudgets();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        CommandResult commandResult \u003d new AddBudgetCommand(validBudget).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(AddBudgetCommand.MESSAGE_FAIL, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Budget twenty \u003d new BudgetBuilder().withAmount(\"20\").build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Budget fifty \u003d new BudgetBuilder().withAmount(\"50\").build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        AddBudgetCommand addTwentyCommand \u003d new AddBudgetCommand(twenty);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        AddBudgetCommand addFiftyCommand \u003d new AddBudgetCommand(fifty);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertTrue(addTwentyCommand.equals(addTwentyCommand));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // copy of object -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        AddBudgetCommand addTwentyCommandCopy \u003d new AddBudgetCommand(twenty);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertTrue(addTwentyCommand.equals(addTwentyCommandCopy));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        addTwentyCommandCopy \u003d new AddBudgetCommand(new BudgetBuilder().withAmount(\"20\").build());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertTrue(addTwentyCommand.equals(addTwentyCommandCopy));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertFalse(addTwentyCommand.equals(1));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertFalse(addTwentyCommand.equals(null));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // different budgets -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertFalse(addTwentyCommand.equals(addFiftyCommand));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        public void reverseFilteredExpensesList() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        public ObservableList\u003cBudget\u003e getBudgetList() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        public void sortExpenses(Comparator\u003cExpense\u003e comparator) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        public ObservableList\u003cExpense\u003e getExpenseList() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public Path getEPiggyFilePath() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void setEPiggyFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void addAllowance(Allowance allowance) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public ReadOnlyProperty\u003cExpense\u003e selectedExpenseProperty() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void addBudget(int index, Budget budget) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public boolean budgetsOverlap(Date startDate, Date endDate, Budget earlierBudget) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void deleteBudgetAtIndex(int index) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        public void deleteExpense(Expense toDelete) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public int getCurrentBudgetIndex() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public SimpleObjectProperty\u003cCost\u003e getSavings() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public SimpleObjectProperty\u003cGoal\u003e getGoal() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void setGoal(Goal goal) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void setSelectedExpense(Expense expense) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void setEPiggy(ReadOnlyEPiggy newData) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public ReadOnlyEPiggy getEPiggy() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void setCurrentBudget(Budget editedBudget) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public ObservableList\u003cBudget\u003e getFilteredBudgetList() {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void updateFilteredBudgetList(Predicate\u003cBudget\u003e predicate) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void updateFilteredExpensesList(Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public boolean canUndoEPiggy() {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public boolean canRedoEPiggy() {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void undoEPiggy() {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void redoEPiggy() {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void commitEPiggy() {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        public Expense getSelectedExpense() {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * A Model stub that contains a single budget."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private class ModelStubWithBudget extends ModelStub {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        final ArrayList\u003cBudget\u003e budgets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        private EPiggy ePiggy \u003d new EPiggy();"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        ModelStubWithBudget(Budget budget) {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            requireNonNull(budget);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            budgets.add(budget);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public ObservableList\u003cBudget\u003e getFilteredBudgetList() {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            return FXCollections.observableArrayList(budgets);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public boolean budgetsOverlap(Date startDate, Date endDate, Budget earlierBudget) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            return ePiggy.budgetsOverlap(startDate, endDate, earlierBudget);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private class ModelStubAcceptingBudgetAdded extends ModelStub {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        final ArrayList\u003cBudget\u003e budgetsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void addBudget(int index, Budget toAdd) {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            budgetsAdded.add(index, toAdd);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public ObservableList\u003cBudget\u003e getFilteredBudgetList() {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            return FXCollections.observableArrayList(budgetsAdded);"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public boolean budgetsOverlap(Date startDate, Date endDate, Budget earlierBudget) {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            requireAllNonNull(startDate, endDate, earlierBudget);"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void commitEPiggy() {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * A Model stub that contains a single budget that always accept the person being added."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private class ModelStubWithBudgetAcceptingBudgetAdded extends ModelStub {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        final ArrayList\u003cBudget\u003e budgetsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        ModelStubWithBudgetAcceptingBudgetAdded() {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            Budget budget \u003d new BudgetBuilder().withDate(\"12/12/2019\").build();"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            budgetsAdded.add(budget);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void addBudget(int index, Budget toAdd) {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            budgetsAdded.add(index, toAdd);"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public ObservableList\u003cBudget\u003e getFilteredBudgetList() {"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            return FXCollections.observableArrayList(budgetsAdded);"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public boolean budgetsOverlap(Date startDate, Date endDate, Budget earlierBudget) {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            requireAllNonNull(startDate, endDate, earlierBudget);"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void commitEPiggy() {"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * A Model stub that contains a single budget that always accept the person being added."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private class ModelStubWithMaximumNumberOfBudgets extends ModelStub {"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        private List\u003cBudget\u003e budgetsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        ModelStubWithMaximumNumberOfBudgets() {"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            budgetsAdded \u003d TypicalBudgets.getMaximumNumberOfBudgets();"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void addBudget(int index, Budget toAdd) {"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            // Empty as it does not add any budget"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public ObservableList\u003cBudget\u003e getFilteredBudgetList() {"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            return FXCollections.observableArrayList(budgetsAdded);"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public boolean budgetsOverlap(Date startDate, Date endDate, Budget earlierBudget) {"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            requireAllNonNull(startDate, endDate, earlierBudget);"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void commitEPiggy() {"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 2,
      "pdnm": 5,
      "tehwenyi": 484,
      "rahulb99": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/epiggy/AddExpenseCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "package seedu.address.logic.commands.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.ReadOnlyEPiggy;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Allowance;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Budget;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Expense;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Goal;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.item.Cost;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.testutil.epiggy.ExpensesBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "public class AddExpenseCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public void execute_expenseAcceptedByModel_addSuccessful() throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        ModelStubAcceptingExpenseAdded modelStub \u003d new ModelStubAcceptingExpenseAdded();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        Expense validExpense \u003d new ExpensesBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        CommandResult commandResult \u003d new AddExpenseCommand(validExpense).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertEquals(String.format(AddExpenseCommand.MESSAGE_SUCCESS, validExpense),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertEquals(Arrays.asList(validExpense), modelStub.expenseAdded);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void reverseFilteredExpensesList() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public ObservableList\u003cBudget\u003e getBudgetList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void sortExpenses(Comparator\u003cExpense\u003e comparator) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public ObservableList\u003cExpense\u003e getExpenseList() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public Path getEPiggyFilePath() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void setEPiggyFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void addAllowance(Allowance allowance) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public ReadOnlyProperty\u003cExpense\u003e selectedExpenseProperty() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void addBudget(int index, Budget budget) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public boolean budgetsOverlap(Date startDate, Date endDate, Budget earlierBudget) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void deleteBudgetAtIndex(int index) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void deleteExpense(Expense toDelete) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public int getCurrentBudgetIndex() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public SimpleObjectProperty\u003cCost\u003e getSavings() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public SimpleObjectProperty\u003cGoal\u003e getGoal() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void setGoal(Goal goal) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void setSelectedExpense(Expense expense) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void setEPiggy(ReadOnlyEPiggy newData) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public ReadOnlyEPiggy getEPiggy() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void setCurrentBudget(Budget editedBudget) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public ObservableList\u003cBudget\u003e getFilteredBudgetList() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void updateFilteredBudgetList(Predicate\u003cBudget\u003e predicate) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void updateFilteredExpensesList(Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public boolean canUndoEPiggy() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public boolean canRedoEPiggy() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void undoEPiggy() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void redoEPiggy() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void commitEPiggy() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public Expense getSelectedExpense() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private class ModelStubAcceptingExpenseAdded extends ModelStub {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        final ArrayList\u003cExpense\u003e expenseAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            requireNonNull(expense);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            expenseAdded.add(expense);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void commitEPiggy() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            // called by {@code AddExpense#execute()}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 295
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/epiggy/DeleteAllowanceCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "package seedu.address.logic.commands.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showExpenseAtIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ALLOWANCE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static seedu.address.testutil.epiggy.TypicalAllowances.getTypicalEPiggy;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Allowance;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Expense;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "public class DeleteAllowanceCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public void execute_validIndexIsAllowance_deleteSuccess() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        Allowance allowanceToDelete \u003d (Allowance) model.getFilteredExpenseList()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                .get(INDEX_FIRST_ALLOWANCE.getZeroBased());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        DeleteAllowanceCommand deleteAllowanceCommand \u003d new DeleteAllowanceCommand(INDEX_FIRST_ALLOWANCE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteAllowanceCommand.MESSAGE_DELETE_ALLOWANCE_SUCCESS,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                allowanceToDelete);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        expectedModel.deleteExpense(allowanceToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        expectedModel.commitEPiggy();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertCommandSuccess(deleteAllowanceCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public void execute_validIndexIsExpense_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        Model tempModel \u003d new ModelManager(seedu.address.testutil.epiggy.TypicalExpenses.getTypicalEPiggy(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        Expense expenseToDelete \u003d (Expense) tempModel.getFilteredExpenseList()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                .get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        DeleteAllowanceCommand deleteAllowanceCommand \u003d new DeleteAllowanceCommand(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteAllowanceCommand.MESSAGE_ITEM_NOT_ALLOWANCE,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                expenseToDelete);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(tempModel.getEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        expectedModel.deleteExpense(expenseToDelete);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        expectedModel.commitEPiggy();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertCommandFailure(deleteAllowanceCommand, tempModel, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public void execute_invalidIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getEPiggy().getExpenseList().size());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        DeleteAllowanceCommand deleteAllowanceCommand \u003d new DeleteAllowanceCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertCommandFailure(deleteAllowanceCommand, model, commandHistory,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                DeleteExpenseCommand.MESSAGE_INDEX_OUT_OF_BOUNDS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/epiggy/DeleteBudgetCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "package seedu.address.logic.commands.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showBudgetAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.testutil.TypicalBudgets.getTypicalEPiggy;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BUDGET;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BUDGET;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.epiggy.Budget;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " * {@code DeleteBudgetCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "public class DeleteBudgetCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Budget budgetToDelete \u003d model.getFilteredBudgetList().get(INDEX_FIRST_BUDGET.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        DeleteBudgetCommand deleteBudgetCommand \u003d new DeleteBudgetCommand(INDEX_FIRST_BUDGET);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteBudgetCommand.MESSAGE_DELETE_BUDGET_SUCCESS, budgetToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        expectedModel.deleteBudgetAtIndex(INDEX_FIRST_BUDGET.getZeroBased());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        expectedModel.commitEPiggy();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertCommandSuccess(deleteBudgetCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBudgetList().size() + 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        DeleteBudgetCommand deleteBudgetCommand \u003d new DeleteBudgetCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertCommandFailure(deleteBudgetCommand, model, commandHistory,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                Messages.MESSAGE_INVALID_BUDGET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        showBudgetAtIndex(model, INDEX_FIRST_BUDGET);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Budget budgetToDelete \u003d model.getFilteredBudgetList().get(INDEX_FIRST_BUDGET.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        DeleteBudgetCommand deleteBudgetCommand \u003d new DeleteBudgetCommand(INDEX_FIRST_BUDGET);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteBudgetCommand.MESSAGE_DELETE_BUDGET_SUCCESS, budgetToDelete);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        expectedModel.deleteBudgetAtIndex(INDEX_FIRST_BUDGET.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        expectedModel.commitEPiggy();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        showNoBudget(expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertCommandSuccess(deleteBudgetCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        showBudgetAtIndex(model, INDEX_FIRST_BUDGET);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_BUDGET;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getEPiggy().getBudgetList().size());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        DeleteBudgetCommand deleteBudgetCommand \u003d new DeleteBudgetCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertCommandFailure(deleteBudgetCommand, model, commandHistory,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                Messages.MESSAGE_INVALID_BUDGET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Budget budgetToDelete \u003d model.getFilteredBudgetList().get(INDEX_FIRST_BUDGET.getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        DeleteBudgetCommand deleteBudgetCommand \u003d new DeleteBudgetCommand(INDEX_FIRST_BUDGET);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        expectedModel.deleteBudgetAtIndex(INDEX_FIRST_BUDGET.getZeroBased());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        expectedModel.commitEPiggy();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // delete -\u003e first budget deleted"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        deleteBudgetCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered budget list to show all persons"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        expectedModel.undoEPiggy();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // redo -\u003e same first budget deleted again"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        expectedModel.redoEPiggy();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBudgetList().size() + 1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        DeleteBudgetCommand deleteBudgetCommand \u003d new DeleteBudgetCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertCommandFailure(deleteBudgetCommand, model, commandHistory,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                Messages.MESSAGE_INVALID_BUDGET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        DeleteBudgetCommand deleteFirstCommand \u003d new DeleteBudgetCommand(INDEX_FIRST_BUDGET);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        DeleteBudgetCommand deleteSecondCommand \u003d new DeleteBudgetCommand(INDEX_SECOND_BUDGET);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        DeleteBudgetCommand deleteFirstCommandCopy \u003d new DeleteBudgetCommand(INDEX_FIRST_BUDGET);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // different budget -\u003e returns false"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private void showNoBudget(Model model) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        model.updateFilteredBudgetList(p -\u003e false);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertTrue(model.getFilteredBudgetList().isEmpty());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tehwenyi": 151
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/epiggy/DeleteExpenseCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "package seedu.address.logic.commands.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showExpenseAtIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ALLOWANCE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static seedu.address.testutil.epiggy.TypicalExpenses.getTypicalEPiggy;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Allowance;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Expense;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "public class DeleteExpenseCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public void execute_validIndexIsExpense_deleteSuccess() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        Expense expenseToDelete \u003d model.getFilteredExpenseList()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                .get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        DeleteExpenseCommand deleteExpenseCommand \u003d new DeleteExpenseCommand(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteExpenseCommand.MESSAGE_DELETE_EXPENSE_SUCCESS,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                expenseToDelete);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        expectedModel.deleteExpense(expenseToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        expectedModel.commitEPiggy();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertCommandSuccess(deleteExpenseCommand, model, commandHistory,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public void execute_validIndexIsAllowance_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        Model tempModel \u003d new ModelManager(seedu.address.testutil.epiggy.TypicalAllowances.getTypicalEPiggy(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        Allowance allowanceToDelete \u003d (Allowance) tempModel.getFilteredExpenseList()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                .get(INDEX_FIRST_ALLOWANCE.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        DeleteExpenseCommand deleteExpenseCommand \u003d new DeleteExpenseCommand(INDEX_FIRST_ALLOWANCE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteExpenseCommand.MESSAGE_ITEM_NOT_EXPENSE,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                allowanceToDelete);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(tempModel.getEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        expectedModel.deleteExpense(allowanceToDelete);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        expectedModel.commitEPiggy();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertCommandFailure(deleteExpenseCommand, tempModel, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public void execute_invalidIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getEPiggy().getExpenseList().size());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        DeleteExpenseCommand deleteExpenseCommand \u003d new DeleteExpenseCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertCommandFailure(deleteExpenseCommand, model, commandHistory,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                DeleteExpenseCommand.MESSAGE_INDEX_OUT_OF_BOUNDS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/epiggy/EditBudgetCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "package seedu.address.logic.commands.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_FIRSTEXTRA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_SECONDEXTRA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_FIRSTEXTRA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.epiggy.EditBudgetCommand.createEditedBudget;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.testutil.TypicalBudgets.getTypicalEPiggy;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.util.GregorianCalendar;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.commands.epiggy.EditBudgetCommand.EditBudgetDetails;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.ReadOnlyEPiggy;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.epiggy.Allowance;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.epiggy.Budget;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.epiggy.Expense;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.epiggy.Goal;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.epiggy.item.Cost;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.epiggy.item.Period;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.testutil.epiggy.BudgetBuilder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.testutil.epiggy.EditBudgetDetailsBuilder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " * and unit tests for EditBudgetCommand."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "public class EditBudgetCommandTest {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private Date todaysDate \u003d new Date();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void execute_allFieldsSpecified_success() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        ModelStubWithOneCurrentBudget modelStub \u003d new ModelStubWithOneCurrentBudget();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        EditBudgetDetails details \u003d DESC_FIRSTEXTRA;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Budget budgetToEdit \u003d new BudgetBuilder().build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Budget editedBudget \u003d createEditedBudget(budgetToEdit, details);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        CommandResult commandResult \u003d new EditBudgetCommand(details).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(String.format(EditBudgetCommand.MESSAGE_EDIT_BUDGET_SUCCESS, editedBudget),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(Arrays.asList(editedBudget), modelStub.budgets);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void execute_amountSpecified_success() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        ModelStubWithOneCurrentBudget modelStub \u003d new ModelStubWithOneCurrentBudget();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Budget budgetToEdit \u003d new BudgetBuilder().build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        EditBudgetDetails details \u003d new EditBudgetDetails();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        details.setPeriod(budgetToEdit.getPeriod());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        details.setStartDate(budgetToEdit.getStartDate());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        details.setAmount(new Cost(200));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Budget editedBudget \u003d createEditedBudget(budgetToEdit, details);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        CommandResult commandResult \u003d new EditBudgetCommand(details).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(String.format(EditBudgetCommand.MESSAGE_EDIT_BUDGET_SUCCESS, editedBudget),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(Arrays.asList(editedBudget), modelStub.budgets);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void execute_periodSpecified_success() throws Exception {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        ModelStubWithOneCurrentBudget modelStub \u003d new ModelStubWithOneCurrentBudget();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Budget budgetToEdit \u003d new BudgetBuilder().build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        EditBudgetDetails details \u003d new EditBudgetDetails();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        details.setStartDate(budgetToEdit.getStartDate());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        details.setAmount(budgetToEdit.getBudgetedAmount());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        details.setPeriod(new Period(26));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Budget editedBudget \u003d createEditedBudget(budgetToEdit, details);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        CommandResult commandResult \u003d new EditBudgetCommand(details).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(String.format(EditBudgetCommand.MESSAGE_EDIT_BUDGET_SUCCESS, editedBudget),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(Arrays.asList(editedBudget), modelStub.budgets);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void execute_dateSpecified_success() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        ModelStubWithOneCurrentBudget modelStub \u003d new ModelStubWithOneCurrentBudget();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Budget budgetToEdit \u003d new BudgetBuilder().build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        EditBudgetDetails details \u003d new EditBudgetDetails();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        details.setAmount(budgetToEdit.getBudgetedAmount());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        details.setPeriod(budgetToEdit.getPeriod());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Date newDate \u003d new GregorianCalendar(2010, Calendar.FEBRUARY, 11).getTime();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        details.setStartDate(newDate);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Budget editedBudget \u003d createEditedBudget(budgetToEdit, details);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        CommandResult commandResult \u003d new EditBudgetCommand(details).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(String.format(EditBudgetCommand.MESSAGE_EDIT_BUDGET_SUCCESS, editedBudget),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(Arrays.asList(editedBudget), modelStub.budgets);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void execute_noCurrentBudget_failure() throws Exception {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        EditBudgetDetails details \u003d new EditBudgetDetailsBuilder().withAmount(VALID_AMOUNT_FIRSTEXTRA).build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        EditBudgetCommand editBudgetCommand \u003d new EditBudgetCommand(details);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        ModelStubWithNoCurrentBudget modelStub \u003d new ModelStubWithNoCurrentBudget();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        thrown.expectMessage(EditBudgetCommand.MESSAGE_EDIT_BUDGET_DOES_NOT_EXIST_FAIL);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        editBudgetCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        final EditBudgetCommand standardCommand \u003d new EditBudgetCommand(DESC_FIRSTEXTRA);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        EditBudgetDetails copyDetails \u003d new EditBudgetDetails(DESC_FIRSTEXTRA);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        EditBudgetCommand commandWithSameValues \u003d new EditBudgetCommand(copyDetails);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // different details -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertFalse(standardCommand.equals(new EditBudgetCommand(DESC_SECONDEXTRA)));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        public void reverseFilteredExpensesList() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public ObservableList\u003cBudget\u003e getBudgetList() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        public void sortExpenses(Comparator\u003cExpense\u003e comparator) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public ObservableList\u003cExpense\u003e getExpenseList() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public Path getEPiggyFilePath() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void setEPiggyFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void addAllowance(Allowance allowance) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public ReadOnlyProperty\u003cExpense\u003e selectedExpenseProperty() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void addBudget(int index, Budget budget) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public boolean budgetsOverlap(Date startDate, Date endDate, Budget earlierBudget) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void deleteBudgetAtIndex(int index) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void deleteExpense(Expense toDelete) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public int getCurrentBudgetIndex() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public SimpleObjectProperty\u003cCost\u003e getSavings() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public SimpleObjectProperty\u003cGoal\u003e getGoal() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void setGoal(Goal goal) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void setSelectedExpense(Expense expense) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void setEPiggy(ReadOnlyEPiggy newData) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public ReadOnlyEPiggy getEPiggy() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void setCurrentBudget(Budget editedBudget) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public ObservableList\u003cBudget\u003e getFilteredBudgetList() {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void updateFilteredBudgetList(Predicate\u003cBudget\u003e predicate) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void updateFilteredExpensesList(Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public boolean canUndoEPiggy() {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public boolean canRedoEPiggy() {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void undoEPiggy() {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void redoEPiggy() {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void commitEPiggy() {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public Expense getSelectedExpense() {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private class ModelStubWithOneCurrentBudget extends ModelStub {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        final ArrayList\u003cBudget\u003e budgets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        private Date todaysDate \u003d new Date();"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        ModelStubWithOneCurrentBudget() {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            Budget currentBudget \u003d new BudgetBuilder().withDate(todaysDate).build();"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            budgets.add(currentBudget);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public int getCurrentBudgetIndex() {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void setCurrentBudget(Budget editedBudget) {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            budgets.set(0, editedBudget);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void updateFilteredBudgetList(Predicate\u003cBudget\u003e predicate) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public ObservableList\u003cBudget\u003e getFilteredBudgetList() {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            return FXCollections.observableArrayList(budgets);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void commitEPiggy() {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private class ModelStubWithNoCurrentBudget extends ModelStub {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        final ArrayList\u003cBudget\u003e budgets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public int getCurrentBudgetIndex() {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public ObservableList\u003cBudget\u003e getFilteredBudgetList() {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            return FXCollections.observableArrayList(budgets);"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 1,
      "tehwenyi": 445,
      "rahulb99": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/epiggy/FindExpenseCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "package seedu.address.logic.commands.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EXPENSES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.testutil.epiggy.TypicalExpenses.BOWLING;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.testutil.epiggy.TypicalExpenses.CLOTHES;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.testutil.epiggy.TypicalExpenses.DUMPLING_SOUP;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.testutil.epiggy.TypicalExpenses.IPHONE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.testutil.epiggy.TypicalExpenses.KARAOKE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.testutil.epiggy.TypicalExpenses.KFC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.testutil.epiggy.TypicalExpenses.MOVIE_AVENGERS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.testutil.epiggy.TypicalExpenses.STATIONARY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.testutil.epiggy.TypicalExpenses.getTypicalEPiggy;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.epiggy.Expense;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.epiggy.ExpenseContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindExpenseCommand}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "public class FindExpenseCommandTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        ArgumentMultimap firstMap \u003d ArgumentTokenizer.tokenize(\" n/first\", PREFIX_NAME);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        ArgumentMultimap secondMap \u003d ArgumentTokenizer.tokenize(\" n/second\", PREFIX_NAME);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        ExpenseContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                new ExpenseContainsKeywordsPredicate(firstMap);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        ExpenseContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                new ExpenseContainsKeywordsPredicate(secondMap);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        FindExpenseCommand findFirstCommand \u003d new FindExpenseCommand(firstPredicate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        FindExpenseCommand findSecondCommand \u003d new FindExpenseCommand(secondPredicate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        FindExpenseCommand findFirstCommandCopy \u003d new FindExpenseCommand(firstPredicate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public void execute_zeroKeywords_noExpenseFound() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        model \u003d new ModelManager(getTypicalEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        findExpenseCommandTester(\" n/ \", 0,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                Collections.emptyList(), PREFIX_NAME);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public void execute_multipleNameKeywords_multipleExpensesFound() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        model \u003d new ModelManager(getTypicalEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        findExpenseCommandTester(\" n/dumpling avengers clothes \", 3,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                Arrays.asList(DUMPLING_SOUP, MOVIE_AVENGERS, CLOTHES), PREFIX_NAME);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public void execute_zeroTagKeywords_noExpenseFound() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        model \u003d new ModelManager(getTypicalEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        findExpenseCommandTester(\" t/ \", 0,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                Collections.emptyList(), PREFIX_NAME);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public void execute_tagKeywords_noExpensesFound() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        model \u003d new ModelManager(getTypicalEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        findExpenseCommandTester(\" t/drinks \", 5,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                Collections.emptyList(), PREFIX_TAG);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public void execute_tagKeywords_multipleExpensesFound() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        model \u003d new ModelManager(getTypicalEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        findExpenseCommandTester(\" t/friends t/food \", 5,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                Arrays.asList(DUMPLING_SOUP, MOVIE_AVENGERS, KARAOKE, KFC, BOWLING), PREFIX_TAG);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public void execute_oneDateKeyword_noExpenseFound() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        model \u003d new ModelManager(getTypicalEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        findExpenseCommandTester(\" d/24/03/2019 \", 0,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                Collections.emptyList(), PREFIX_DATE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public void execute_oneDateKeyword_multipleExpensesFound() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        model \u003d new ModelManager(getTypicalEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        findExpenseCommandTester(\" d/04/26/2019 \", 2,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                Arrays.asList(MOVIE_AVENGERS, KFC), PREFIX_DATE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public void execute_multipleDateKeyword_multipleExpensesFound() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        model \u003d new ModelManager(getTypicalEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        findExpenseCommandTester(\" d/03/01/2019:04/30/2019 \", 6,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                Arrays.asList(DUMPLING_SOUP, STATIONARY, MOVIE_AVENGERS, CLOTHES, KFC, IPHONE), PREFIX_DATE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    // Clothes will be counted as long as it entered within the given dates."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public void execute_oneCostKeyword_noExpenseFound() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        model \u003d new ModelManager(getTypicalEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        findExpenseCommandTester(\" $/12.00 \", 0,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                Collections.emptyList(), PREFIX_COST);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public void execute_oneCostKeyword_oneExpensesFound() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        model \u003d new ModelManager(getTypicalEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        findExpenseCommandTester(\" $/1799.00 \", 1,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                Collections.singletonList(IPHONE), PREFIX_COST);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public void execute_multipleCostKeyword_multipleExpensesFound() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        model \u003d new ModelManager(getTypicalEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        findExpenseCommandTester(\" $/1.00:10.00 \", 4,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                Arrays.asList(DUMPLING_SOUP, STATIONARY, MOVIE_AVENGERS, KARAOKE, BOWLING), PREFIX_COST);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public void execute_multipleKeyword_oneExpensesFound() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        model \u003d new ModelManager(getTypicalEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        findExpenseCommandTester(\" t/Friends $/10 \", 1,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                Collections.singletonList(KARAOKE), PREFIX_TAG, PREFIX_COST);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public void execute_multipleKeyword_multipleExpensesFound() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        model \u003d new ModelManager(getTypicalEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        findExpenseCommandTester(\" t/food d/01/01/2019:04/30/2019 \", 2,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                Arrays.asList(DUMPLING_SOUP, KFC), PREFIX_TAG, PREFIX_DATE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * Parses {@code userInput} into a {@code ExpenseContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    private void findExpenseCommandTester(String userInput, int expectedItems,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                                          List\u003cExpense\u003e expenses, Prefix... prefixes) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EXPENSES_LISTED_OVERVIEW, expectedItems);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        ArgumentMultimap keywordsMap \u003d"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                ArgumentTokenizer.tokenize(userInput, prefixes);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        ExpenseContainsKeywordsPredicate predicate \u003d new ExpenseContainsKeywordsPredicate(keywordsMap);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        FindExpenseCommand command \u003d new FindExpenseCommand(predicate);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        command.execute(model, null);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        expectedModel.updateFilteredExpensesList(predicate);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        // assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        assertEquals(expenses, model.getFilteredExpenseList());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rahulb99": 180
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/epiggy/ReverseListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "package seedu.address.logic.commands.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalEPiggy;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ReverseListCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "public class ReverseListCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        model \u003d new ModelManager(getTypicalEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        assertCommandSuccess(new ReverseListCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                ReverseListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        assertCommandSuccess(new ReverseListCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                ReverseListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rahulb99": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/epiggy/SetGoalCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "package seedu.address.logic.commands.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.ReadOnlyEPiggy;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Allowance;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Budget;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Expense;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Goal;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.item.Cost;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.testutil.epiggy.GoalBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "public class SetGoalCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public void constructor_nullGoal_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        new SetGoalCommand(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public void execute_goalAcceptedByModel_setSuccessful() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        ModelStubAcceptingGoal modelStub \u003d new ModelStubAcceptingGoal();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        Goal validGoal \u003d new GoalBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        CommandResult commandResult \u003d new SetGoalCommand(validGoal).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertEquals(String.format(SetGoalCommand.MESSAGE_SUCCESS, validGoal), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertEquals(validGoal, modelStub.goal.get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        public void reverseFilteredExpensesList() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        public void sortExpenses(Comparator\u003cExpense\u003e comparator) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        public ObservableList\u003cBudget\u003e getBudgetList() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        public ObservableList\u003cExpense\u003e getExpenseList() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public Path getEPiggyFilePath() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void setEPiggyFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void addAllowance(Allowance allowance) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public ReadOnlyProperty\u003cExpense\u003e selectedExpenseProperty() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void addBudget(int index, Budget budget) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public boolean budgetsOverlap(Date startDate, Date endDate, Budget earlierBudget) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void deleteBudgetAtIndex(int index) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void deleteExpense(Expense toDelete) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public int getCurrentBudgetIndex() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public SimpleObjectProperty\u003cCost\u003e getSavings() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public SimpleObjectProperty\u003cGoal\u003e getGoal() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void setGoal(Goal goal) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void setSelectedExpense(Expense expense) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void setEPiggy(ReadOnlyEPiggy newData) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public ReadOnlyEPiggy getEPiggy() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void setCurrentBudget(Budget editedBudget) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public ObservableList\u003cBudget\u003e getFilteredBudgetList() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void updateFilteredBudgetList(Predicate\u003cBudget\u003e predicate) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void updateFilteredExpensesList(Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public boolean canUndoEPiggy() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public boolean canRedoEPiggy() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void undoEPiggy() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void redoEPiggy() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void commitEPiggy() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        public Expense getSelectedExpense() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private class ModelStubAcceptingGoal extends ModelStub {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        final SimpleObjectProperty\u003cGoal\u003e goal \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void setGoal(Goal goal) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            this.goal.setValue(goal);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public SimpleObjectProperty\u003cGoal\u003e getGoal() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            return this.goal;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void commitEPiggy() {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            // Called by {@code SetCommand#execute()}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 266,
      "tehwenyi": 12,
      "rahulb99": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/epiggy/SortExpenseCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "package seedu.address.logic.commands.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.testutil.epiggy.TypicalExpenses.BOWLING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.testutil.epiggy.TypicalExpenses.CLOTHES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.testutil.epiggy.TypicalExpenses.DUMPLING_SOUP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.testutil.epiggy.TypicalExpenses.IPHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.testutil.epiggy.TypicalExpenses.KARAOKE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.testutil.epiggy.TypicalExpenses.KFC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.testutil.epiggy.TypicalExpenses.MOVIE_AVENGERS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.testutil.epiggy.TypicalExpenses.STATIONARY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.testutil.epiggy.TypicalExpenses.getTypicalEPiggy;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.epiggy.comparators.CompareExpenseByCost;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.epiggy.comparators.CompareExpenseByDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.epiggy.comparators.CompareExpenseByName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SortExpenseCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "public class SortExpenseCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public void execute_sortByName_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        expectedModel \u003d new ModelManager(getTypicalEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        SortExpenseCommand command \u003d new SortExpenseCommand(new CompareExpenseByName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        command.execute(model, null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        expectedModel.sortExpenses(new CompareExpenseByName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        assertEquals(Arrays.asList(MOVIE_AVENGERS, BOWLING, CLOTHES, DUMPLING_SOUP, IPHONE, KARAOKE, KFC, STATIONARY),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                model.getFilteredExpenseList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public void execute_sortByCost_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        expectedModel \u003d new ModelManager(getTypicalEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        SortExpenseCommand command \u003d new SortExpenseCommand(new CompareExpenseByCost());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        command.execute(model, null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        expectedModel.sortExpenses(new CompareExpenseByCost());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        assertEquals(Arrays.asList(IPHONE, CLOTHES, KFC, KARAOKE, MOVIE_AVENGERS, DUMPLING_SOUP, BOWLING, STATIONARY),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                model.getFilteredExpenseList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public void execute_sortByDate_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        expectedModel \u003d new ModelManager(getTypicalEPiggy(), new UserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        SortExpenseCommand command \u003d new SortExpenseCommand(new CompareExpenseByDate());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        command.execute(model, null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        expectedModel.sortExpenses(new CompareExpenseByDate());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        assertEquals(Arrays.asList(MOVIE_AVENGERS, KFC, DUMPLING_SOUP, IPHONE, STATIONARY, CLOTHES, KARAOKE, BOWLING),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                model.getFilteredExpenseList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rahulb99": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/epiggy/ViewGoalCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "package seedu.address.logic.commands.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.ReadOnlyEPiggy;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Allowance;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Budget;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Expense;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Goal;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.item.Cost;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.testutil.epiggy.GoalBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "public class ViewGoalCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public void execute_viewSuccessful_savingsLessThanGoal() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        Goal validGoal \u003d new GoalBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        Cost validSavings \u003d new Cost(100);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        double diff \u003d validGoal.getAmount().getAmount() - validSavings.getAmount();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        ModelStubWithGoalAndSavings modelStub \u003d new ModelStubWithGoalAndSavings(validGoal, validSavings);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        CommandResult commandResult \u003d new ViewGoalCommand().execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertEquals(String.format(ViewGoalCommand.MESSAGE_SUCCESS"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                + ViewGoalCommand.MESSAGE_SAVINGS_LESS_THAN_GOAL, validGoal, diff), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertEquals(validGoal, modelStub.goal.get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public void execute_viewSuccessful_savingsMoreThanGoal() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        Goal validGoal \u003d new GoalBuilder().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        Cost validSavings \u003d new Cost(300);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        ModelStubWithGoalAndSavings modelStub \u003d new ModelStubWithGoalAndSavings(validGoal, validSavings);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        CommandResult commandResult \u003d new ViewGoalCommand().execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertEquals(String.format(ViewGoalCommand.MESSAGE_SUCCESS"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                + ViewGoalCommand.MESSAGE_SAVINGS_MORE_THAN_GOAL, validGoal), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertEquals(validGoal, modelStub.goal.get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        public void reverseFilteredExpensesList() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        public void sortExpenses(Comparator\u003cExpense\u003e comparator) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        public ObservableList\u003cExpense\u003e getExpenseList() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        public ObservableList\u003cBudget\u003e getBudgetList() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public Path getEPiggyFilePath() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void setEPiggyFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void addAllowance(Allowance allowance) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public ReadOnlyProperty\u003cExpense\u003e selectedExpenseProperty() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void addBudget(int index, Budget budget) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public boolean budgetsOverlap(Date startDate, Date endDate, Budget earlierBudget) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void deleteBudgetAtIndex(int index) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void deleteExpense(Expense toDelete) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public int getCurrentBudgetIndex() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public SimpleObjectProperty\u003cCost\u003e getSavings() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public SimpleObjectProperty\u003cGoal\u003e getGoal() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void setGoal(Goal goal) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void setSelectedExpense(Expense expense) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void setEPiggy(ReadOnlyEPiggy newData) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public ReadOnlyEPiggy getEPiggy() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void setCurrentBudget(Budget editedBudget) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public ObservableList\u003cBudget\u003e getFilteredBudgetList() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void updateFilteredBudgetList(Predicate\u003cBudget\u003e predicate) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void updateFilteredExpensesList(Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public boolean canUndoEPiggy() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public boolean canRedoEPiggy() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void undoEPiggy() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void redoEPiggy() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void commitEPiggy() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        public Expense getSelectedExpense() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private class ModelStubWithGoalAndSavings extends ModelStub {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        final SimpleObjectProperty\u003cGoal\u003e goal \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        final SimpleObjectProperty\u003cCost\u003e savings \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        ModelStubWithGoalAndSavings(Goal goal, Cost savings) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            requireNonNull(goal);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            requireNonNull(savings);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            this.goal.setValue(goal);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            this.savings.setValue(savings);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public SimpleObjectProperty\u003cGoal\u003e getGoal() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            return this.goal;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public SimpleObjectProperty\u003cCost\u003e getSavings() {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            return this.savings;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 277,
      "tehwenyi": 11,
      "rahulb99": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/epiggy/ViewSavingsCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "package seedu.address.logic.commands.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.ReadOnlyEPiggy;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Allowance;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Budget;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Expense;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Goal;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.item.Cost;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "public class ViewSavingsCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public void execute_viewSuccessful() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        Cost validSavings \u003d new Cost(20);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        ModelStubWithSavings modelStub \u003d new ModelStubWithSavings(validSavings);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        CommandResult commandResult \u003d new ViewSavingsCommand().execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertEquals(String.format(ViewSavingsCommand.MESSAGE_SUCCESS, validSavings),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertEquals(validSavings, modelStub.getSavings().get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        public void reverseFilteredExpensesList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        public void sortExpenses(Comparator\u003cExpense\u003e comparator) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        public ObservableList\u003cExpense\u003e getExpenseList() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        public ObservableList\u003cBudget\u003e getBudgetList() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public Path getEPiggyFilePath() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void setEPiggyFilePath(Path ePiggyFilePath) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void addAllowance(Allowance allowance) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public ReadOnlyProperty\u003cExpense\u003e selectedExpenseProperty() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void addBudget(int index, Budget budget) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public boolean budgetsOverlap(Date startDate, Date endDate, Budget earlierBudget) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void deleteBudgetAtIndex(int index) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void deleteExpense(Expense toDelete) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public int getCurrentBudgetIndex() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public SimpleObjectProperty\u003cCost\u003e getSavings() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public SimpleObjectProperty\u003cGoal\u003e getGoal() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void setGoal(Goal goal) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void setSelectedExpense(Expense expense) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void setEPiggy(ReadOnlyEPiggy newData) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public ReadOnlyEPiggy getEPiggy() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void setCurrentBudget(Budget editedBudget) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public ObservableList\u003cBudget\u003e getFilteredBudgetList() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void updateFilteredBudgetList(Predicate\u003cBudget\u003e predicate) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void updateFilteredExpensesList(Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public boolean canUndoEPiggy() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public boolean canRedoEPiggy() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void undoEPiggy() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void redoEPiggy() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public void commitEPiggy() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        public Expense getSelectedExpense() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private class ModelStubWithSavings extends ModelStub {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        final SimpleObjectProperty\u003cCost\u003e savings \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        ModelStubWithSavings(Cost savings) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            requireNonNull(savings);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            this.savings.setValue(savings);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public SimpleObjectProperty\u003cCost\u003e getSavings() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            return this.savings;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 251,
      "tehwenyi": 11,
      "rahulb99": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EPiggyParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "public class EPiggyParserTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private final EPiggyParser parser \u003d new EPiggyParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public void parseCommand_clearAlias() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public void parseCommand_deleteAlias() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public void parseCommand_editAlias() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public void parseCommand_exitAlias() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS) instanceof ExitCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public void parseCommand_findAlias() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                FindCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public void parseCommand_helpAlias() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_ALIAS) instanceof HelpCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_ALIAS + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public void parseCommand_historyAlias() throws Exception {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public void parseCommand_listAlias() throws Exception {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS) instanceof ListCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public void parseCommand_selectAlias() throws Exception {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public void parseCommand_redoCommandAlias_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS) instanceof RedoCommand);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public void parseCommand_undoCommandAlias_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS) instanceof UndoCommand);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 80,
      "tehwenyi": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/epiggy/AddBudgetCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "package seedu.address.logic.parser.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AMOUNT_DESC_FIRSTEXTRA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AMOUNT_DESC_SECONDEXTRA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_FIRSTEXTRA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_SECONDEXTRA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_AMOUNT_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PERIOD_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PERIOD_DESC_FIRSTEXTRA;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PERIOD_DESC_SECONDEXTRA;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_SECONDEXTRA;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_SECONDEXTRA;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PERIOD_SECONDEXTRA;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.testutil.TypicalBudgets.SECOND_EXTRA;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.commands.epiggy.AddBudgetCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.epiggy.Budget;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.epiggy.item.Cost;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.epiggy.item.Period;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.testutil.epiggy.BudgetBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "public class AddBudgetCommandParserTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private AddBudgetCommandParser parser \u003d new AddBudgetCommandParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Budget expectedBudget \u003d new BudgetBuilder(SECOND_EXTRA).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + AMOUNT_DESC_SECONDEXTRA + PERIOD_DESC_SECONDEXTRA"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                + DATE_DESC_SECONDEXTRA, new AddBudgetCommand(expectedBudget));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // multiple amounts - last amount accepted"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertParseSuccess(parser, AMOUNT_DESC_FIRSTEXTRA + AMOUNT_DESC_SECONDEXTRA + PERIOD_DESC_SECONDEXTRA"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                        + DATE_DESC_SECONDEXTRA, new AddBudgetCommand(expectedBudget));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // multiple periods - last period accepted"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertParseSuccess(parser, AMOUNT_DESC_SECONDEXTRA + PERIOD_DESC_FIRSTEXTRA + PERIOD_DESC_SECONDEXTRA"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                + DATE_DESC_SECONDEXTRA, new AddBudgetCommand(expectedBudget));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // multiple dates - last date accepted"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertParseSuccess(parser, AMOUNT_DESC_SECONDEXTRA + PERIOD_DESC_SECONDEXTRA + DATE_DESC_FIRSTEXTRA"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                + DATE_DESC_SECONDEXTRA, new AddBudgetCommand(expectedBudget));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddBudgetCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // missing amount prefix"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertParseFailure(parser, VALID_AMOUNT_SECONDEXTRA + PERIOD_DESC_SECONDEXTRA + DATE_DESC_SECONDEXTRA,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                        expectedMessage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // missing period prefix"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertParseFailure(parser, AMOUNT_DESC_SECONDEXTRA + VALID_PERIOD_SECONDEXTRA + DATE_DESC_SECONDEXTRA,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // missing date prefix"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertParseFailure(parser, AMOUNT_DESC_SECONDEXTRA + PERIOD_DESC_SECONDEXTRA + VALID_DATE_SECONDEXTRA,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertParseFailure(parser, VALID_AMOUNT_SECONDEXTRA + VALID_PERIOD_SECONDEXTRA + VALID_DATE_SECONDEXTRA,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // invalid cost"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertParseFailure(parser, INVALID_AMOUNT_DESC + PERIOD_DESC_SECONDEXTRA + DATE_DESC_SECONDEXTRA,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                Cost.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // invalid period"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertParseFailure(parser, AMOUNT_DESC_SECONDEXTRA + INVALID_PERIOD_DESC + DATE_DESC_SECONDEXTRA,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                Period.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertParseFailure(parser, AMOUNT_DESC_SECONDEXTRA + PERIOD_DESC_SECONDEXTRA + INVALID_DATE_DESC,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertParseFailure(parser, INVALID_AMOUNT_DESC + PERIOD_DESC_SECONDEXTRA + INVALID_DATE_DESC,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                Cost.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + AMOUNT_DESC_SECONDEXTRA + PERIOD_DESC_SECONDEXTRA"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                        + DATE_DESC_SECONDEXTRA,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddBudgetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tehwenyi": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/epiggy/EditBudgetCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "package seedu.address.logic.parser.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AMOUNT_DESC_FIRSTEXTRA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_FIRSTEXTRA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_AMOUNT_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PERIOD_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PERIOD_DESC_FIRSTEXTRA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PERIOD_DESC_SECONDEXTRA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_FIRSTEXTRA;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_FIRSTEXTRA;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PERIOD_FIRSTEXTRA;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PERIOD_SECONDEXTRA;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.epiggy.EditBudgetCommand.EditBudgetDetails;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.commands.epiggy.EditBudgetCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.epiggy.item.Cost;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.epiggy.item.Period;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.testutil.epiggy.EditBudgetDetailsBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "public class EditBudgetCommandParserTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditBudgetCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private EditBudgetCommandParser parser \u003d new EditBudgetCommandParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertParseFailure(parser, \"1\", EditBudgetCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertParseFailure(parser, \"some random string\", EditBudgetCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertParseFailure(parser, \"i/ string\", EditBudgetCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_AMOUNT_DESC, Cost.MESSAGE_CONSTRAINTS); // invalid amount"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PERIOD_DESC, Period.MESSAGE_CONSTRAINTS); // invalid period"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DATE_DESC, MESSAGE_INVALID_DATE); // invalid date"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // invalid period followed by valid date"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PERIOD_DESC + DATE_DESC_FIRSTEXTRA, Period.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // valid period followed by invalid period. The test case for invalid period followed by valid period"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertParseFailure(parser, \"1\" + PERIOD_DESC_SECONDEXTRA + INVALID_PERIOD_DESC, Period.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_AMOUNT_DESC + INVALID_DATE_DESC + VALID_PERIOD_FIRSTEXTRA,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                Cost.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        String userInput \u003d PERIOD_DESC_SECONDEXTRA + DATE_DESC_FIRSTEXTRA"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                + AMOUNT_DESC_FIRSTEXTRA;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        EditBudgetDetails details \u003d new EditBudgetDetailsBuilder().withAmount(VALID_AMOUNT_FIRSTEXTRA)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                .withPeriod(VALID_PERIOD_SECONDEXTRA).withDate(VALID_DATE_FIRSTEXTRA).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        EditBudgetCommand expectedCommand \u003d new EditBudgetCommand(details);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        String userInput \u003d PERIOD_DESC_SECONDEXTRA + DATE_DESC_FIRSTEXTRA;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        EditBudgetDetails details \u003d new EditBudgetDetailsBuilder()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                .withPeriod(VALID_PERIOD_SECONDEXTRA).withDate(VALID_DATE_FIRSTEXTRA).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        EditBudgetCommand expectedCommand \u003d new EditBudgetCommand(details);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // amount"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        String userInput \u003d AMOUNT_DESC_FIRSTEXTRA;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        EditBudgetDetails details \u003d new EditBudgetDetailsBuilder().withAmount(VALID_AMOUNT_FIRSTEXTRA).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        EditBudgetCommand expectedCommand \u003d new EditBudgetCommand(details);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // period"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        userInput \u003d PERIOD_DESC_FIRSTEXTRA;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        details \u003d new EditBudgetDetailsBuilder().withPeriod(VALID_PERIOD_FIRSTEXTRA).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        expectedCommand \u003d new EditBudgetCommand(details);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // date"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        userInput \u003d DATE_DESC_FIRSTEXTRA;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        details \u003d new EditBudgetDetailsBuilder().withDate(VALID_DATE_FIRSTEXTRA).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        expectedCommand \u003d new EditBudgetCommand(details);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    // public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    // String userInput \u003d PERIOD_DESC_FIRSTEXTRA + DATE_DESC_FIRSTEXTRA + PERIOD_DESC_FIRSTEXTRA + DATE_DESC_FIRSTEXTRA"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    //                + PERIOD_DESC_SECONDEXTRA + DATE_DESC_SECONDEXTRA;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    //"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    //        EditBudgetDetails details \u003d new EditBudgetDetailsBuilder().withPeriod(VALID_PERIOD_SECONDEXTRA)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    //                .withDate(VALID_DATE_SECONDEXTRA).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    //        EditBudgetCommand expectedCommand \u003d new EditBudgetCommand(details);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    //"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    //        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    //    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    //        // no other valid values specified"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    //        String userInput \u003d INVALID_PERIOD_DESC + PERIOD_DESC_SECONDEXTRA;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    //        EditBudgetDetails details \u003d new EditBudgetDetailsBuilder().withPeriod(VALID_PERIOD_SECONDEXTRA).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    //        EditBudgetCommand expectedCommand \u003d new EditBudgetCommand(details);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    //        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    //"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    //        // other valid values specified"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    //        userInput \u003d DATE_DESC_SECONDEXTRA + INVALID_PERIOD_DESC + PERIOD_DESC_SECONDEXTRA;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    //        details \u003d new EditBudgetDetailsBuilder().withPeriod(VALID_PERIOD_SECONDEXTRA)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    // .withDate(VALID_DATE_SECONDEXTRA)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    //                .build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    //        expectedCommand \u003d new EditBudgetCommand(details);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    //        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tehwenyi": 139
    }
  },
  {
    "path": "src/test/java/seedu/address/model/EPiggyTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalEPiggy;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Budget;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Expense;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Goal;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.item.Cost;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.model.epiggy.item.Item;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "public class EPiggyTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private final EPiggy ePiggy \u003d new EPiggy();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(Collections.emptyList(), ePiggy.getPersonList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        ePiggy.resetData(null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        EPiggy newData \u003d getTypicalEPiggy();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        ePiggy.resetData(newData);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(newData, ePiggy);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        ePiggy.resetData(newData);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        ePiggy.hasPerson(null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertFalse(ePiggy.hasPerson(ALICE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        ePiggy.addPerson(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertTrue(ePiggy.hasPerson(ALICE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        ePiggy.addPerson(ALICE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertTrue(ePiggy.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        ePiggy.getPersonList().remove(0);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener_withInvalidationListener_listenerAdded() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        ePiggy.addListener(listener);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        ePiggy.addPerson(ALICE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, counter.get());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener_withInvalidationListener_listenerRemoved() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        ePiggy.addListener(listener);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        ePiggy.removeListener(listener);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        ePiggy.addPerson(ALICE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, counter.get());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * A stub ReadOnlyEPiggy whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyEPiggy {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        private final ObservableList\u003cExpense\u003e expenses \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        private final ObservableList\u003cItem\u003e items \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        private ObservableList\u003cBudget\u003e budgets; //TODO"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        private SimpleObjectProperty\u003cGoal\u003e goal;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        public ObservableList\u003cExpense\u003e getExpenseList() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            return FXCollections.unmodifiableObservableList(expenses);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        public ObservableList\u003cItem\u003e getItemList() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pdnm"
        },
        "content": "            return FXCollections.unmodifiableObservableList(items);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pdnm"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        //        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        //        public ObservableValue\u003cBudget\u003e getBudget() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        //            return budget;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        public ObservableList\u003cBudget\u003e getBudgetList() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            return budgets;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public SimpleObjectProperty\u003cCost\u003e getSavings() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        public SimpleObjectProperty\u003cGoal\u003e getGoal() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 20,
      "pdnm": 13,
      "tehwenyi": 33,
      "-": 119
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.testutil.EPiggyBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(new EPiggy(), new EPiggy(modelManager.getEPiggy()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        assertEquals(null, modelManager.getSelectedExpense());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        userPrefs.setEPiggyFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        userPrefs.setEPiggyFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(null);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void setEPiggyFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        modelManager.setEPiggyFilePath(null);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void setEPiggyFilePath_validPath_setsEPiggyFilePath() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        modelManager.setEPiggyFilePath(path);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(path, modelManager.getEPiggyFilePath());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.hasPerson(null);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void hasPerson_personNotInEPiggy_returnsFalse() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void hasPerson_personInEPiggy_returnsTrue() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson_personIsSelectedAndFirstPersonInFilteredPersonList_selectionCleared() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(ALICE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.deletePerson(ALICE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        assertEquals(null, modelManager.getSelectedExpense());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson_personIsSelectedAndSecondPersonInFilteredPersonList_firstPersonSelected() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(BOB);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BOB), modelManager.getFilteredPersonList());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(BOB);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.deletePerson(BOB);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        assertEquals(ALICE, modelManager.getSelectedExpense());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_personIsSelected_selectedPersonUpdated() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(ALICE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Person updatedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setPerson(ALICE, updatedAlice);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        assertEquals(updatedAlice, modelManager.getSelectedExpense());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson_personNotInFilteredPersonList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(PersonNotFoundException.class);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(ALICE);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson_personInFilteredPersonList_setsSelectedPerson() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.singletonList(ALICE), modelManager.getFilteredPersonList());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(ALICE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        assertEquals(ALICE, modelManager.getSelectedExpense());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        EPiggy ePiggy \u003d new EPiggyBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        EPiggy differentEPiggy \u003d new EPiggy();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        modelManager \u003d new ModelManager(ePiggy, userPrefs);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(ePiggy, userPrefs);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // different EPiggy -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentEPiggy, userPrefs)));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(ePiggy, userPrefs)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        differentUserPrefs.setEPiggyFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(ePiggy, differentUserPrefs)));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 1,
      "tehwenyi": 20,
      "-": 163,
      "rahulb99": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void setEPiggyFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPrefs.setEPiggyFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tehwenyi": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedEPiggyTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.testutil.EPiggyBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "public class VersionedEPiggyTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private final ReadOnlyEPiggy addressBookWithAmy \u003d new EPiggyBuilder().withPerson(AMY).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private final ReadOnlyEPiggy addressBookWithBob \u003d new EPiggyBuilder().withPerson(BOB).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private final ReadOnlyEPiggy addressBookWithCarl \u003d new EPiggyBuilder().withPerson(CARL).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private final ReadOnlyEPiggy emptyAddressBook \u003d new EPiggyBuilder().build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_singleAddressBook_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        VersionedEPiggy versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_multipleAddressBookPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        VersionedEPiggy versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithAmy, addressBookWithBob),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithBob,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_multipleAddressBookPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        VersionedEPiggy versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        VersionedEPiggy versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        VersionedEPiggy versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        VersionedEPiggy versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        VersionedEPiggy versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        VersionedEPiggy versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        VersionedEPiggy versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        VersionedEPiggy versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        VersionedEPiggy versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        VersionedEPiggy versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        VersionedEPiggy versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(addressBookWithAmy, addressBookWithBob));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_singleAddressBook_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        VersionedEPiggy versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertThrows(VersionedEPiggy.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        VersionedEPiggy versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertThrows(VersionedEPiggy.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        VersionedEPiggy versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithAmy),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithBob,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        VersionedEPiggy versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_singleAddressBook_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        VersionedEPiggy versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertThrows(VersionedEPiggy.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        VersionedEPiggy versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertThrows(VersionedEPiggy.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        VersionedEPiggy versionedAddressBook \u003d prepareAddressBookList(addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        VersionedEPiggy copy \u003d prepareAddressBookList(addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.equals(copy));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.equals(versionedAddressBook));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(null));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(1));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        VersionedEPiggy differentAddressBookList \u003d prepareAddressBookList(addressBookWithBob, addressBookWithCarl);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentAddressBookList));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        VersionedEPiggy differentCurrentStatePointer \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code versionedAddressBook} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * states before {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * and states after {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private void assertAddressBookListStatus(VersionedEPiggy versionedAddressBook,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                                             List\u003cReadOnlyEPiggy\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                                             ReadOnlyEPiggy expectedCurrentState,"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                                             List\u003cReadOnlyEPiggy\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(new EPiggy(versionedAddressBook), expectedCurrentState);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        while (versionedAddressBook.canUndo()) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        for (ReadOnlyEPiggy expectedAddressBook : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            assertEquals(expectedAddressBook, new EPiggy(versionedAddressBook));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        for (ReadOnlyEPiggy expectedAddressBook : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            assertEquals(expectedAddressBook, new EPiggy(versionedAddressBook));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedAddressBook.undo());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Creates and returns a {@code VersionedEPiggy} with the {@code addressBookStates} added into it, and the"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * {@code VersionedEPiggy#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private VersionedEPiggy prepareAddressBookList(ReadOnlyEPiggy... addressBookStates) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBookStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        VersionedEPiggy versionedAddressBook \u003d new VersionedEPiggy(addressBookStates[0]);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 1; i \u003c addressBookStates.length; i++) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.resetData(addressBookStates[i]);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.commit();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shifts the {@code versionedAddressBook#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedEPiggy versionedAddressBook, int count) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 7,
      "tehwenyi": 42,
      "-": 251
    }
  },
  {
    "path": "src/test/java/seedu/address/model/epiggy/BudgetTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "package seedu.address.model.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_FIRSTEXTRA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_SECONDEXTRA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_FIRSTEXTRA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_SECONDEXTRA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PERIOD_FIRSTEXTRA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PERIOD_SECONDEXTRA;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.testutil.TypicalBudgets.FIRST_EXTRA;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.testutil.TypicalBudgets.SECOND_EXTRA;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.epiggy.item.Cost;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.epiggy.item.Period;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.testutil.epiggy.BudgetBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "public class BudgetTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void constructor_nullParameters_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Cost nullCost \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Period nullPeriod \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Date nullDate \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Budget(nullCost, nullPeriod, nullDate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void constructor_createCurrentBudget_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Date todaysDate \u003d new Date();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Budget validBudget \u003d new BudgetBuilder().withDate(todaysDate).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        c.setTime(todaysDate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        c.add(Calendar.DAY_OF_MONTH, Integer.parseInt(BudgetBuilder.DEFAULT_PERIOD));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Date expectedEndDate \u003d c.getTime();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(Double.parseDouble(BudgetBuilder.DEFAULT_AMOUNT), validBudget.getBudgetedAmount().getAmount());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(Integer.parseInt(BudgetBuilder.DEFAULT_PERIOD), validBudget.getPeriod().getTimePeriod());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(todaysDate, validBudget.getStartDate());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(expectedEndDate, validBudget.getEndDate());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(Double.parseDouble(BudgetBuilder.DEFAULT_AMOUNT), validBudget.getRemainingAmount().getAmount());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(Integer.parseInt(BudgetBuilder.DEFAULT_PERIOD), validBudget.getRemainingDays().getTimePeriod());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(Budget.CURRENT_BUDGET, validBudget.getStatus());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void setRemainingDays_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Budget validBudget \u003d new BudgetBuilder().build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        validBudget.setRemainingDays(new Period(2));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(2, validBudget.getRemainingDays().getTimePeriod());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void setRemainingAmount_success() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Budget validBudget \u003d new BudgetBuilder().build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        validBudget.setRemainingAmount(new Cost(100));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(100, validBudget.getRemainingAmount().getAmount());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void resetRemainingAmount_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Budget validBudget \u003d new BudgetBuilder().build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        validBudget.resetRemainingAmount();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(Integer.parseInt(BudgetBuilder.DEFAULT_AMOUNT), validBudget.getRemainingAmount().getAmount());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void deductRemainingAmount() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Budget budget \u003d new BudgetBuilder().build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // deduct positive cost"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Cost positiveCost \u003d new Cost(10);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        budget.deductRemainingAmount(positiveCost);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Cost resultingCost \u003d new Cost(BudgetBuilder.DEFAULT_AMOUNT).deduct(positiveCost);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(resultingCost.getAmount(), budget.getRemainingAmount().getAmount());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // deduct negative cost"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Cost negativeCost \u003d new Cost(-10);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        budget \u003d new BudgetBuilder().build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        resultingCost \u003d new Cost(BudgetBuilder.DEFAULT_AMOUNT).deduct(negativeCost);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        budget.deductRemainingAmount(negativeCost);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(resultingCost.getAmount(), budget.getRemainingAmount().getAmount());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void getPositiveRemainingAmount() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Budget positiveBudget \u003d new BudgetBuilder().withAmount(\"100\").build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(100, positiveBudget.getPositiveRemainingAmount().getAmount());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Budget negativeBudget \u003d new BudgetBuilder().withAmount(\"100\").build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        negativeBudget.deductRemainingAmount(new Cost(200.00));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(100, negativeBudget.getPositiveRemainingAmount().getAmount());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Budget oneCopy \u003d new BudgetBuilder().withAmount(VALID_AMOUNT_FIRSTEXTRA).withPeriod(VALID_PERIOD_FIRSTEXTRA)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                .withDate(VALID_DATE_FIRSTEXTRA).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(FIRST_EXTRA, oneCopy);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertTrue(FIRST_EXTRA.equals(FIRST_EXTRA));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertFalse(FIRST_EXTRA.equals(null));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertFalse(FIRST_EXTRA.equals(5));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // different budget -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertFalse(FIRST_EXTRA.equals(SECOND_EXTRA));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Budget editedOne \u003d new BudgetBuilder(FIRST_EXTRA).withAmount(VALID_AMOUNT_SECONDEXTRA).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertFalse(FIRST_EXTRA.equals(editedOne));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        editedOne \u003d new BudgetBuilder(FIRST_EXTRA).withPeriod(VALID_PERIOD_SECONDEXTRA).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertFalse(FIRST_EXTRA.equals(editedOne));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        editedOne \u003d new BudgetBuilder(FIRST_EXTRA).withDate(VALID_DATE_SECONDEXTRA).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertFalse(FIRST_EXTRA.equals(editedOne));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Budget oneCopy \u003d new BudgetBuilder(FIRST_EXTRA).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        String oneString \u003d \"$100 for 7 days starting from 04/02/2019 till 11/02/2019.\\n\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                + \"0 days remaining and $100 remaining.\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // same budget"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(FIRST_EXTRA.toString(), oneCopy.toString());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // same object"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(FIRST_EXTRA.toString(), FIRST_EXTRA.toString());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // different budget"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertNotEquals(FIRST_EXTRA.toString(), SECOND_EXTRA.toString());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // different name"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Budget editedOne \u003d new BudgetBuilder(FIRST_EXTRA).withAmount(VALID_AMOUNT_SECONDEXTRA).build();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertNotEquals(FIRST_EXTRA.toString(), editedOne.toString());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        editedOne \u003d new BudgetBuilder(FIRST_EXTRA).withPeriod(VALID_PERIOD_SECONDEXTRA).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertNotEquals(FIRST_EXTRA.toString(), editedOne.toString());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        editedOne \u003d new BudgetBuilder(FIRST_EXTRA).withDate(VALID_DATE_SECONDEXTRA).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertNotEquals(FIRST_EXTRA.toString(), editedOne.toString());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tehwenyi": 166
    }
  },
  {
    "path": "src/test/java/seedu/address/model/epiggy/UniqueBudgetListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "package seedu.address.model.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_FIRSTEXTRA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_FIRSTEXTRA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PERIOD_FIRSTEXTRA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.testutil.TypicalBudgets.FIRST_EXTRA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.testutil.TypicalBudgets.ONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.testutil.TypicalBudgets.SECOND_EXTRA;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.testutil.TypicalBudgets.TWO;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.epiggy.exceptions.DuplicateBudgetException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.testutil.epiggy.BudgetBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "public class UniqueBudgetListTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private final UniqueBudgetList uniqueBudgetList \u003d new UniqueBudgetList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void addAtIndex_nullBudget_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        uniqueBudgetList.addAtIndex(0, null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void addAtIndex_indexTooBig_throwsIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        thrown.expect(IndexOutOfBoundsException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        uniqueBudgetList.addAtIndex(UniqueBudgetList.MAXIMUM_SIZE + 1, ONE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void addAtIndex_negativeIndex_throwsIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        thrown.expect(IndexOutOfBoundsException.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        uniqueBudgetList.addAtIndex(-1, ONE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void replaceAtIndex_nullBudget_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        uniqueBudgetList.replaceAtIndex(0, null);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void replaceAtIndex_indexTooBig_throwsIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        thrown.expect(IndexOutOfBoundsException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        uniqueBudgetList.replaceAtIndex(UniqueBudgetList.MAXIMUM_SIZE, ONE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void replaceAtIndex_negativeIndex_throwsIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        thrown.expect(IndexOutOfBoundsException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        uniqueBudgetList.replaceAtIndex(-1, ONE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void replaceAtIndex_editedBudgetIsSameBudget_success() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        uniqueBudgetList.addAtIndex(0, ONE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        uniqueBudgetList.replaceAtIndex(0, ONE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        UniqueBudgetList expectedUniqueBudgetList \u003d new UniqueBudgetList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        expectedUniqueBudgetList.addAtIndex(0, ONE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(uniqueBudgetList, expectedUniqueBudgetList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void replaceAtIndex_editedBudgetHasSameIdentity_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        uniqueBudgetList.addAtIndex(0, FIRST_EXTRA);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Budget editedOne \u003d new BudgetBuilder().withAmount(VALID_AMOUNT_FIRSTEXTRA).withPeriod(VALID_PERIOD_FIRSTEXTRA)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                .withDate(VALID_DATE_FIRSTEXTRA).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        uniqueBudgetList.replaceAtIndex(0, editedOne);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        UniqueBudgetList expectedUniqueBudgetList \u003d new UniqueBudgetList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        expectedUniqueBudgetList.addAtIndex(0, editedOne);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(uniqueBudgetList, expectedUniqueBudgetList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void replaceAtIndex_editedBudgetHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        uniqueBudgetList.addAtIndex(0, ONE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        uniqueBudgetList.replaceAtIndex(0, TWO);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        UniqueBudgetList expectedUniqueBudgetList \u003d new UniqueBudgetList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        expectedUniqueBudgetList.addAtIndex(0, TWO);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(uniqueBudgetList, expectedUniqueBudgetList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void getBudgetAtIndex_emptyUniqueBudgetList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        UniqueBudgetList emptyUniqueBudgetList \u003d new UniqueBudgetList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        thrown.expect(IndexOutOfBoundsException.class);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        emptyUniqueBudgetList.getBudgetAtIndex(0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void getBudgetAtIndex_indexTooBig_throwsIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        thrown.expect(IndexOutOfBoundsException.class);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        uniqueBudgetList.getBudgetAtIndex(uniqueBudgetList.getBudgetListSize());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void getBudgetAtIndex_negativeIndex_throwsIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        thrown.expect(IndexOutOfBoundsException.class);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        uniqueBudgetList.getBudgetAtIndex(-1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void getBudgetAtIndex_success() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        uniqueBudgetList.addAtIndex(0, ONE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        uniqueBudgetList.addAtIndex(1, TWO);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(ONE, uniqueBudgetList.getBudgetAtIndex(0));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(TWO, uniqueBudgetList.getBudgetAtIndex(1));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void getBudgetIndexBasedOnDate_emptyUniqueBudgetList_success() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        UniqueBudgetList emptyUniqueBudgetList \u003d new UniqueBudgetList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(-1, emptyUniqueBudgetList.getBudgetIndexBasedOnDate(new Date()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void getBudgetIndexBasedOnDate_nullDate_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        uniqueBudgetList.addAtIndex(0, ONE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        uniqueBudgetList.getBudgetIndexBasedOnDate(null);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void getBudgetIndexBasedOnDate_budgetNotFound_success() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        uniqueBudgetList.addAtIndex(0, ONE);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(-1, uniqueBudgetList.getBudgetIndexBasedOnDate(new Date(\"01/01/2000\")));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void getBudgetIndexBasedOnDate_budgetSuccess_success() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        uniqueBudgetList.addAtIndex(0, FIRST_EXTRA);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(0, uniqueBudgetList.getBudgetIndexBasedOnDate(new Date(VALID_DATE_FIRSTEXTRA)));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void getCurrentBudgetIndex_emptyUniqueBudgetList_success() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        UniqueBudgetList emptyUniqueBudgetList \u003d new UniqueBudgetList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(-1, uniqueBudgetList.getCurrentBudgetIndex());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void getCurrentBudgetIndex_budgetDoesNotExist_success() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        uniqueBudgetList.addAtIndex(0, FIRST_EXTRA);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(-1, uniqueBudgetList.getCurrentBudgetIndex());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void getCurrentBudgetIndex_success() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Budget currentBudget \u003d new BudgetBuilder().withDate(new Date()).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        uniqueBudgetList.addAtIndex(0, currentBudget);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(0, uniqueBudgetList.getCurrentBudgetIndex());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void getBudgetListSize_emptyUniqueBudgetList_success() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        UniqueBudgetList emptyUniqueBudgetList \u003d new UniqueBudgetList();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(0, emptyUniqueBudgetList.getBudgetListSize());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void getBudgetListSize_success() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        uniqueBudgetList.addAtIndex(0, FIRST_EXTRA);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        uniqueBudgetList.addAtIndex(1, SECOND_EXTRA);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(2, uniqueBudgetList.getBudgetListSize());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void addBudgetList_replacesOwnListWithProvidedBudgetList_success() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        uniqueBudgetList.addAtIndex(0, ONE);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        List\u003cBudget\u003e expectedBudgetList \u003d new ArrayList\u003cBudget\u003e();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        expectedBudgetList.add(0, TWO);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        UniqueBudgetList expectedUniqueBudgetList \u003d new UniqueBudgetList();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        expectedUniqueBudgetList.addAtIndex(0, TWO);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        uniqueBudgetList.addBudgetList(expectedBudgetList);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(expectedUniqueBudgetList, uniqueBudgetList);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void addBudgetList_replacesOwnListWithDuplicateBudgetList_throwsDuplicateBudgetException() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        uniqueBudgetList.addAtIndex(0, ONE);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        List\u003cBudget\u003e expectedBudgetList \u003d new ArrayList\u003cBudget\u003e();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        expectedBudgetList.add(0, ONE);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        expectedBudgetList.add(1, ONE);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        thrown.expect(DuplicateBudgetException.class);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        uniqueBudgetList.addBudgetList(expectedBudgetList);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void addBudgetList_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        uniqueBudgetList.addBudgetList((List\u003cBudget\u003e) null);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void remove_indexTooBig_throwsIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        thrown.expect(IndexOutOfBoundsException.class);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        uniqueBudgetList.remove(uniqueBudgetList.getBudgetListSize());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void remove_negativeIndex_throwsIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        thrown.expect(IndexOutOfBoundsException.class);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        uniqueBudgetList.remove(-1);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void remove_existingBudget_success() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        uniqueBudgetList.addAtIndex(0, ONE);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        uniqueBudgetList.remove(0);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        UniqueBudgetList expectedUniqueBudgetList \u003d new UniqueBudgetList();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(expectedUniqueBudgetList, uniqueBudgetList);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        uniqueBudgetList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        uniqueBudgetList.addAtIndex(0, FIRST_EXTRA);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        uniqueBudgetList.addAtIndex(1, SECOND_EXTRA);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertTrue(uniqueBudgetList.equals(uniqueBudgetList));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // same internal list -\u003e returns true"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        UniqueBudgetList copyOfUniqueBudgetList \u003d uniqueBudgetList;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertTrue(copyOfUniqueBudgetList.equals(uniqueBudgetList));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // different order -\u003e returns false"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        UniqueBudgetList differentUniqueBudgetList \u003d new UniqueBudgetList();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        differentUniqueBudgetList.addAtIndex(0, SECOND_EXTRA);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        differentUniqueBudgetList.addAtIndex(1, FIRST_EXTRA);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertFalse(differentUniqueBudgetList.equals(uniqueBudgetList));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // different budgets -\u003e returns false"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        differentUniqueBudgetList.remove(1);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertFalse(differentUniqueBudgetList.equals(uniqueBudgetList));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tehwenyi": 255
    }
  },
  {
    "path": "src/test/java/seedu/address/model/epiggy/item/PeriodTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "package seedu.address.model.epiggy.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PERIOD_FIRSTEXTRA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PERIOD_SECONDEXTRA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "public class PeriodTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Period(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void constructor_invalidPeriod_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        String invalidPeriod \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Period(invalidPeriod));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void constructor_validPeriod_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Period validPeriod \u003d new Period(\"31\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(31, validPeriod.getTimePeriod());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        validPeriod \u003d new Period(25);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(25, validPeriod.getTimePeriod());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void isValidPeriod() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // null period"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Period.isValidPeriod(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // blank period"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertFalse(Period.isValidPeriod(\"\")); // empty string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertFalse(Period.isValidPeriod(\" \")); // spaces only"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // invalid types"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertFalse(Period.isValidPeriod(\"1.20\")); // double not an integer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertFalse(Period.isValidPeriod(\"1.0\")); // double should not auto parse to integer"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertFalse(Period.isValidPeriod(\"-4\")); // cannot be negative"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertFalse(Period.isValidPeriod(\"7g\")); // letters not allowed"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertFalse(Period.isValidPeriod(\"a 31\")); // letters"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertFalse(Period.isValidPeriod(\"31 5\")); // split up numbers"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertFalse(Period.isValidPeriod(\"#$1\")); // special characters not allowed"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertFalse(Period.isValidPeriod(\"54$5^\")); // special characters not allowed"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertFalse(Period.isValidPeriod(\"thirteen\")); // words not allowed"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertFalse(Period.isValidPeriod(\"1000001\")); // number too big"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertFalse(Period.isValidPeriod(\" 5\")); // leading space"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertFalse(Period.isValidPeriod(\"18 \")); // trailing space"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // valid period"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertTrue(Period.isValidPeriod(\"1000000\")); // largest number"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertTrue(Period.isValidPeriod(\"1\")); // smallest accepted number"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // invalid int period"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertFalse(Period.isValidPeriod(-2)); // negative integer"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // valid int period"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertTrue(Period.isValidPeriod(1000000)); // largest accepted integer"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertTrue(Period.isValidPeriod(0)); // zero"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Period one \u003d new Period(VALID_PERIOD_FIRSTEXTRA);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Period two \u003d new Period(VALID_PERIOD_SECONDEXTRA);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Period oneCopy \u003d new Period(VALID_PERIOD_FIRSTEXTRA);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertTrue(one.equals(oneCopy));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertTrue(one.equals(one));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertFalse(one.equals(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertFalse(one.equals(5));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // different budget -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertFalse(one.equals(two));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Period one \u003d new Period(VALID_PERIOD_FIRSTEXTRA);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // same string -\u003e return true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertTrue(one.toString().equals(VALID_PERIOD_FIRSTEXTRA));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        // different strings -\u003e return false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertFalse(one.toString().equals(VALID_PERIOD_SECONDEXTRA));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tehwenyi": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonEPiggyStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalEPiggy;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.EPiggy;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.ReadOnlyEPiggy;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.storage.epiggy.JsonEPiggyStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "public class JsonEPiggyStorageTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonEPiggyStorageTest\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void readEPiggyBook_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        readEPiggyBook(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private java.util.Optional\u003cReadOnlyEPiggy\u003e readEPiggyBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return new JsonEPiggyStorage(Paths.get(filePath)).readEPiggy(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertFalse(readEPiggyBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        readEPiggyBook(\"notJsonFormatEPiggyBook.json\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void readEPiggyBook_invalidPersonEPiggyBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        readEPiggyBook(\"invalidPersonEPiggyBook.json\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void readEPiggyBook_invalidAndValidPersonEPiggyBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        readEPiggyBook(\"invalidAndValidPersonEPiggyBook.json\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void readAndSaveEPiggyBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempEPiggyBook.json\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        EPiggy original \u003d getTypicalEPiggy();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        JsonEPiggyStorage jsonEPiggyBookStorage \u003d new JsonEPiggyStorage(filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        jsonEPiggyBookStorage.saveEPiggy(original, filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        ReadOnlyEPiggy readBack \u003d jsonEPiggyBookStorage.readEPiggy(filePath).get();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(original, new EPiggy(readBack));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        jsonEPiggyBookStorage.saveEPiggy(original, filePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        readBack \u003d jsonEPiggyBookStorage.readEPiggy(filePath).get();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(original, new EPiggy(readBack));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        jsonEPiggyBookStorage.saveEPiggy(original); // file path not specified"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        readBack \u003d jsonEPiggyBookStorage.readEPiggy().get(); // file path not specified"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(original, new EPiggy(readBack));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void saveEPiggyBook_nullEPiggyBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        saveEPiggyBook(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Saves {@code ePiggy} at the specified {@code filePath}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private void saveEPiggyBook(ReadOnlyEPiggy ePiggy, String filePath) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            new JsonEPiggyStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                    .saveEPiggy(ePiggy, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void saveEPiggyBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        saveEPiggyBook(new EPiggy(), null);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 5,
      "tehwenyi": 36,
      "-": 88
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableEPiggyTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.EPiggy;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "public class JsonSerializableEPiggyTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableEPiggyTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsEPiggyBook.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonEPiggyBook.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonEPiggyBook.json\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        JsonSerializableEPiggy dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                JsonSerializableEPiggy.class).get();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        EPiggy ePiggyFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        EPiggy typicalPersonsEPiggy \u003d TypicalPersons.getTypicalEPiggy();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(ePiggyFromFile, typicalPersonsEPiggy);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        JsonSerializableEPiggy dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                JsonSerializableEPiggy.class).get();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        JsonSerializableEPiggy dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                JsonSerializableEPiggy.class).get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        thrown.expectMessage(JsonSerializableEPiggy.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tehwenyi": 18,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        userPrefs.setEPiggyFilePath(Paths.get(\"addressbook.json\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(new UserPrefs(), null);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tehwenyi": 1,
      "-": 134
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalEPiggy;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.EPiggy;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.ReadOnlyEPiggy;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.storage.epiggy.JsonEPiggyStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        JsonEPiggyStorage addressBookStorage \u003d new JsonEPiggyStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "         * {@link JsonEPiggyStorage} class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonEPiggyStorageTest} class."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        EPiggy original \u003d getTypicalEPiggy();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        storageManager.saveEPiggy(original);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        ReadOnlyEPiggy retrieved \u003d storageManager.readEPiggy().get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(original, new EPiggy(retrieved));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public void getEPiggyFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertNotNull(storageManager.getEPiggyFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 7,
      "tehwenyi": 8,
      "-": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/epiggy/JsonAdaptedGoalTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "package seedu.address.storage.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static seedu.address.storage.epiggy.JsonAdaptedGoal.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static seedu.address.testutil.epiggy.TypicalGoal.IPHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.item.Cost;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.item.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "public class JsonAdaptedGoalTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private static final String INVALID_NAME \u003d \"@pple\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private static final String INVALID_COST \u003d \"10.12345\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private static final String VALID_NAME \u003d IPHONE.getName().toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private static final String VALID_COST \u003d String.valueOf(IPHONE.getAmount().getAmount());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public void toModelType_validGoal_returnsGoal() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        JsonAdaptedGoal goal \u003d new JsonAdaptedGoal(IPHONE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertEquals(IPHONE, goal.toModelType());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        JsonAdaptedGoal goal \u003d new JsonAdaptedGoal(false, INVALID_NAME, VALID_COST);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, goal::toModelType);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        JsonAdaptedGoal goal \u003d new JsonAdaptedGoal(false, null, VALID_COST);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, goal::toModelType);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public void toModelType_invalidCost_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        JsonAdaptedGoal goal \u003d new JsonAdaptedGoal(false, VALID_NAME, INVALID_COST);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        String expectedMessage \u003d Cost.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, goal::toModelType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public void toModelType_nullCost_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        JsonAdaptedGoal goal \u003d new JsonAdaptedGoal(false, VALID_NAME, null);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Cost.class.getSimpleName());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, goal::toModelType);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public void toModelType_nullGoal_createsNull() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        JsonAdaptedGoal goal \u003d new JsonAdaptedGoal(true, VALID_NAME, VALID_COST);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertEquals(null, goal.toModelType());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EPiggyBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.EPiggy;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " *     {@code ePiggy ab \u003d new EPiggyBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "public class EPiggyBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private EPiggy ePiggy;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public EPiggyBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        ePiggy \u003d new EPiggy();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public EPiggyBuilder(EPiggy ePiggy) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        this.ePiggy \u003d ePiggy;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Adds a new {@code Person} to the {@code ePiggy} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public EPiggyBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        ePiggy.addPerson(person);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public EPiggy build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return ePiggy;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tehwenyi": 13,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalBudgets.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_FIRSTEXTRA;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_SECONDEXTRA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_FIRSTEXTRA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_SECONDEXTRA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PERIOD_FIRSTEXTRA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PERIOD_SECONDEXTRA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.EPiggy;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.epiggy.Budget;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.testutil.epiggy.BudgetBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " * A utility class containing a list of {@code Budget} objects to be used in tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "public class TypicalBudgets {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    // Date is in the form dd/MM/yyyy"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final Budget ONE \u003d new BudgetBuilder().withAmount(\"100\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            .withPeriod(\"7\").withDate(\"04/02/2019\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final Budget TWO \u003d new BudgetBuilder().withAmount(\"300\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            .withPeriod(\"18\").withDate(\"11/02/2019\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final Budget THREE \u003d new BudgetBuilder().withAmount(\"500\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            .withDate(\"01/03/2019\").withPeriod(\"30\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final Budget FOUR \u003d new BudgetBuilder().withAmount(\"15\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            .withDate(\"31/03/2019\").withPeriod(\"1\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final Budget FIVE \u003d new BudgetBuilder().withAmount(\"20\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            .withDate(\"01/04/2019\").withPeriod(\"2\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final Budget SIX \u003d new BudgetBuilder().withAmount(\"90\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            .withDate(\"15/04/2019\").withPeriod(\"5\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final Budget SEVEN \u003d new BudgetBuilder().withAmount(\"12000\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            .withDate(\"20/04/2019\").withPeriod(\"365\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final Budget EIGHT \u003d new BudgetBuilder().withAmount(\"90\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            .withDate(\"01/02/2019\").withPeriod(\"3\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final Budget NINE \u003d new BudgetBuilder().withAmount(\"12\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            .withDate(\"31/01/2019\").withPeriod(\"1\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    // Other budgets"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final Budget TEN \u003d new BudgetBuilder().withAmount(\"10\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            .withPeriod(\"1\").withDate(\"04/02/2020\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final Budget ELEVEN \u003d new BudgetBuilder().withAmount(\"30\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            .withPeriod(\"1\").withDate(\"05/02/2020\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final Budget TWELVE \u003d new BudgetBuilder().withAmount(\"50\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            .withDate(\"06/02/2020\").withPeriod(\"1\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final Budget THIRTEEN \u003d new BudgetBuilder().withAmount(\"15\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            .withDate(\"07/02/2020\").withPeriod(\"1\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final Budget FOURTEEN \u003d new BudgetBuilder().withAmount(\"20\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            .withDate(\"08/02/2020\").withPeriod(\"1\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final Budget FIFTEEN \u003d new BudgetBuilder().withAmount(\"9\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            .withDate(\"09/02/2020\").withPeriod(\"1\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final Budget SIXTEEN \u003d new BudgetBuilder().withAmount(\"15\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            .withDate(\"10/02/2020\").withPeriod(\"1\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final Budget SEVENTEEN \u003d new BudgetBuilder().withAmount(\"90\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            .withDate(\"11/02/2020\").withPeriod(\"1\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final Budget EIGHTEEN \u003d new BudgetBuilder().withAmount(\"12\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            .withDate(\"12/02/2020\").withPeriod(\"1\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final Budget NINETEEN \u003d new BudgetBuilder().withAmount(\"12\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            .withDate(\"13/02/2020\").withPeriod(\"1\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final Budget TWENTY \u003d new BudgetBuilder().withAmount(\"12\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            .withDate(\"14/02/2020\").withPeriod(\"1\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    // Manually added - Budget\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final Budget FIRST_EXTRA \u003d new BudgetBuilder().withAmount(VALID_AMOUNT_FIRSTEXTRA)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            .withPeriod(VALID_PERIOD_FIRSTEXTRA).withDate(VALID_DATE_FIRSTEXTRA).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final Budget SECOND_EXTRA \u003d new BudgetBuilder().withAmount(VALID_AMOUNT_SECONDEXTRA)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            .withPeriod(VALID_PERIOD_SECONDEXTRA).withDate(VALID_DATE_SECONDEXTRA).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private TypicalBudgets() {} // prevents instantiation"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Returns an {@code EPiggy} with all the typical persons."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static EPiggy getTypicalEPiggy() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        EPiggy ab \u003d new EPiggy();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        for (Budget budget : getTypicalBudgets()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            ab.addBudget(i, budget);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static List\u003cBudget\u003e getTypicalBudgets() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static List\u003cBudget\u003e getMaximumNumberOfBudgets() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, TEN, ELEVEN,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                TWELVE, THIRTEEN, FOURTEEN, FIFTEEN, SIXTEEN, SEVENTEEN, EIGHTEEN, NINETEEN, TWENTY));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tehwenyi": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final Index INDEX_FIRST_EXPENSE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final Index INDEX_SECOND_EXPENSE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final Index INDEX_THIRD_EXPSENSE \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final Index INDEX_FIRST_BUDGET \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final Index INDEX_SECOND_BUDGET \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final Index INDEX_THIRD_BUDGET \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final Index INDEX_FIRST_ALLOWANCE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final Index INDEX_SECOND_ALLOWANCE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final Index INDEX_THIRD_ALLOWANCE \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 4,
      "tehwenyi": 4,
      "-": 12,
      "rahulb99": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.EPiggy;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Returns an {@code EPiggy} with all the typical persons."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static EPiggy getTypicalEPiggy() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        EPiggy ab \u003d new EPiggy();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tehwenyi": 4,
      "-": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/epiggy/AllowanceBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "package seedu.address.testutil.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Allowance;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.item.Cost;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.item.Item;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.item.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " * A utility class to help with building Allowance objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "public class AllowanceBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Allowance from Mom\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String DEFAULT_COST \u003d \"20.0\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"03/01/2019\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private Cost cost;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public AllowanceBuilder() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        cost \u003d new Cost(DEFAULT_COST);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        date \u003d new Date(DEFAULT_DATE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public AllowanceBuilder(Allowance allowanceToCopy) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        name \u003d allowanceToCopy.getItem().getName();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        cost \u003d allowanceToCopy.getItem().getCost();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        date \u003d allowanceToCopy.getDate();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(allowanceToCopy.getItem().getTags());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * Sets the {@code Name} of the {@code Allowance} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public AllowanceBuilder withName(String name) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Expense} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public AllowanceBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * Sets the {@code cost} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public AllowanceBuilder withCost(String cost) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        this.cost \u003d new Cost(cost);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * Sets the {@code date} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public AllowanceBuilder withDate(String date) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        if (date.equals(\"\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            this.date \u003d new Date();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        this.date \u003d new Date(date);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * Builds an {@code Expense} object with name, date, cost and tags"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * @return Expense object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public Allowance build() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        Item item \u003d new Item(name, cost, tags);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return new Allowance(item, date);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/epiggy/BudgetBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "package seedu.address.testutil.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.epiggy.Budget;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pdnm"
        },
        "content": "import seedu.address.model.epiggy.item.Cost;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.epiggy.item.Period;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " * A utility class to help with building Budget objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "public class BudgetBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final String DEFAULT_AMOUNT \u003d \"500\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final String DEFAULT_PERIOD \u003d \"25\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    // The date is in the format dd/MM/yyyy, hence 3rd February 2019 below"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public static final String DEFAULT_STARTDATE \u003d \"03/02/2019\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pdnm"
        },
        "content": "    private Cost amount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private Period days;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private Date startDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public BudgetBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        amount \u003d new Cost(DEFAULT_AMOUNT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        days \u003d new Period(DEFAULT_PERIOD);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            startDate \u003d dateFormat.parse(DEFAULT_STARTDATE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            System.out.println(\"Date should be in the format dd/mm/yyyy.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Initializes the BudgetBuilder with the data of {@code budgetToCopy}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public BudgetBuilder(Budget budgetToCopy) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        amount \u003d budgetToCopy.getBudgetedAmount();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        days \u003d budgetToCopy.getPeriod();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        startDate \u003d budgetToCopy.getStartDate();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pdnm"
        },
        "content": "     * Sets the {@code Cost} of the {@code Budget} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public BudgetBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pdnm"
        },
        "content": "        this.amount \u003d new Cost(amount);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Sets the {@code Period} of the {@code Budget} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public BudgetBuilder withPeriod(String days) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        this.days \u003d new Period(days);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Sets the {@code Date} of the {@code Budget} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public BudgetBuilder withDate(String startDate) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            this.startDate \u003d dateFormat.parse(startDate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            System.out.println(\"Date should be in the format dd/mm/yyyy.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Sets the {@code Date} of the {@code Budget} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public BudgetBuilder withDate(Date startDate) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public Budget build() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return new Budget(amount, days, startDate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pdnm": 5,
      "tehwenyi": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/epiggy/EditBudgetDetailsBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "package seedu.address.testutil.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.logic.commands.epiggy.EditBudgetCommand.EditBudgetDetails;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.epiggy.Budget;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.epiggy.item.Cost;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.epiggy.item.Period;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " * A utility class to help with building EditBudgetDetails objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "public class EditBudgetDetailsBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private EditBudgetDetails details;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public EditBudgetDetailsBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        details \u003d new EditBudgetDetails();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public EditBudgetDetailsBuilder(EditBudgetDetails details) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        this.details \u003d new EditBudgetDetails(details);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Returns an {@code EditBudgetDetails} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public EditBudgetDetailsBuilder(Budget budget) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        details \u003d new EditBudgetDetails();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        details.setAmount(budget.getBudgetedAmount());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        details.setPeriod(budget.getPeriod());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        details.setStartDate(budget.getStartDate());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Sets the {@code Name} of the {@code EditBudgetDetails} that we are building."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public EditBudgetDetailsBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        details.setAmount(new Cost(amount));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Sets the {@code Period} of the {@code EditBudgetDetails} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public EditBudgetDetailsBuilder withPeriod(String period) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        details.setPeriod(new Period(period));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Sets the {@code StartDate} of the {@code EditBudgetDetails} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public EditBudgetDetailsBuilder withDate(String startDate) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        details.setStartDate(new Date(startDate));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public EditBudgetDetails build() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return details;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tehwenyi": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/epiggy/EditExpenseDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "package seedu.address.testutil.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.commands.epiggy.EditExpenseCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.epiggy.Expense;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.epiggy.item.Cost;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.epiggy.item.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " * A utility class to help with building EditExpenseDescriptor objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "public class EditExpenseDescriptorBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    private EditExpenseDescriptor descriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public EditExpenseDescriptorBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public EditExpenseDescriptorBuilder(EditExpenseDescriptor descriptor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        this.descriptor \u003d new EditExpenseDescriptor(descriptor);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * Returns an {@code EditExpenseDescriptor} with fields containing {@code expense}\u0027s details"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public EditExpenseDescriptorBuilder(Expense expense) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptor();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        descriptor.setName(expense.getItem().getName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        descriptor.setCost(expense.getItem().getCost());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        descriptor.setDate(expense.getDate());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        descriptor.setTags(expense.getItem().getTags());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * Sets the {@code Name} of the {@code EditExpenseDescriptor} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public EditExpenseDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditExpenseDescriptor} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public EditExpenseDescriptorBuilder withCost(String cost) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        descriptor.setCost(new Cost(cost));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * Sets the {@code Email} of the {@code EditExpenseDescriptor} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public EditExpenseDescriptorBuilder withDate(String date) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        descriptor.setDate(new Date(date));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditExpenseDescriptor}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public EditExpenseDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public EditExpenseDescriptor build() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rahulb99": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/epiggy/ExpenseUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "package seedu.address.testutil.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.commands.epiggy.AddExpenseCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.logic.commands.epiggy.EditExpenseCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.epiggy.Expense;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " * A utility class for Expense."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "public class ExpenseUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * Returns an add command string for adding the {@code expense}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static String getAddExpenseCommand(Expense expense) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return AddExpenseCommand.COMMAND_WORD + \" \" + getExpenseDetails(expense);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static String getAddExpenseCommandAlias(Expense expense) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return AddExpenseCommand.COMMAND_ALIAS + \" \" + getExpenseDetails(expense);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * Returns the part of command string for the given {@code expense}\u0027s details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static String getExpenseDetails(Expense expense) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        sb.append(PREFIX_NAME + expense.getItem().getName().name + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        sb.append(PREFIX_COST + expense.getItem().getCost().toString() + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        sb.append(PREFIX_DATE + expense.getDate().toString() + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        expense.getItem().getTags().stream().forEach(s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * Returns the part of command string for the given {@code EditExpenseDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static String getEditExpenseDescriptorDetails(EditExpenseDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        descriptor.getCost().ifPresent(cost -\u003e sb.append(PREFIX_COST).append(cost.toString()).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        descriptor.getDate().ifPresent(date -\u003e sb.append(PREFIX_DATE).append(date.toString()).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rahulb99": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/epiggy/ExpensesBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "package seedu.address.testutil.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.epiggy.Expense;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.epiggy.item.Cost;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.epiggy.item.Item;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.epiggy.item.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " * A utility class to help with building Expense objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "public class ExpensesBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Chicken Rice\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final String DEFAULT_COST \u003d \"5.0\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"03/01/2019\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    //public static final Set\u003cTag\u003e DEFAULT_TAGS \u003d new HashSet\u003c\u003e(Arrays.asList(\"Food\", \"Lunch\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    private Cost cost;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public ExpensesBuilder() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        cost \u003d new Cost(DEFAULT_COST);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        date \u003d new Date(DEFAULT_DATE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * Initializes the ExpensesBuilder with the data of {@code expenseToCopy}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public ExpensesBuilder(Expense expenseToCopy) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        name \u003d expenseToCopy.getItem().getName();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        cost \u003d expenseToCopy.getItem().getCost();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        date \u003d expenseToCopy.getDate();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(expenseToCopy.getItem().getTags());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * Sets the {@code Name} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public ExpensesBuilder withName(String name) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Expense} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public ExpensesBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * Sets the {@code cost} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public ExpensesBuilder withCost(String cost) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        this.cost \u003d new Cost(cost);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * Sets the {@code date} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public ExpensesBuilder withDate(String date) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        if (date.equals(\"\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            this.date \u003d new Date();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        this.date \u003d new Date(date);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * Builds an {@code Expense} object with name, date, cost and tags"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     * @return Expense object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public Expense build() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        Item item \u003d new Item(name, cost, tags);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return new Expense(item, date);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rahulb99": 90
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/epiggy/GoalBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "package seedu.address.testutil.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Goal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.item.Cost;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.item.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " * A utility class to help with building Goal objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "public class GoalBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Adidas Shoes\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final String DEFAULT_COST \u003d \"129\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private Cost cost;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public GoalBuilder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        cost \u003d new Cost(DEFAULT_COST);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * Sets the {@code Name} of the {@code Goal} that we are building."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public GoalBuilder withName(String name) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     * Sets the {@code cost} of the {@code Goal} that we are building."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public GoalBuilder withCost(String cost) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        this.cost \u003d new Cost(cost);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public Goal build() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return new Goal(name, cost);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/epiggy/TypicalAllowances.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "package seedu.address.testutil.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_2019;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.EPiggy;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Allowance;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " * A utility class containing a list of {@code Allowance} objects to be used in tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "public class TypicalAllowances {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final Allowance ALLOWANCE_FROM_MOM \u003d new AllowanceBuilder().withName(\"From Mom\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            .withCost(\"20.00\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            .withDate(VALID_DATE_2019)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            .withTags(\"Allowance\").build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final Allowance ALLOWANCE_FROM_DAD \u003d new AllowanceBuilder().withName(\"From Mom\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            .withCost(\"30.00\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            .withDate(VALID_DATE_2019)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            .withTags(\"Allowance\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private TypicalAllowances() { }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static EPiggy getTypicalEPiggy() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        EPiggy ep \u003d new EPiggy();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        for (Allowance allowance : getTypicalAllowances()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            ep.addAllowance(allowance);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return ep;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static List\u003cAllowance\u003e getTypicalAllowances() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALLOWANCE_FROM_MOM, ALLOWANCE_FROM_DAD));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/epiggy/TypicalExpenses.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "package seedu.address.testutil.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COST_BOWLING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COST_IPHONE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_2018;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_2019;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOWLING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_IPHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FOOD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIENDS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.EPiggy;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import seedu.address.model.epiggy.Expense;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rahulb99"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "public class TypicalExpenses {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final Expense DUMPLING_SOUP \u003d new ExpensesBuilder().withName(\"Dumpling Soup\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            .withCost(\"5.00\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            .withDate(VALID_DATE_2019)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            .withTags(VALID_TAG_FOOD, \"lunch\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final Expense STATIONARY \u003d new ExpensesBuilder().withName(\"Stationary\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            .withCost(\"3.00\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            .withDate(\"03/06/2019\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            .withTags(\"school\", \"misc\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final Expense MOVIE_AVENGERS \u003d new ExpensesBuilder().withName(\"Avengers : Endgame movie\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            .withDate(\"04/26/2019\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            .withCost(\"8.50\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            .withTags(\"movie\", \"entertainment\", VALID_TAG_FRIENDS).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final Expense KARAOKE \u003d new ExpensesBuilder().withName(\"Karaoke: KTV\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            .withCost(\"10.00\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            .withDate(VALID_DATE_2018)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            .withTags(VALID_TAG_FRIENDS).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final Expense CLOTHES \u003d new ExpensesBuilder().withName(\"Clothes shopping\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            .withCost(\"21.80\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            .withTags(\"shopping\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final Expense KFC \u003d new ExpensesBuilder().withName(\"KFC\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            .withDate(\"04/26/2019\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            .withCost(\"13.00\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            .withTags(VALID_TAG_FOOD, \"dinner\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final Expense BOWLING \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            new ExpensesBuilder().withName(VALID_NAME_BOWLING)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            .withCost(VALID_COST_BOWLING)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            .withDate(VALID_DATE_2018)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            .withTags(VALID_TAG_FRIENDS).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final Expense IPHONE \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            new ExpensesBuilder().withName(VALID_NAME_IPHONE)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                    .withCost(VALID_COST_IPHONE)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                    .withDate(VALID_DATE_2019).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final String KEYWORD_MATCHING_CLOTHES \u003d \"n/Clothes\"; // A keyword that matches Clothes"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final String KEYWORD_MATCHING_SOUP \u003d \"n/soup\"; //A keyword that matches soup"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static final String KEYWORD_MATCHING_FOOD \u003d \"t/Food\"; //A keyword that matches Food tag"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    private TypicalExpenses() {} // prevents instantiation"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * Returns an {@code EPiggy} with all the typical expenses."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static EPiggy getTypicalEPiggy() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        EPiggy ab \u003d new EPiggy();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        for (Expense expense : getTypicalExpenses()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "            ab.addExpense(expense);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rahulb99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    public static List\u003cExpense\u003e getTypicalExpenses() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(DUMPLING_SOUP, STATIONARY, MOVIE_AVENGERS, KARAOKE, CLOTHES, KFC,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "                BOWLING, IPHONE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tehwenyi": 3,
      "rahulb99": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/epiggy/TypicalGoal.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "package seedu.address.testutil.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.model.epiggy.Goal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " * A utility class containing a list of {@code Goal} objects to be used in tests."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kev-inc"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "public class TypicalGoal {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final Goal IPHONE \u003d new GoalBuilder()"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            .withName(\"IPHONE X\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            .withCost(\"999\")"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    public static final Goal ROLEX \u003d new GoalBuilder()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            .withName(\"Rolex Watch\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            .withCost(\"12000\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "    private TypicalGoal() { }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/epiggy/TypicalReports.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "package seedu.address.testutil.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_2018;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_2019;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FOOD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIENDS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.model.EPiggy;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.model.epiggy.Budget;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.model.epiggy.Expense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": " * A utility class containing a list of {@code budget}, {@code expense},"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": " * {@code allowance} objects to be used in tests."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "public class TypicalReports {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    // valid test budgets"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    // Date is in the form MM/dd/yyyy"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public static final Budget VALID_BUDGET_ONE \u003d new BudgetBuilder().withAmount(\"100\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            .withPeriod(\"7\").withDate(\"02/04/2019\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public static final Budget VALID_BUDGET_TWO \u003d new BudgetBuilder().withAmount(\"300\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            .withPeriod(\"18\").withDate(\"02/11/2019\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public static final Budget VALID_BUDGET_THREE \u003d new BudgetBuilder().withAmount(\"500\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            .withDate(\"03/01/2019\").withPeriod(\"30\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    // test expenses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public static final Expense DUMPLING_SOUP \u003d new ExpensesBuilder().withName(\"Dumpling Soup\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            .withCost(\"5.00\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            .withDate(VALID_DATE_2019)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            .withTags(VALID_TAG_FOOD, \"lunch\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public static final Expense STATIONARY \u003d new ExpensesBuilder().withName(\"Stationary\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            .withCost(\"3.00\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            .withDate(\"03/06/2019\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            .withTags(\"school\", \"misc\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public static final Expense MOVIE_AVENGERS \u003d new ExpensesBuilder().withName(\"Avengers : Endgame movie\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            .withDate(\"04/26/2019\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            .withCost(\"8.50\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            .withTags(\"movie\", \"entertainment\", VALID_TAG_FRIENDS).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public static final Expense KARAOKE \u003d new ExpensesBuilder().withName(\"Karaoke: KTV\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            .withCost(\"26.90\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            .withDate(VALID_DATE_2018)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            .withTags(VALID_TAG_FRIENDS).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public static final Expense CLOTHES \u003d new ExpensesBuilder().withName(\"Clothes shopping\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            .withCost(\"50.80\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            .withTags(\"shopping\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public static final Expense KFC \u003d new ExpensesBuilder().withName(\"KFC\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            .withDate(\"04/26/2019\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            .withCost(\"13.95\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            .withTags(VALID_TAG_FOOD, \"dinner\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private TypicalReports() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Returns an {@code EPiggy} with all the typical expenses, allowance and budget."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * TODO: allowance and budget storage is not up yet. Therefore budgets are not add to storage."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public static EPiggy getTypicalEPiggy() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        // todo: change the method here"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        EPiggy ePiggy \u003d new EPiggy();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //add budgets into ePiggy"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        for (Budget budget : getTypicalBudgets()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            ePiggy.addBudget(i, budget);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //add expenses into ePiggy"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        for (Expense expense : getTypicalExpenses()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            ePiggy.addExpense(expense);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        return ePiggy;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Returns an {@code EPiggy} with empty data."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public static EPiggy getTypicalEPiggyWithEmptyData() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        return new EPiggy();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public static List\u003cBudget\u003e getTypicalBudgets() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(VALID_BUDGET_ONE, VALID_BUDGET_TWO,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                VALID_BUDGET_THREE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public static List\u003cExpense\u003e getTypicalExpenses() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(DUMPLING_SOUP, STATIONARY, MOVIE_AVENGERS, KARAOKE, CLOTHES, KFC));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yunjun199321": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ArrayList\u003cString\u003e history \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(commandText -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandText.equals(COMMAND_THAT_SUCCEEDS)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                return new CommandResult(\"Command successful\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(\"Command failed\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }, history);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 159,
      "rahulb99": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/GuiUnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.UiPartRule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " * A GUI unit test class for EPiggy."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final UiPartRule uiPartRule \u003d new UiPartRule();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tehwenyi": 1,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/HelpWindowTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assume.assumeFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.HelpWindow.USERGUIDE_FILE_PATH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindowTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindowHandle helpWindowHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e helpWindow \u003d new HelpWindow());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.registerStage(helpWindow::getRoot);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindowHandle \u003d new HelpWindowHandle(helpWindow.getRoot());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedHelpPage \u003d HelpWindow.class.getResource(USERGUIDE_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedHelpPage, helpWindowHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsShowing_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.isShowing());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsHiding_returnsFalse() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.isShowing());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus_helpWindowNotFocused_focused() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: This test skip can be removed once this bug is fixed:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // https://github.com/javafxports/openjdk-jfx/issues/50"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        //"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // When there are two stages (stage1 and stage2) shown,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage1 is in focus and stage2.requestFocus() is called,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // we expect that stage1.isFocused() will return false while"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage2.isFocused() returns true. However, as reported in the bug report,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // both stage1.isFocused() and stage2.isFocused() returns true,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // which fails the test."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assumeFalse(\"Test skipped in headless mode: Window focus behavior is buggy.\", guiRobot.isHeadlessMode());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Focus on another stage to remove focus from the helpWindow"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Stage temporaryStage \u003d new Stage();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            temporaryStage.show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            temporaryStage.requestFocus();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::focus);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 73,
      "rahulb99": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/MainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "import seedu.address.storage.epiggy.JsonEPiggyStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public final TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        JsonEPiggyStorage jsonEPiggyStorage \u003d new JsonEPiggyStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager(jsonEPiggyStorage, jsonUserPrefsStorage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new LogicManager(new ModelManager(), storageManager));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_menuBarExitButton_allWindowsClosed() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuHelpButton();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the \u0027X\u0027 button on"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * Opens the {@code HelpWindow} by clicking on the menu bar\u0027s help button."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuHelpButton() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Help\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"F1\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 1,
      "tehwenyi": 2,
      "-": 95,
      "rahulb99": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/ResultDisplayTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplayTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplayHandle resultDisplayHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(resultDisplay);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayHandle \u003d new ResultDisplayHandle(getChildNode(resultDisplay.getRoot(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // default result text"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertEquals(\"Welcome to ePiggy! \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                + \"Enter a command to get started, or enter \u0027help\u0027 to view all the available commands!\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // new result received"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        guiRobot.interact(() -\u003e resultDisplay.setFeedbackToUser(\"Dummy feedback to user\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                \"Dummy command from user\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertEquals(\"ePiggy: Dummy feedback to user\\n\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                + \"You: Dummy command from user\\n\\n\", resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kev-inc": 7,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.EPiggy;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    private final EPiggy ePiggy \u003d new EPiggy();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION, ePiggy);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // after address book is updated"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        guiRobot.interact(() -\u003e ePiggy.addPerson(ALICE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tehwenyi": 4,
      "-": 71
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "public class AddCommandSystemTest extends EPiggySystemTest {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person toAdd \u003d AMY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except phone and email"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person, missing tags -\u003e added */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before adding -\u003e added */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person -\u003e rejected */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different email -\u003e rejected */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different address -\u003e rejected */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing address -\u003e rejected */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * {@code EPiggySystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     *"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * @see EPiggySystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Person toAdd) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Person)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Person toAdd) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(toAdd);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     *"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * {@code EPiggySystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     *"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * @see EPiggySystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yunjun199321": 10,
      "tehwenyi": 5,
      "-": 235,
      "rahulb99": 2
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "public class ClearCommandSystemTest extends EPiggySystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo clearing address book -\u003e original address book restored */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo clearing address book -\u003e cleared */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in person list and clears address book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before clearing -\u003e entire address book cleared */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * {@code EPiggySystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * @see EPiggySystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * {@code EPiggySystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * @see EPiggySystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yunjun199321": 1,
      "tehwenyi": 5,
      "-": 94,
      "rahulb99": 2
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "public class DeleteCommandSystemTest extends EPiggySystemTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_PERSON.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Person deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the last person in the list -\u003e deleted */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo deleting the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        removePerson(modelBeforeDeletingLast, lastPersonIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the middle person in the list -\u003e deleted */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middlePersonIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(middlePersonIndex);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        int invalidIndex \u003d getModel().getEPiggy().getPersonList().size();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing delete operation while a person card is selected ------------------------ */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the selected person -\u003e person list panel selects the person before the deleted person */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //selectPerson(selectedIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        deletedPerson \u003d removePerson(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "                getModel().getEPiggy().getPersonList().size() + 1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the {@code Person} at the specified {@code index} in {@code model}\u0027s address book."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the removed person"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person removePerson(Model model, Index index) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Person targetPerson \u003d getPerson(model, index);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(targetPerson);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return targetPerson;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the person at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Person deletedPerson \u003d removePerson(expectedModel, toDelete);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * {@code EPiggySystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * @see EPiggySystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "//     * @see EPiggySystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * {@code EPiggySystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * @see EPiggySystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yunjun199321": 3,
      "tehwenyi": 8,
      "-": 184,
      "rahulb99": 2
    }
  },
  {
    "path": "src/test/java/systemtests/EPiggySystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.EPiggy;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": " * A system test class for EPiggy, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "public abstract class EPiggySystemTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertApplicationStartingStateIsCorrect(); // remove this line if displayList removed"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    protected EPiggy getInitialData() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        return TypicalPersons.getTypicalEPiggy();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    //    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    //        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showAllPersons() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(getModel().getEPiggy().getPersonList().size(), getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getEPiggy().getPersonList().size());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the person at {@code index} of the displayed list."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    //    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    //        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    //        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(0, getModel().getEPiggy().getPersonList().size());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the person list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertEquals(new EPiggy(expectedModel.getEPiggy()), testApp.readStorageEPiggy());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url is now displaying the"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * default page."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    //    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    ////        getPersonListPanel().navigateToCard(getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    ////        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    //        URL expectedUrl;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    //        try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    ////            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    //        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    //            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    ////        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    //"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    ////        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertEquals(\"Welcome to ePiggy! \""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                + \"Enter a command to get started, or enter \u0027help\u0027 to view all the available commands!\","
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                getResultDisplay().getText());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yunjun199321": 26,
      "kev-inc": 3,
      "tehwenyi": 9,
      "-": 246
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "public class EditCommandSystemTest extends EPiggySystemTest {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo editing the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo editing the last person in the list -\u003e last person edited again */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different name -\u003e edited */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertTrue(getModel().getEPiggy().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(getModel().getFilteredPersonList().get(index.getZeroBased()), BOB);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone and email"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        int invalidIndex \u003d getModel().getEPiggy().getPersonList().size();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //        selectPerson(index);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // browser\u0027s url is updated to reflect the new person\u0027s name"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(PersonUtil.getAddCommand(BOB));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertTrue(getModel().getEPiggy().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different address -\u003e rejected */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different email -\u003e rejected */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedPerson, null);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * updated to values specified {@code editedPerson}.\u003cbr\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * {@code EPiggySystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * @see EPiggySystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "//     * @see EPiggySystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * {@code EPiggySystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * @see EPiggySystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yunjun199321": 2,
      "tehwenyi": 9,
      "-": 287,
      "rahulb99": 2
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "public class FindCommandSystemTest extends EPiggySystemTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: repeat previous find command where person list is displaying the persons we are finding"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        assertFalse(getModel().getEPiggy().getPersonList().contains(BENSON));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person not in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find phone number of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find address of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find email of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find tags of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find while a person is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in empty address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"FiNd Meier\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * {@code EPiggySystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * @see EPiggySystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * {@code EPiggySystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * @see EPiggySystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yunjun199321": 2,
      "tehwenyi": 6,
      "-": 186,
      "rahulb99": 2
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "public class HelpCommandSystemTest extends EPiggySystemTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //        getPersonListPanel().click();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().click();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowNotOpen();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //use menu button //TODO here"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yunjun199321": 5,
      "tehwenyi": 3,
      "-": 100
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.EPiggy;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "public class SampleDataTest extends EPiggySystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    protected EPiggy getInitialData() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBook_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Person[] expectedList \u003d SampleDataUtil.getSamplePersons();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //assertListMatching(getPersonListPanel(), expectedList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yunjun199321": 1,
      "tehwenyi": 3,
      "-": 45,
      "rahulb99": 2
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rahulb99"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "public class SelectCommandSystemTest extends EPiggySystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the first card in the person list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the last card in the person list -\u003e selected */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Index personCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, personCount);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the middle card in the person list -\u003e selected */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, select index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "        int invalidIndex \u003d getModel().getEPiggy().getPersonList().size();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, select index within bounds of address book and person list -\u003e selected */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select from empty address book -\u003e rejected */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * {@code EPiggySystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * @see EPiggySystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "//     * @see EPiggySystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //        } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * {@code EPiggySystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "     * @see EPiggySystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yunjun199321": 6,
      "tehwenyi": 7,
      "-": 141,
      "rahulb99": 2
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "import seedu.address.model.ReadOnlyEPiggy;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyEPiggy\u003e ePiggy, Path saveFileLocation) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tehwenyi"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(ePiggy, saveFileLocation));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tehwenyi": 4,
      "-": 71
    }
  },
  {
    "path": "src/test/java/systemtests/epiggy/EPiggySystemTestWithDefaultData.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "package systemtests.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.EpiggyTestApp;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.model.EPiggy;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.testutil.epiggy.TypicalReports;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import systemtests.ClockRule;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": " * A system test class for EPiggy, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "public abstract class EPiggySystemTestWithDefaultData {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private static final String WELCOME_MESSAGE \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            \"Welcome to ePiggy! Enter a command to get started, \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    + \"or enter \u0027help\u0027 to view all the available commands!\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private EpiggyTestApp testApp;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private EpiggySystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        EpiggySystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        setupHelper \u003d new EpiggySystemTestSetupHelper();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertApplicationStartingStateIsCorrect(); // remove this line if displayList removed"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    protected EPiggy getInitialData() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        return TypicalReports.getTypicalEPiggy();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        return EpiggyTestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    //    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    //        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    protected void showAllPersons() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertEquals(getModel().getEPiggy().getPersonList().size(), getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getEPiggy().getPersonList().size());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Selects the person at {@code index} of the displayed list."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    //    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    //        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    //        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertEquals(0, getModel().getEPiggy().getPersonList().size());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * and the person list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                                                     Model expectedModel) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertEquals(new EPiggy(expectedModel.getEPiggy()), testApp.readStorageEPiggy());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url is now displaying the"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * default page."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    //    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    ////        getPersonListPanel().navigateToCard(getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    ////        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    //        URL expectedUrl;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    //        try {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    ////            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    //        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    //            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    ////        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    //"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    ////        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertEquals(WELCOME_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yunjun199321": 286
    }
  },
  {
    "path": "src/test/java/systemtests/epiggy/EPiggySystemTestWithEmptyData.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "package systemtests.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.EpiggyTestApp;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.model.EPiggy;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.testutil.epiggy.TypicalReports;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import systemtests.ClockRule;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": " * A system test class for EPiggy, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "public abstract class EPiggySystemTestWithEmptyData {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private static final String WELCOME_MESSAGE \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            \"Welcome to ePiggy! Enter a command to get started, \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                    + \"or enter \u0027help\u0027 to view all the available commands!\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private EpiggyTestApp testApp;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private EpiggySystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        EpiggySystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        setupHelper \u003d new EpiggySystemTestSetupHelper();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialEmptyData, getDataFileLocation());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertApplicationStartingStateIsCorrect(); // remove this line if displayList removed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Returns the empty data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    protected EPiggy getInitialEmptyData() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        return TypicalReports.getTypicalEPiggyWithEmptyData();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        return EpiggyTestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    protected void showAllPersons() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertEquals(getModel().getEPiggy().getPersonList().size(), getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getEPiggy().getPersonList().size());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertEquals(0, getModel().getEPiggy().getPersonList().size());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * and the person list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                                                     Model expectedModel) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertEquals(new EPiggy(expectedModel.getEPiggy()), testApp.readStorageEPiggy());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url is now displaying the"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * default page."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertEquals(WELCOME_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yunjun199321": 262
    }
  },
  {
    "path": "src/test/java/systemtests/epiggy/EpiggySystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "package systemtests.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.EpiggyTestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.model.ReadOnlyEPiggy;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "public class EpiggySystemTestSetupHelper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private EpiggyTestApp testApp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Sets up a new {@code EpiggyTestApp} and returns it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public EpiggyTestApp setupApplication(Supplier\u003cReadOnlyEPiggy\u003e ePiggy, Path saveFileLocation) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new EpiggyTestApp(ePiggy, saveFileLocation));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yunjun199321": 75
    }
  },
  {
    "path": "src/test/java/systemtests/epiggy/ReportCommandEmptyDataSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "package systemtests.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import guitests.guihandles.epiggy.ReportWindowHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.logic.commands.epiggy.ReportCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "public class ReportCommandEmptyDataSystemTest extends EPiggySystemTestWithEmptyData {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private static final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public void openReportWindow() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        String messageHistory \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        String command \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //use menu button to open report window"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        getMainMenu().openReportWindowUsingMenu();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertReportWindowOpen(); // close window if report window open"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        executeCommand(ReportCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertReportWindowOpen();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        // open report window and give it focus"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        executeCommand(ReportCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        // check report window for specified day"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //TODO: some Java internal error here. Remove this test case will make the error."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        executeCommand(ReportCommand.COMMAND_WORD + \" \" + CliSyntax.PREFIX_DATE + \"21/03/2019\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertReportWindowOpen();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        messageHistory \u003d \"ePiggy: \" + ReportCommand.MESSAGE_SUCCESS + \"\\n\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                + \"You: \" + ReportCommand.COMMAND_WORD + \"\\n\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        messageHistory \u003d \"ePiggy: \" + ReportCommand.MESSAGE_SUCCESS + \"\\n\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                + \"You: \" + ReportCommand.COMMAND_WORD + \"\\n\\n\" + messageHistory;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertEquals(messageHistory, getResultDisplay().getText());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        // check report window for specified month"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        command \u003d ReportCommand.COMMAND_WORD + \" \" + CliSyntax.PREFIX_DATE + \"03/2019\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertReportWindowOpen();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        messageHistory \u003d \"ePiggy: \" + ReportCommand.MESSAGE_SUCCESS + \"\\n\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                + \"You: \" + command + \"\\n\\n\" + messageHistory;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertEquals(messageHistory, getResultDisplay().getText());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        // check report window for specified year"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        command \u003d ReportCommand.COMMAND_WORD + \" \" + CliSyntax.PREFIX_DATE + \"2019\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertReportWindowOpen();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        messageHistory \u003d \"ePiggy: \" + ReportCommand.MESSAGE_SUCCESS + \"\\n\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                + \"You: \" + command + \"\\n\\n\" + messageHistory;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertEquals(messageHistory, getResultDisplay().getText());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        // check report window for specified date"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        command \u003d ReportCommand.COMMAND_WORD + \" \" + CliSyntax.PREFIX_DATE + \"21/03/2019\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertReportWindowOpen();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        messageHistory \u003d \"ePiggy: \" + ReportCommand.MESSAGE_SUCCESS + \"\\n\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                + \"You: \" + command + \"\\n\\n\" + messageHistory;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertEquals(messageHistory, getResultDisplay().getText());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Asserts that the report window is open, and closes it after checking."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private void assertReportWindowOpen() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertTrue(ERROR_MESSAGE, ReportWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        new ReportWindowHandle(guiRobot.getStage(ReportWindowHandle.REPORT_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Asserts that the report window isn\u0027t open."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private void assertReportWindowNotOpen() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertFalse(ERROR_MESSAGE, ReportWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yunjun199321": 100
    }
  },
  {
    "path": "src/test/java/systemtests/epiggy/ReportCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "package systemtests.epiggy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import static seedu.address.commons.core.Messages.FORMAT_ERROR_MESSAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import guitests.guihandles.epiggy.ReportWindowHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.logic.commands.epiggy.ReportCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "import seedu.address.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "public class ReportCommandSystemTest extends EPiggySystemTestWithDefaultData {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private static final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private static final String INVALID_DATE_WORD \u003d \"invalid\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private static final String INVALID_DATE_LARGE_DAY \u003d \"99/03/2019\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private static final String INVALID_DATE_LARGE_MONTH \u003d \"21/99/2019\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private static final String INVALID_DATE_LARGE_YEAR \u003d \"21/03/999999999999999\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private static final String INVALID_DATE_NEGATIVE_DAY \u003d \"-21/99/2019\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private static final String INVALID_DATE_NEGATIVE_MONTH \u003d \"21/-03/2019\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    //private static final String INVALID_DATE_NEGATIVE_YEAR \u003d \"21/03/-2019\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private static final String INVALID_MONTH_LARGE_MONTH \u003d \"99/2019\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private static final String INVALID_MONTH_LARGE_YEAR \u003d \"99/999999999999999999\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private static final String INVALID_MONTH_NEGATIVE_MONTH \u003d \"-99/2019\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    //private static final String INVALID_MONTH_NEGATIVE_YEAR \u003d \"03/-2019\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private static final String INVALID_YEAR_LARGE_YEAR \u003d \"999999999999\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    //private static final String INVALID_YEAR_NEGATIVE_YEAR \u003d \"-2019\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    public void openReportWindow() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        String messageHistory \u003d \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        String command \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kev-inc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        getMainMenu().openReportWindowUsingMenu();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertReportWindowOpen(); // close window if report window open"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        executeCommand(ReportCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertReportWindowOpen();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        // open report window and give it focus"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        executeCommand(ReportCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        // check report window for specified day"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        //TODO: some Java internal error here. Remove this test case will make the error."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        executeCommand(ReportCommand.COMMAND_WORD + \" \" + CliSyntax.PREFIX_DATE + \"21/03/2019\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertReportWindowOpen();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        messageHistory \u003d \"ePiggy: \" + ReportCommand.MESSAGE_SUCCESS + \"\\n\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                + \"You: \" + ReportCommand.COMMAND_WORD + \"\\n\\n\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        messageHistory \u003d \"ePiggy: \" + ReportCommand.MESSAGE_SUCCESS + \"\\n\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                + \"You: \" + ReportCommand.COMMAND_WORD + \"\\n\\n\" + messageHistory;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertEquals(messageHistory, getResultDisplay().getText());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        // check report window for specified month"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        command \u003d ReportCommand.COMMAND_WORD + \" \" + CliSyntax.PREFIX_DATE + \"03/2019\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertReportWindowOpen();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        messageHistory \u003d \"ePiggy: \" + ReportCommand.MESSAGE_SUCCESS + \"\\n\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                + \"You: \" + command + \"\\n\\n\" + messageHistory;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertEquals(messageHistory, getResultDisplay().getText());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        // check report window for specified year"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        command \u003d ReportCommand.COMMAND_WORD + \" \" + CliSyntax.PREFIX_DATE + \"2019\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertReportWindowOpen();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        messageHistory \u003d \"ePiggy: \" + ReportCommand.MESSAGE_SUCCESS + \"\\n\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                + \"You: \" + command + \"\\n\\n\" + messageHistory;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertEquals(messageHistory, getResultDisplay().getText());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        // check report window for specified date"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        command \u003d ReportCommand.COMMAND_WORD + \" \" + CliSyntax.PREFIX_DATE + \"21/03/2019\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertReportWindowOpen();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        messageHistory \u003d \"ePiggy: \" + ReportCommand.MESSAGE_SUCCESS + \"\\n\\n\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "                + \"You: \" + command + \"\\n\\n\" + messageHistory;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertEquals(messageHistory, getResultDisplay().getText());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        // check report window for invalid date format"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        command \u003d ReportCommand.COMMAND_WORD + \" \" + CliSyntax.PREFIX_DATE + INVALID_DATE_WORD;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        messageHistory \u003d \"ePiggy: \" + FORMAT_ERROR_MESSAGE + \"\\n\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                + \"You: \" + command + \"\\n\\n\" + messageHistory;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertEquals(messageHistory, getResultDisplay().getText());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        // check report window for invalid date format"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        command \u003d ReportCommand.COMMAND_WORD + \" \" + CliSyntax.PREFIX_DATE + INVALID_DATE_LARGE_DAY;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        messageHistory \u003d \"ePiggy: \" + FORMAT_ERROR_MESSAGE + \"\\n\\n\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                + \"You: \" + command + \"\\n\\n\" + messageHistory;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertEquals(messageHistory, getResultDisplay().getText());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        // check report window for invalid date format"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        command \u003d ReportCommand.COMMAND_WORD + \" \" + CliSyntax.PREFIX_DATE + INVALID_DATE_LARGE_MONTH;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        messageHistory \u003d \"ePiggy: \" + FORMAT_ERROR_MESSAGE + \"\\n\\n\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                + \"You: \" + command + \"\\n\\n\" + messageHistory;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertEquals(messageHistory, getResultDisplay().getText());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        // check report window for invalid date format"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        command \u003d ReportCommand.COMMAND_WORD + \" \" + CliSyntax.PREFIX_DATE + INVALID_DATE_LARGE_YEAR;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        messageHistory \u003d \"ePiggy: \" + FORMAT_ERROR_MESSAGE + \"\\n\\n\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                + \"You: \" + command + \"\\n\\n\" + messageHistory;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertEquals(messageHistory, getResultDisplay().getText());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        // check report window for invalid date format"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        command \u003d ReportCommand.COMMAND_WORD + \" \" + CliSyntax.PREFIX_DATE + INVALID_DATE_NEGATIVE_DAY;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        messageHistory \u003d \"ePiggy: \" + FORMAT_ERROR_MESSAGE + \"\\n\\n\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                + \"You: \" + command + \"\\n\\n\" + messageHistory;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertEquals(messageHistory, getResultDisplay().getText());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        // check report window for invalid date format"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        command \u003d ReportCommand.COMMAND_WORD + \" \" + CliSyntax.PREFIX_DATE + INVALID_DATE_NEGATIVE_MONTH;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        messageHistory \u003d \"ePiggy: \" + FORMAT_ERROR_MESSAGE + \"\\n\\n\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                + \"You: \" + command + \"\\n\\n\" + messageHistory;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertEquals(messageHistory, getResultDisplay().getText());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        // check report window for invalid date format"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        executeCommand(ReportCommand.COMMAND_WORD + \" \" + CliSyntax.PREFIX_DATE + INVALID_DATE_NEGATIVE_YEAR);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertEquals(FORMAT_ERROR_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        // check report window for invalid date format"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        command \u003d ReportCommand.COMMAND_WORD + \" \" + CliSyntax.PREFIX_DATE + INVALID_MONTH_LARGE_MONTH;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        messageHistory \u003d \"ePiggy: \" + FORMAT_ERROR_MESSAGE + \"\\n\\n\""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                + \"You: \" + command + \"\\n\\n\" + messageHistory;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertEquals(messageHistory, getResultDisplay().getText());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        // check report window for invalid date format"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        command \u003d ReportCommand.COMMAND_WORD + \" \" + CliSyntax.PREFIX_DATE + INVALID_MONTH_LARGE_YEAR;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        messageHistory \u003d \"ePiggy: \" + FORMAT_ERROR_MESSAGE + \"\\n\\n\""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                + \"You: \" + command + \"\\n\\n\" + messageHistory;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertEquals(messageHistory, getResultDisplay().getText());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        // check report window for invalid date format"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        command \u003d ReportCommand.COMMAND_WORD + \" \" + CliSyntax.PREFIX_DATE + INVALID_MONTH_NEGATIVE_MONTH;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        messageHistory \u003d \"ePiggy: \" + FORMAT_ERROR_MESSAGE + \"\\n\\n\""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                + \"You: \" + command + \"\\n\\n\" + messageHistory;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertEquals(messageHistory, getResultDisplay().getText());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        // check report window for invalid date format"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        executeCommand(ReportCommand.COMMAND_WORD + \" \" + CliSyntax.PREFIX_DATE + INVALID_MONTH_NEGATIVE_YEAR);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertEquals(FORMAT_ERROR_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        // check report window for invalid date format"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        command \u003d ReportCommand.COMMAND_WORD + \" \" + CliSyntax.PREFIX_DATE + INVALID_YEAR_LARGE_YEAR;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        messageHistory \u003d \"ePiggy: \" + FORMAT_ERROR_MESSAGE + \"\\n\\n\""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                + \"You: \" + command + \"\\n\\n\" + messageHistory;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertEquals(messageHistory, getResultDisplay().getText());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        // check report window for invalid date format"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        executeCommand(ReportCommand.COMMAND_WORD + \" \" + CliSyntax.PREFIX_DATE + INVALID_YEAR_NEGATIVE_YEAR);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertEquals(FORMAT_ERROR_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        // check report window for invalid date format"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        command \u003d ReportCommand.COMMAND_WORD + \" \" + CliSyntax.PREFIX_DATE + INVALID_MONTH_LARGE_MONTH;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        messageHistory \u003d \"ePiggy: \" + FORMAT_ERROR_MESSAGE + \"\\n\\n\""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                + \"You: \" + command + \"\\n\\n\" + messageHistory;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        assertEquals(messageHistory, getResultDisplay().getText());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        // check report window for invalid command"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        command \u003d ReportCommand.COMMAND_WORD + \" invalid\";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "        String s1 \u003d \"ePiggy: Invalid command format! \\n\" + ReportCommand.MESSAGE_USAGE + \"\\n\\n\""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kev-inc"
        },
        "content": "                + \"You: \" + command + \"\\n\\n\" + messageHistory;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        String s2 \u003d getResultDisplay().getText();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertEquals(s1, s2);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Asserts that the report window is open, and closes it after checking."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private void assertReportWindowOpen() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertTrue(ERROR_MESSAGE, ReportWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        new ReportWindowHandle(guiRobot.getStage(ReportWindowHandle.REPORT_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     * Asserts that the report window isn\u0027t open."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    private void assertReportWindowNotOpen() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "        assertFalse(ERROR_MESSAGE, ReportWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yunjun199321"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yunjun199321": 158,
      "kev-inc": 78
    }
  }
]
