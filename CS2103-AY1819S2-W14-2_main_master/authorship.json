[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003d FomoFoto"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S2-W14-2/main[image:https://travis-ci.org/CS2103-AY1819S2-W14-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S2-W14-2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S2-W14-2/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "https://ci.appveyor.com/project/thamsimun/main/branch/master[image:https://ci.appveyor.com/api/projects/status/gqnt5vfqykgas3uk/branch/master?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/ui.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": "FomoFoto is a Java based, command line photo editor."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "* Command-line editor with minimal GUI."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": "* Large filter and photo manipulation tool-sets."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "* Import and export in large variety of photos."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "* Support for layers and history."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "* The original source of the AddressBook project was created by the https://github.com/se-edu/[SE-EDU] initiative."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "carrein": 12,
      "-": 27,
      "thamsimun": 1
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "carrein"
        },
        "content": "    compile group: \u0027com.drewnoakes\u0027, name: \u0027metadata-extractor\u0027, version: \u00272.6.2\u0027"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "carrein"
        },
        "content": "    compile group: \u0027org.apache.commons\u0027, name: \u0027commons-io\u0027, version: \u00271.3.2\u0027"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    compile group: \u0027net.imagej\u0027, name: \u0027ij\u0027, version: \u00271.52k\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    // https://mvnrepository.com/artifact/org.imgscalr/imgscalr-lib"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    compile group: \u0027org.imgscalr\u0027, name: \u0027imgscalr-lib\u0027, version: \u00274.2\u0027"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    // https://mvnrepository.com/artifact/com.sksamuel.scrimage/scrimage-core"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    compile group: \u0027com.sksamuel.scrimage\u0027, name: \u0027scrimage-core_2.12\u0027, version: \u00273.0.0-alpha4\u0027"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    // https://mvnrepository.com/artifact/com.sksamuel.scrimage/scrimage-filters"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    compile group: \u0027com.sksamuel.scrimage\u0027, name: \u0027scrimage-filters_2.12\u0027, version: \u00273.0.0-alpha4\u0027"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "carrein"
        },
        "content": "    compile \u0027com.google.guava:guava:27.1-jre\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level4\u0027,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level4\u0027,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "kayheen": 3,
      "carrein": 3,
      "-": 236,
      "thamsimun": 4
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kayheen"
        },
        "content": "AddressBook - FomoFoto was developed by CS2103-AY1819S2-W14-2 +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "_{The dummy content given below serves as a placeholder to be used by future forks of the project.}_ +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u003d\u003d\u003d Ho Boon Wee Addison"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kayheen"
        },
        "content": "image::Carrein.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[https://github.com/Carrein[github]] [\u003c\u003ccarrein#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kayheen"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kayheen"
        },
        "content": "Responsibilities: Scheduling and Tracking, UI"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u003d\u003d\u003d Tan Qun Wei Randy"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kayheen"
        },
        "content": "image::randytqw.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[https://github.com/randytqw[github]] [\u003c\u003crandytqw#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kayheen"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Integration, Image State Management (Undo, Redo)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u003d\u003d\u003d Tay Zhan Peng"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kayheen"
        },
        "content": "image::itszp.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[https://github.com/itszp[github]] [\u003c\u003citszp#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Code Quality, Image and Directory Navigation (Open, Save, ListFiles)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u003d\u003d\u003d Tham Si Mun"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kayheen"
        },
        "content": "image::thamsimun.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[https://github.com/thamsimun[github]] [\u003c\u003cthamsimun#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kayheen"
        },
        "content": "Responsibilities: Testing, Image Filters"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u003d\u003d\u003d Chong Kay Heen"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kayheen"
        },
        "content": "image::kayheen.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[https://github.com/kayheen[github]] [\u003c\u003ckayheen#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kayheen"
        },
        "content": "Responsibilities: Documentation, Image Manipulation"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "kayheen": 16,
      "-": 41
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kayheen"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2103-AY1819S2-W14-2/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* *Email us* : You can also reach us at `kayheen@u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "kayheen": 1,
      "-": 6
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d FomoFoto - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S2-W14-2/main/tree/master"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "By: `W14-2`      Since: `Feb 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::Architecture[]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"763\", height\u003d\"339\"]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model, *`Model`*\u003e\u003e: Holds the data of images in the App in memory."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the first three components do the following:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model` component consists of two components:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "*  `Album` which stores the pool of images that has been imported into the App."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "*  `CurrentEdit` which holds the image that the App is currently editing in-memory."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagrams_ below show how the components interact with each other for the scenarios where the user issues the commands `import C:\\Users\\XXX\\Desktop\\Pictures` and `rotate 90`."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ".Component interactions for `import C:\\Users\\XXX\\Desktop\\Pictures` command"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "image::SDforImportcommand.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ".Component interactions for `rotate 90` command"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "image::SDforRotatecommand.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "// end::Architecture[]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::ui[]"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "// end::ui[]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ".  `Logic` uses the `FomoFotoParser` class to parse the user command."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `CurrentEdit` (e.g. rotating an image) and `Album` (e.g. saving an image)."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "// tag::LogicComponentSequenceDiagrams[]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Given below are the Sequence Diagrams for interactions within the `Logic` component for the `execute(\"import C:\\User\\Pictures\\image.png\")` and `execute(\"rotate 90\")` API call."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ".Interactions Inside the Logic Component for the `import C:\\User\\Pictures\\image.png` Command"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "image::LogicImportSd.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ".Interactions Inside the Logic Component for the `rotate 90` Command"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "image::LogicRotateSd.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "// end::LogicComponentSequenceDiagrams[]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::DesignModel[]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelComponents.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/CurrentEdit.java[`CurrentEdit.java`], link:{repoURL}/src/main/java/seedu/address/model/Album.java[`Album.java`]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "The Model component consists of `Album` class and `CurrentEdit` class."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "`Album` Class:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "* stores imported images as a list of images."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "* contains methods to access `assets` folder."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "`CurrentEdit` Class:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "* stores an `Image` instance in `tempImage` and `originalImage` when an image is opened."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "* creates a copy of the opened image and the current edited image in `temp` folder."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "* `tempImage` is updated each time a command to edit the image is called. (e.g. `RotateCommand`, `ContrastCommand`)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a list of commands that the user input after an image is opened."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "* contains methods to access `temp` folder."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "// end::DesignModel[]"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "////"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "////"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "// tag::StorageComponent[]"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "image::StorageArchitectureDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "The `assets` and `temp` folders form the storage component of FomoFoto."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "*  The `assets` folder stores images that the user imported"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "* The `temp` folder stores the image that the program is currently editing on."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* The `Album` class contains methods to save and retrieve images from the `assets` folder."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* The `CurrentEdit` class contains methods to overwrite and retrieve the image that the program is currently editing on."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "// end::StorageComponent[]"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::import[]"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003d\u003d\u003d Import feature"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "carrein"
        },
        "content": "The Import Command allow users to import a file of image format into FomoFoto for editing."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "carrein"
        },
        "content": "The implementation of the import feature is largely similar to that of linux\u0027s `cp` command, with the exception the output path is fixed. It is facilitated by he `ModelManager` and `ImportCommandParser` and contains the follow operation:"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "carrein"
        },
        "content": " * `Model#displayImage(Image)` - Retrives the image from `assets` folder by `Image` name field."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "carrein"
        },
        "content": " * `ImportCommandParser#parse(String)` - Takes in an absolute path and copies the image to `assets` directory."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "carrein"
        },
        "content": "Example usage scenario:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "carrein"
        },
        "content": " 1. User launches application and enters `import C:\\Users\\images\\sample.png`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "carrein"
        },
        "content": " 2. `ImportCommandParser` takes in arguments and performs validation on given path. Image is copied to `assets` folder if the path is valid."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "carrein"
        },
        "content": " 3. `Model` display the imported image to UI by calling the `Notifier` class which calls on the display panel listening to the notifier."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "carrein"
        },
        "content": " 4. `ImagePanel` updates to reflect the imported image."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "carrein"
        },
        "content": "image::ImportSequenceDiagram.png[width\u003d800]"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "carrein"
        },
        "content": "* *Alternative 1 (current choice)*: Import images with absolute path."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "carrein"
        },
        "content": "** Pros: Easy and clement implementation."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "carrein"
        },
        "content": "** Cons: Limited to single image import."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "carrein"
        },
        "content": "* *Alternative 2* : Open images within a directory."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "carrein"
        },
        "content": "** Pros: Can import many images without repeating the command."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "carrein"
        },
        "content": "** Cons: Can result in errors in too mny images or images are of alternative formats."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "// end::import[]"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::OpenAndListFiles[]"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Open Feature"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "The open command allows users to open a previously imported image for image-editing."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "The open function is facilitated by `Album` and `CurrentEdit`. It uses the following operations:"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "* `Album#checkFileExist(String)` - Checks if file name specified by the `String` exists in assets folder."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "* `Album#retrieveImage(String)` - Return an `Image` specified by the `String` in assets folder."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "* `CurrentEdit#openImage(Image)` - Creates two copies of the opened image in `temp` folder. The duplicated images are instantiated as `tempImage` and `originalImage`."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "* `CurrentEdit#updateExIF(Image)` - Updates the Exif data of the image."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "* `CurrenEdit#displayTempImage()` - Displays the temporary image stored in directory: \"src/main/resources/temp/\"."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the `open` mechanism behaves at each step."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user executes `open sample.png`."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. `Album#checkFileExist(String)` is called to check if the file specified by the `String` exist in `assets` folder. If it exists, `Album#retrieveImage(String)` is called to create an `Image` object from the specified file. Otherwise, `CommandException` is thrown."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The `Image` is passed to `CurrentEdit#openImage(Image)` to create two copies of `Image`, named `temp_img.png` and `ori_img.png`, in `temp` folder. These copies are then instantiated as `tempImage` and `originalImage`."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. `CurrentEdit#updateExIF(Image)` is called to updates the information of the opened image in the GUI."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. `CurrenEdit#displayTempImage()` displays the opened image on the GUI."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the `open` command works:"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ".Sequence Diagram for Open Command"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "image::OpenCommandSequenceDiagram.png[width\u003d800]"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "* *Alternative 1 (current choice)*: Users can only open and edit one image at a time."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement. `temp` folder only stores one original image and one temporary image. Clear to users that edits are done to the only opened image."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Users are unable to open other images while editing."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "* *Alternative 2* : Users can open and edit multiple images."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Users are able to edit multiple images simultaneously."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Open has to distinguish whether user is opening an image from `assets` folder or `temp` folder. Requires many duplicates with different names. This may be confusing for the user."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d List Files Feature"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "The `listfiles` command displays a list of all the files in `assets` folder."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "The listfiles function is facilitated by `Album`. It uses the following operations:"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "* `Album#getFileNames()` - Returns a list of all the files in `assets` folder."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the `listfiles` mechanism behaves at each step."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user executes `listfiles`."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. `Album#getFileNames()` accesses `assets` folder and returns all the file names in a String array."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The String array is displayed on the GUI."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the `listfiles` command works:"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ".Sequence Diagram for ListFiles"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "image::ListFilesCommandSequenceDiagram.png[width\u003d800]"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`listfiles` command was created to allow users to know what files are stored in `assets` folder so that they can call `open` using the right file names."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "// end::OpenAndListFiles[]"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "// tag::ImageFilter[]"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Image Filters"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "The filter mechanism is facilitated by https://github.com/sksamuel/scrimage[`scrimage`], an external API Library that provides image filters methods for our image editor. The gradle script declares a compile-time dependency on this external API through the coordinates:  `group: \u0027com.sksamuel.scrimage\u0027`, `name: \u0027scrimage-filters_2.12\u0027`, `version: \u00273.0.0-alpha4\u0027`."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "The image filters feature is facilitated by `CurrentEdit`. It uses the following operations:"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `CurrentEdit#getTempImage` - Retrieves the temporary image `tempImage` which stores the filepath of the temporary image in `temp` folder, its history of edits [`List\u003cCommand\u003e`] and its metadata."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `CurrenEdit#updateTempImage` - Replaces the temporary image in `temp` folder with the newly edited image and update the `tempImage` instance in the class."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `CurrentEdit#addCommand` - add this command to the edit history [`List\u003cCommand\u003e`] in `tempImage` for the undo/redo function"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `CurrenEdit#displayTempImage()` - Displays the temporary image stored in directory: \"src/main/resources/temp/\"."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "The filter feature mainly consists of:"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `ContrastCommand`: Applies a contrast ratio value on the targetted image. The contrast ratio value is preset to 1.1 if a specified ratio value is not given by the user.  A value above 1 (e.g 1.3) increases the contrast of the image while a positive value below 1 (e.g 0.5) decreases the contrast of the image."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `BrightnessCommand`: Applies a brightness ratio value on the targetted image. The brightness ratio value is preset to 1.1 if a specified ratio value is not given by the user. A value above 1 (e.g 1.3) increases the brightness of the image while a positive value below 1 (e.g 0.5) decreases the brightness of the image."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `BlackWhiteCommand`: Transforms targetted image to a black and white image through a threshold value. The brightness ratio value is preset to 127 if a specified ratio value is not given by the user. Pixels on the image lighter than the threshold value becomes white and pixels darker than the threshold value becomes black."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "The following describes main operations and processes for each command stated above."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d\u003d\u003d\u003d Contrast Command"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "This command calls for an adjustment of contrast on a targetted image. After adjusting the contrast, it adds this specific command called by the user to the `List\u003cCommands\u003e` belonging to `tempImage` found in `currentEdit` which saves the editing history of the targetted image."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Given below is an example usage scenario and how the command should behave at each step. [This applies to the other image filter commands as well.]"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Step 1. When the user runs an `open` command to edit an image, it invokes a method which creates an instance of an `Image` that stores the filepath of the image, its history of edits [`List\u003cCommand\u003e`] and its metadata. This `Image` object is saved under the variable name `tempImage` in `currentEdit` for editing."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Step 2. When the user enters the command (e.g. `contrast 0.3`), the entered command is parsed and the command will be executed."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "If an invalid command is provided, a reminder of how to use the command will be given to the user and no command will be run."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Step 3. During execution, the `execute` method in the `contrastCommand` class invokes `currentEdit#getTempImage()` to get the `tempImage` from `currentEdit`."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Step 4. Upon retrieving the `tempImage`, the `execute` method creates a `ContrastFilter` instance provided by the external libary [`scrimage`] which takes in a double-valued contrast ratio value. This `ContrastFilter` will then be applied on the image retrieved from the filepath: \"src/main/resources/temp/\" + `tempImage#getURL()`."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Step 5. After applying the `ContrastFilter` on the targetted image, `currentEdit#updateTempImage()` is invoked to save the newly edited image and replace the previous one in the filepath: \"src/main/resources/temp/\" + `tempImage#getURL()`."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Step 6. The `execute` method then checks if the boolean `isNewCommand` is true. If it is `true`, it indicates that the command is a new contrast command called directly from the user and not through an `undo/redo` command which triggers Step 7 in the line below. Otherwise, the command\u0027s execution ends in this step."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Step 7. `isNewCommand` is set to `false` to signal that this command is not a new contrast command if it is executed again through the undo/redo function."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "`currentEdit#addCommand(this)` is invoked to add this command to the `List\u003cCommand\u003e` in `tempImage` for the undo/redo function and `currentEdit#displayTempImage()` is used to display the edited image on the graphical user interface."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " - Intermediate images have to be stored and edited in a temp folder first due to our `undo/redo` implementation."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ".Sequence Diagram for Contrast Command"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "image::ContrastCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d\u003d\u003d\u003d Brightness Command"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "This command calls for an adjustment of brightness on a targetted image. After adjusting the brightness, it adds this specific command called by the user to the `List\u003cCommands\u003e` belonging to `tempImage` found in `currentEdit` which saves the editing history of the targetted image."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Refer to the example usage scenario and design considerations in \u003c\u003cContrast Command\u003e\u003e"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ".Sequence Diagram for Brightness Command"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "image::BrightnessCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d\u003d\u003d\u003d BlackWhite Command"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "This command calls for a transformation of a targetted image to a black and white image. After applying the black and white transformation, it adds this specific command called by the user to the `List\u003cCommands\u003e` belonging to `tempImage` found in `currentEdit` which saves the editing history of the targetted image."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Refer to the example usage scenario and design considerations in \u003c\u003cContrast Command\u003e\u003e"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ".Sequence Diagram for BlackWhite Command"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "image::BlackWhiteCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "// end::ImageFilter[]"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::ImageManipulation[]"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Image Manipulation"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "This segment involves manipulating the physical image itself, such as rotating, cropping and resizing. The implementations of these features are facilitated by https://github.com/rkalla/imgscalr[`ImgScalr Library`], which is an external API Library that helps process the target image."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "The manipulation feature is facilitated by `CurrentEdit`. It uses the following operations:"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": " * `CurrentEdit#getTempImage` - Retrieves the temporary image `tempImage` which stores the filepath of the temporary image in `temp` folder, its history of edits [`List\u003cCommand\u003e`] and its metadata."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": " * `CurrenEdit#updateTempImage` - Replaces the temporary image in `temp` folder with the newly edited image and update the `tempImage` instance in the class."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": " * `CurrentEdit#addCommand` - add this command to the edit history [`List\u003cCommand\u003e`] in `tempImage` for the undo/redo function"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": " * `CurrenEdit#displayTempImage()` - Displays the temporary image stored in directory: \"src/main/resources/temp/\"."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "This manipulation feature mainly consists of:"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "* `RotateCommand`: Allows user to rotate images by specifying a degree (90, 180 or 270 only)."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "* `CropCommand`: Allows user to crop images by specifying the coordinates of the top left corner, the width and the height of the desired cropped image."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "* `resizeCommand`: Allows user to resize images to the desired width and height."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "The follwing describes main operations and processes for each command stated above."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Rotate Command"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows the user to rotate the targetted image by specifying a degree (90, 180 or 270 only). Upon receiving an input degree by the user, the degree will be checked for its validity and will throw an error if the degree is not within the specified range. The command will then be added to the `List\u003cCommands\u003e` belonging to `tempImage` found in `currentEdit` which saves the editing history of the targetted image."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the command should behave at each step [This applies to the other image manipulation commands as well.]:"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. When the user runs an open command to edit an image, it invokes a method which creates an instance of an `Image` that stores the filepath of the image, its history of edits `List\u003cCommand\u003e` and its metadata. This `Image` object is saved under the variable name `tempImage` in `currentEdit` for editing."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. When the user enters the command (e.g. `rotate 90`), the entered command is parsed and the command will be executed."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "If an invalid command is provided, a reminder of how to use the command will be given to the user and no command will be run."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. During execution, the `execute` method in the `RotateCommand` class invokes `currentEdit#getTempIMage()` to get the `tempImage` from the `currentEdit`."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. Upon retrieving the `tempImage`, the `execute` method in `RotateCommand` gets a `BufferedImage` instance from `tempImage`.The method then calls the external library https://github.com/rkalla/imgscalr[`ImgScalr`]\u0027s class `rotate` and passes the `BufferedImage` object in."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. A `BufferedImage` object is returned from the external library and `currentEdit#updateTempImage()` is invoked to overwrite the current image in the filepath: \"src/main/resources/temp/\" + `tempImage#getUrl` with a new `BufferedImage` object."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The `execute` method then checks if the boolean `isNewCommand` is true. If it is true, it indicates that the command is a new rotate command called directly from the user and not through an undo/redo command which triggers Step 7 in the line below. Otherwise, the command’s execution ends in this step."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "Step 7. `isNewCommand` is set to false to signal that this command is not a new rotate command if it is executed again through the `undo/redo` function. `currentEdit#addCommand(this)` is invoked to add this command to the `List\u003cCommand\u003e` in `tempImage` for the `undo/redo` function and `currentEdit#displayTempImage()` is used to display the edited image on the graphical user interface."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "* Intermediate images have to be stored and edited in a temp folder first due to our `undo/redo` implementation."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ".Sequence Diagram for Rotate Command"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "image::RotateCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Crop Command"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows the user to crop the targetted image by specifying the coordinates of the top left hand corner of the desired image, the width of the desired image and the height of the desired image. Upon receiving the inputs, the values will be checked for their validity and will throw an error if any value is not within the specified range. The command will then be added to the `List\u003cCommands\u003e` belonging to `tempImage` found in `currentEdit` which saves the editing history of the targetted image."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the example usage scenario and design considerations in \u003c\u003cRotate Command\u003e\u003e"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ".Sequence Diagram for Crop Command"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "image::CropCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Resize Command"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows the user to resize the targetted image by specifying the width and height of the desired image. Upon receiving the inputs, the values will be checked for their validity and will throw an error if any value is not within the specified range. The command will then be added to the `List\u003cCommands\u003e` belonging to `tempImage` found in `currentEdit` which saves the editing history of the targetted image."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the example usage scenario and design considerations in \u003c\u003cRotate Command\u003e\u003e"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ".Sequence Diagram for Resize Command"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "image::ResizeCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "// end::ImageManipulation[]"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "randytqw"
        },
        "content": "The undo/redo mechanism is facilitated by `Image`. It contains a list of commands applied to the current image. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "randytqw"
        },
        "content": "* `Image#addHistory()` -- Saves the current edit command into commandHistory list and increments index."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "randytqw"
        },
        "content": "* `Image#setUndo()` -- Decreases index by 1."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "randytqw"
        },
        "content": "* `Image#setRedo()` -- Increases index by 1."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "randytqw"
        },
        "content": "* `Image#getHistory()` -- Returns commandHistory as List."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "randytqw"
        },
        "content": "* `Image#getSubHistory()` -- Returns commandHistory sublist using index to track which commands should be included."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "randytqw"
        },
        "content": "* `Image#canUndo()` -- Returns true if index \u003e 0."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "randytqw"
        },
        "content": "* `Image#canRedo()` -- Returns true if index \u003c CommandHistory.size()."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "randytqw"
        },
        "content": "These operations are exposed in the `CurrentEdit` interface as `CurrentEdit#addCommand()`, `CurrentEdit#setUndoTemp()`, `CurrentEdit#setRedoTemp()`, `CurrentEdit#getHistoryTemp()`, `CurrentEdit#getSubHistoryTemp()`, `CurrentEdit#canUndoTemp()` and `CurrentEdit#canRedoTemp()` respectively."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "randytqw"
        },
        "content": "Step 1. The user opens an image. The `Image` will be initialized with an empty commandHistory List."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "randytqw"
        },
        "content": "Step 2. The user executes a series of transformations on the image. These transformations are stored in the commandHistory list and for each transformation stored, the index is incremented by 1 to point to that transformation."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "randytqw"
        },
        "content": "Step 3. The user wants to undo the previous transformation by using the `undo` command. It will call `CurrentEdit#replaceTempWithOriginal()` which will replace the edited image in temp folder with the original image. It will then call `CurrentEdit#setUndoTemp()` to set the index in `tempImage` to the required index and retrieve the list with `CurrentEdit#getHistoryTemp()`. Using the list, it will apply the commands onto the original image till it reaches the command just before the set index."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "randytqw"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "If a command fails its execution, it will return the image before undo was called and produce an error message."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "randytqw"
        },
        "content": "Step 4. After executing Undo, `index` will be less than size of commandHistory. If redo is not executed before a new command is added, all commands in the list after `index` will be deleted."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "randytqw"
        },
        "content": "For redo, it will call `setRedo` and retrieve that command to apply it on the current image."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "randytqw"
        },
        "content": "If the `Image#index` is 0, pointing to the initial photo, then there are no previous commands to restore. The `undo` command uses `CurrentEdit#canUndoTemp()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "randytqw"
        },
        "content": "The `redo` command does the opposite -- it calls `CurrentEdit#setRedoTemp()`, which shifts the `index` once to the right, pointing to the previously undone command, and executes that command to perform the transformation."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "randytqw"
        },
        "content": "If the `index` is at index `commandHistory.size()`, pointing to the latest image state, then there are no undone transformation to restore. The `redo` command uses `CurrentEdit#canRedoTemp()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "randytqw"
        },
        "content": "Step 5. The user executes `saves`, which calls `CurrentEdit#saveToAssets()`. This replaces the original image with the temp image since a name is not specified. When this happens, the user can no longer call `undo` as there is no original image to work on. The command history is also cleared."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* *Alternative 1:* Saves the each transformation as a separate image."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* *Alternative 2(current choice):* Save all transformation in a list and apply them when undo/redo is called. We chose this method as we do not want our application to take up too much space in the PC."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "randytqw"
        },
        "content": "** Pros: Will use less memory"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* *Alternative 1 (current choice):* Use a list to store the history of commands. We chose this so as to preserve good Object Oriented Programming principles."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "randytqw"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `Image`."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* *Alternative 2:* Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::Save[]"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Save Feature"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "The `save` command applies the edits to the current edit image and saves it into `assets` folder."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "The save function is facilitated by `Album` and `CurrentEdit`. It uses the following operations:"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "* `CurrentEdit#tempImageExist()` - Returns true `tempImage` in `CurrentEdit` is null. `tempImage` is null only if `open` command was never called."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "* `CurrentEdit#getTempImage()` - Returns the latest edited image stored in `tempImage` in `CurrentEdit`."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "* `CurrentEdit#getOriginalName()` - Returns original name of opened image."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "* `CurrentEdit#overwriteOriginal(String)` - Replaces `ori_img.png` with `temp_img.png\u0027 in `temp` folder. Updates `originalImage` to `tempImage` and `originalImageName` to `String` in `CurrentEdit`."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "* `Album#checkFileExist(String)` - Checks if file name specified by the `String` exists in assets folder."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "* `Album#saveToAssets(Image, String)` - Saves the `Image` as `String` into `assets` folder."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "* `Album#populateAlbum()` - Updates list of images in `Album` class."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "* `Album#refreshAlbum()` - Updates and displays the latest images in `assets` folder on the GUI."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the `save` mechanism behaves at each step."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user executes `save`."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. `CurrentEdit#tempImageExist()` checks if an image was previously opened. If no `open` was called previously, `CommandException` is thrown."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. `CurrentEdit#getTempImage()` retrieves the `tempImage` from `CurrentEdit`."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. If user did not input a `String` after `save` previously, `CurrentEdit#getOriginalName()` will retrieve the `originalImageName` from `CurrentEdit`. Otherwise, `Album#checkFileExist(String)` will be called to check if a file name is similar to `String`. If it is a duplicate, `CommandException` will be thrown."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. `Album#saveToAssets(Image, String)` takes in the previously retrieved `Image` and `String` to create a new image file in `assets` folder."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. `CurrentEdit#overwriteOriginal(String)` is called to update the files in `temp` folder and their respective instances in `CurrentEdit`."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "Step 7. `Album#populateAlbum()` updates the list of image in `Album` class to ensure it reflects all the files in `assets` folder."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "Step 8.`Album#refreshAlbum()` is called to update the Information Panel on the GUI."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the `save` command works:"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ".Sequence Diagram for Save Command"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "image::SaveCommandSequenceDiagram.png[width\u003d800]"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "* *Alternative 1*: User must input a string to name the the new image."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Name of the new image is clear to the user."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Tedious for user to type in a name each time `save` is performed."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "* *Alternative 2 (current choice)* : User can choose to input a string to name the new image or overwrite the opened image."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Convenient for user to `save` quickly without having to type a new name everytime."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: User may unintentionally overwrite the opened image."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "// end::Save[]"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/JsonAddressBookStorage.java[`JsonAddressBookStorage`] class."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `data/addressbook.json` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `JsonAdaptedPerson` class"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/JsonAdaptedPerson.java[`JsonAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new JSON field for `Remark`."
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.json`, `typicalPersonsAddressBook.json`, `validAddressBook.json` etc., such that the JSON tests will not fail due to a missing `remark` field."
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::UserStories[]"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "itszp"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the application"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "itszp"
        },
        "content": "|`* * *` |user |adjust the brightness of my photo |make it brighter or darker"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "itszp"
        },
        "content": "|`* * *` |user |adjust the contrast of my photo |"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "itszp"
        },
        "content": "|`* * *` |user |resize my photo |"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "itszp"
        },
        "content": "|`* * *` |user |crop my photo |trim it into my desired dimensions"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "itszp"
        },
        "content": "|`* * *` |user |rotate my photo |change its orientation"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "itszp"
        },
        "content": "|`* * *` |user |undo and redo my edits |revert or recover my changes"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "itszp"
        },
        "content": "|`* * *` |user |be able to save my image |continue editing it the future"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "itszp"
        },
        "content": "|`* * *` |user |import my photo |store a copy of the photo in the application for editing"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "itszp"
        },
        "content": "|`* * *` |user |export my photo|save my edited photos to my computer"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "itszp"
        },
        "content": "|`* * *` |user |open a photo stored in the application for editing |"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "itszp"
        },
        "content": "|`* *` |user |list the names of the photos stored in the application |know what photos are currently stored inside"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": "// end::UserStories[]"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "randytqw"
        },
        "content": "\u003d\u003d\u003d Use case: Editing an image"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "randytqw"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "randytqw"
        },
        "content": "1.  User imports an image"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "randytqw"
        },
        "content": "2.  User opens the image"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "randytqw"
        },
        "content": "3.  User specifies transformations using the CLI"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "randytqw"
        },
        "content": "4.  FomoFoto shows a preview of the transformations"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "randytqw"
        },
        "content": "5.  User can decide to save the image or not"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "randytqw"
        },
        "content": "+"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "randytqw"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "randytqw"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "randytqw"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "randytqw"
        },
        "content": "* 2a. The image cannot be opened. FomoFoto shows an error message."
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "randytqw"
        },
        "content": "+"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "randytqw"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "randytqw"
        },
        "content": "* 3a. User is unsatisfied by transformation. User can undo the transformation."
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "randytqw"
        },
        "content": "+"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "randytqw"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "randytqw"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "randytqw"
        },
        "content": "+"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "randytqw"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "randytqw"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "randytqw"
        },
        "content": "\u003d\u003d\u003d Use case: Editing an image"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "randytqw"
        },
        "content": "1.  User imports an image"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "randytqw"
        },
        "content": "2.  User opens the image"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "randytqw"
        },
        "content": "3.  User specifies transformations using the CLI"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "randytqw"
        },
        "content": "4.  FomoFoto shows a preview of the transformations"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "randytqw"
        },
        "content": "5.  User can decide to save the image or not"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "randytqw"
        },
        "content": "* 2a. The image cannot be opened. FomoFoto shows an error message."
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "randytqw"
        },
        "content": "* 3a. User is unsatisfied by transformation. User can undo the transformation."
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "itszp": 17,
      "carrein": 27,
      "randytqw": 58,
      "-": 1139,
      "thamsimun": 91
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d FomoFoto"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S2-W14-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "By: `W14-2`      Since: `Feb 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FomoFoto is a image processing software suite written in Java. This application is optimised for users who are *familiar with the Command Line Interface (CLI)*, while providing a *Graphical User Interface (GUI)* for easy reference. For those who love the CLI, this is written for you! If you are not familiar, don\u0027t worry, we\u0027ll take you through and you\u0027ll be a pro in no time! Who knows? You might even be editing your pictures faster than your friends who use Photoshop! Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Follow the steps below to set up your computer to run FomoFoto."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ".  Ensure you have Java version 9 or later installed in your Computer."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ".  Download the latest FomoFoto.jar here."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your FomoFoto application."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".Home Page of FomoFoto"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".  And you have just started up FomoFoto on your device! You can refer to \u003c\u003cFeatures\u003e\u003e for details of each command. If you would like a step-by-step walk through of our application, scroll down to the next section: A Walk Through."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::AWalkThrough[]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d A Walk Through"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start on our image editing journey. In this walk through, we will be demonstrating some simple commands to edit a sample image."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Head over to this https://twistedsifter.files.wordpress.com/2012/03/squirrel-photobomb-banff.jpg[`link`] to get a suggested sample image to start from."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Save the image in any desired folder you like on your device, like your Pictures folder for example. Name your image *squirrel.jpg*."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  Start FomoFoto by referring to \u003c\u003cQuick Start\u003e\u003e."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ".  Open the folder that the image file is stored in. Then, to get the file path of the image:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* In Windows: Hold on to the kbd:[Shift] key and *right click* on your image file. Click the option *Copy path*."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* In Mac: Go to terminal and navigate to your image file. Type \u0027pwd\u0027 to get the filepath to your image file and copy paste."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go back to the FomoFoto application. Import the image into FomoFoto by typing as follows:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ".Import Command"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "image::import.PNG[width\u003d\"912\"]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ".  Paste the file path by simultaneously pressing kbd:[Ctrl] and kbd:[V] keys."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* In Windows: Remove the kbd:[\"] and kbd:[\"] signs at the two ends of the filepath."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure your final command looks similar to the figure below (filepath may differ):"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Import with Filepath"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::importCommand.PNG[width\u003d\"915\"]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ".  Press kbd:[Enter] to execute the import command. Your image should be now displayed on the Album tab on the FomoFoto application as shown in the figure below."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".Import Success"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "image::importSuccess.PNG[width\u003d\"917\"]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ".  Open the imported image in FomoFoto by typing as follows:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ".Open Command"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "image::open.PNG[width\u003d\"917\"]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".  Press kbd:[Enter] to execute the open command. Your image should be now displayed on the FomoFoto application as shown in the figure below."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".Open Success"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "image::openImage.PNG[width\u003d\"917\"]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ".  Increase the brightness of the image by typing the following command: `brightness 2.0`. This doubles the brightness of the image."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ".Brightness Command"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "image::brightnessCommand.PNG[width\u003d\"915\"]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".  Press kbd:[Enter]. Your image should be brighter as shown in the figure below."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".Brightness Success"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "image::brightnessSuccess.PNG[width\u003d\"917\"]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".  Crop your photo by typing the following command: `crop 310 250 140 200 squirrel.jpg`. Press kbd:[Enter]. Your image should look similar as the figure below."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ".Crop Success"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "image::cropSuccess.PNG[width\u003d\"918\"]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "// end::AWalkThrough[]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  Save your edits by typing command: `save`."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes all the commands available in FomoFoto and includes examples on how to use them."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `import FILEPATH`, `FILEPATH` is a parameter which can be used as `import desktop/photoalbum/image1`."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* Items in square brackets are optional e.g `brightness [BRIGHTNESS_RATIO]` can be used as `brightness or as `brightness 0.9`."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "// tag::BlackWhiteCommand[]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Black and White Filter : `bw`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Applies black and white filter on opened image based on an integer threshold value. If threshold value is not specified, the black and white filter will use a preset threshold value of 127. Pixels lighter than the threshold value will become white and pixels darker than the threshold value will become black. +"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Format: `bw [THRESHOLD_VALUE]`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `bw` (threshold value preset to 127)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `bw 130`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "// end::BlackWhiteCommand[]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "// tag::BrightnessCommand[]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Brightness: `brightness`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Adjusts the brightness of the opened image based on a double-valued ratio. If the brightness ratio is not specified, a preset ratio value of 1.1 will be used. +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Format: `brightness [BRIGHTNESS_RATIO]`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `brightness` (brightness ratio preset to 1.1)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `brightness 1.9` (increases brightness)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `brightness 0.3` (reduces brightness)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "// end::BrightnessCommand[]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "// tag::ContrastCommand[]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Contrast: `contrast`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Adjusts the contrast of the opened image based on a double-valued ratio. If the contrast ratio is not specified, a preset ratio value of 1.1 will be used.+"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Format: `contrast CONTRAST_RATIO`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `contrast` (contrast ratio preset to 1.1)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `contrast 1.4` (increases contrast)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `contrast 0.3` (reduces contrast)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "// end::ContrastCommand[]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::CropCommand[]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Crop an image : `crop`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "Crops an image based on given top left hand corner coordinates, width and height of final cropped image wanted. +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Format: `crop X_POINTCOORD Y_POINTCOORD WIDTH HEIGHT`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "* The point coordinates must be separated by a space each."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "* `crop 2 3 500 500`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "// end::CropCommand[]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exit the program : `exit`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d\u003d\u003d Export edited image : `export`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "Exports the edited image into the specified filepath +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Format: `export FILEPATH`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `export desktop/editedphotoalbum`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Help view: `help`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "Displays help view to user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Import an image : `import`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Imports an image to assets folder from specified filepath +"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `import FILEPATH`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `import Users/Fomo/Pictures/sample.jpg`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::ListAndOpen[]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d List Files: `listfiles`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all files in assets folder. +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `listfiles`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Open an image : `open`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Opens an image inside assets folder for editing. +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Format: `open FILENAME`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "* `open sample.jpg`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "// end::ListAndOpen[]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "randytqw"
        },
        "content": "//tag ::Redo[]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d\u003d\u003d Redo edit steps : `redo`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "Returns to a previously undone state. +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "Redoable commands: those commands that modify the image (`rotate`, `crop`, `resize`, `brightness`, `contrast` and `bw`)."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* `rotate 180` +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "`brightness` +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "`undo` (reverses the `brightness` command) +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "`redo` (runs `brightness` again)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `contrast 0.3` +"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "`crop 2 3 500 500` +"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `crop 2 3 500 500` command +"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "`undo` (reverses the `contrast 0.3`) +"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "`redo` (runs `contrast 0.3` command again) +"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (runs `crop 2 3 500 500` command again)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "randytqw"
        },
        "content": "// end::Redo[]"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::RotateCommand[]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d\u003d\u003d Rotate an image : `rotate`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "Rotates the photo by a given degree provided by the user. Only 90, 180 or 270 degrees of rotation is allowed. +"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `rotate ANGLE`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* `rotate 90`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "// end::RotateCommand[]"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::ResizeCommand[]"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Resize an image : `resize`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "Resizes the photo to a given width and height provided by the user. +"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `resize WIDTH HEIGHT`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "* `resize 100 200`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "// end::ResizeCommand[]"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::UserSave[]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Save image : `save`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Applies and saves your edits. +"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `save` or `save FILENAME`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "* `save MyNewImage.png`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "// end::UserSave[]"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "randytqw"
        },
        "content": "// tag::Undo[]"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo edit steps : `undo`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "Goes back to the previous state of the image. +"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "Undoable commands: those commands that modify the image (`rotate`, `crop`, `resize`, `brightness`, `contrast` and `bw`)."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "carrein"
        },
        "content": "// tag::Tab[]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003d\u003d\u003d Cycle between tabs : `tab`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "carrein"
        },
        "content": "Cycle between available tabs in the side *Information Panel*."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "carrein"
        },
        "content": "The three available tabs are listed below:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "carrein"
        },
        "content": ". *Album Images*"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "carrein"
        },
        "content": "- Displays all images currently opened in the `assets` folder and available for editing."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "carrein"
        },
        "content": ". *EXIF Profile*"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "carrein"
        },
        "content": "- Displays all ancillary tags attached to the currently opened"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "carrein"
        },
        "content": "image such as metadata information like *Date and Time* and *Copyright information*."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "carrein"
        },
        "content": ". *Command History*"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "carrein"
        },
        "content": "- Display all *Image Transformation* and *Image Filters* applied to the currently opened image."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "carrein"
        },
        "content": "// end::Tab[]"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "randytqw"
        },
        "content": "// tag::UpcomingFeatures[]"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "randytqw"
        },
        "content": "\u003d\u003d Upcoming Features (in v2.0)"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "randytqw"
        },
        "content": "\u003d\u003d\u003d Layer"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "randytqw"
        },
        "content": "Format: `layer add (layer name)` -\u003e Creates a new layer for the user to work on."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "randytqw"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "randytqw"
        },
        "content": "* `layer add BW-layer` adds a new layer with name BW-layer."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "randytqw"
        },
        "content": "Format: `layer select (layer name)` -\u003e Selects the layer the user wants to work on."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "randytqw"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "randytqw"
        },
        "content": "* `layer select BW-layer` selects the BW-layer."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "randytqw"
        },
        "content": "Format: `layer delete (layer name)` -\u003e deletes the layer with input name."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "randytqw"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "randytqw"
        },
        "content": "* `layer delete (BW-layer)` -\u003e deletes the BW-layer"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "randytqw"
        },
        "content": "This command is not undo-able and transformations on each layer do not affect other layers."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "randytqw"
        },
        "content": "\u003d\u003d\u003d Ruler"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "randytqw"
        },
        "content": "Format: `ruler [ON|OFF]` -\u003e Toggles a ruler that surrounds the canvas. This will help you in estimating the number of pixels to move when using `layer position` or resizing objects."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "// tag::CommandSummary[]"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "Below is a quick summary of all the commands available in FomoFoto."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* *Black/White* `bw [THRESHOLD_VALUE]` +"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "e.g. `bw 127` +"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* *Brightness* `brightness [BRIGHTNESS_RATIO]` +"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "e.g. `brightness 0.8` +"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* *Contrast* `contrast [CONTRAST_RATIO]` +"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "e.g. `contrast 1.9` +"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* *Crop* `crop X_POINTCOORD Y_POINTCOORD W_WIDTH H_HEIGHT` +"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `crop 2 4 500 500`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "* *Exit* `exit` +"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "* *Export* `export FILENAME` +"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `export MyNewImage.jpg`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* `help` +"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "* *Import* `import FILEPATH` +"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "e.g. `import Users/Fomo/Pictures/sample.jpg` +"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "* *List Files* `listfiles` +"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "* *Open* `open FILENAME` +"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `open sample.jpg` +"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* *Redo* `redo` +"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "* *Rotate* `rotate ANGLE` +"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `rotate 270` +"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "* *Resize* `resize WIDTH HEIGHT` +"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `resize 100 200` +"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "* *Save* `save` or `save FILENAME` +"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `save MyNewImage.png` +"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* `undo` +"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "// end::CommandSummary[]"
      }
    ],
    "authorContributionMap": {
      "carrein": 12,
      "randytqw": 19,
      "-": 283,
      "thamsimun": 63
    }
  },
  {
    "path": "docs/team/randytqw.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "randytqw"
        },
        "content": "\u003d Tan Qun Wei Randy - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "randytqw"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "randytqw"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "randytqw"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "randytqw"
        },
        "content": "\u003d\u003d PROJECT: FomoFoto"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "randytqw"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "randytqw"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "randytqw"
        },
        "content": "My team and I were tasked with enhancing a basic command line addressbook for our Software Engineering project. We decided to morph the project into a image editor. +"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "randytqw"
        },
        "content": "FomoFoto is a robust yet simple image-editing tool. Users interact with the application through worded commands from their keyboard, and receive visual feedback from it through the displayed image on the application. +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "randytqw"
        },
        "content": "Unlike other heavy image editors, FomoFoto has a very gentle learning curve as it abstracts out clutter by providing the more essential features (complex editing can still be done with special commands). The features and implementations are well documented in guides for users and developers respectively."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "randytqw"
        },
        "content": "In addition, FomoFoto is well maintained with high reliability and code quality as it is covered by rigorous tests and checks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "randytqw"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "randytqw"
        },
        "content": "This section provides a summary of my coding, documentation and other contributions to FomoFoto, our team project."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "randytqw"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo transformations on an image*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "randytqw"
        },
        "content": "** What it does: allows the user to undo previous transformations one at a time. Preceding undone transformations can be reversed by using the redo command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "randytqw"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes by applying incorrect transformations and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "randytqw"
        },
        "content": "** Highlights: Transformation history is stored as a list of commands so it takes up minimal space on the user\u0027s PC."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "randytqw"
        },
        "content": "* *Code contributed*: [https://github.com/CS2103-AY1819S2-W14-2/main/commits?author\u003drandytqw[List of commits]]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "randytqw"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "randytqw"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "randytqw"
        },
        "content": "*** Managed release `v1.3` (1 release) on GitHub"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "randytqw"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "randytqw"
        },
        "content": "*** Wrote detailed documentation on undo/redo command in developer guide https://github.com/CS2103-AY1819S2-W14-2/main/pull/138[#138]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "randytqw"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "randytqw"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/CS2103-AY1819S2-W14-2/main/pull/141[#141]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "randytqw"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "randytqw"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "randytqw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "randytqw"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "randytqw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "randytqw"
        },
        "content": "include::../UserGuide.adoc[tag\u003dUndo]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "randytqw"
        },
        "content": "include::../UserGuide.adoc[tag\u003dRedo]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "randytqw"
        },
        "content": "include::../UserGuide.adoc[tag\u003dUpcomingFeatures]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "randytqw"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "randytqw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "randytqw"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "randytqw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "randytqw"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "randytqw"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      }
    ],
    "authorContributionMap": {
      "randytqw": 68
    }
  },
  {
    "path": "docs/team/thamsimun.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d Tham Si Mun - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d\u003d PROJECT: FomoFoto"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "My team and I were tasked with enhancing a basic command line addressbook for our Software Engineering project. We decided to morph the project into a image editor. +"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "FomoFoto is a robust yet simple image-editing tool. Users interact with the application through worded commands from their keyboard, and receive visual feedback from it through the displayed image on the application. +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Unlike other heavy image editors, FomoFoto has a very gentle learning curve as it abstracts out clutter by providing the more essential features (complex editing can still be done with special commands). The features and implementations are well documented in guides for users and developers respectively."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "In addition, FomoFoto is well maintained with high reliability and code quality as it is covered by rigorous tests and checks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "This section provides a summary of my coding, documentation and other contributions to FomoFoto, our team project."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* *Major enhancement*: added *the ability to apply filters on images*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "** What it does: It parses the arguments specified by user, validate the filter commands and apply the filter on a targetted image. Users can key in commands such as `contrast`, `brightness` and `bw` to apply the filters."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "** Justification: This feature improves the product significantly because applying filters on images is one of the main feature of our image-editing product, FomoFoto. Users might need to adjust the brightness and contrast of an image as the image they have might be under-exposed and is not well contrasted. The black and white filter is useful for users who like vintage images."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation was challenging as it required changes to existing commands. Furthermore, it required the gradle script to declare a compile-time dependency on an external API that provides images editing tools.footnote:[Gradle is an open-source build automation tool that is designed to be flexible enough to build almost any type of software.]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "** Credits: _{The processing of images is facilitated by an external API https://github.com/sksamuel/scrimage[`scrimage`]}_"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* *Code contributed*: [https://github.com/CS2103-AY1819S2-W14-2/main/commits?author\u003dthamsimun[List of commits]]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "*** Managed release `v1.3` (1 release) on GitHub"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "*** Wrote skeleton for the User Guide: https://github.com/CS2103-AY1819S2-W14-2/main/issues/132[#132]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/CS2103-AY1819S2-W14-2/main/pull/98[#98], https://github.com/CS2103-AY1819S2-W14-2/main/pull/52[#52], https://github.com/CS2103-AY1819S2-W14-2/main/pull/46[#46]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "*** Reported bugs and provided solutions to team: https://github.com/CS2103-AY1819S2-W14-2/main/issues/99[#99], https://github.com/CS2103-AY1819S2-W14-2/main/issues/133[#133]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "*** Integrated a third party library (https://github.com/sksamuel/scrimage[`scrimage`]) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "include::../UserGuide.adoc[tag\u003dBlackWhiteCommand]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "include::../UserGuide.adoc[tag\u003dContrastCommand]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "include::../UserGuide.adoc[tag\u003dBrightnessCommand]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "include::../UserGuide.adoc[tag\u003dCommandSummary]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dLogicComponentSequenceDiagrams]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dStorageComponent]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dImageFilter]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      }
    ],
    "authorContributionMap": {
      "thamsimun": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.Album;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEditManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    protected CurrentEdit currentEdit;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "carrein"
        },
        "content": "    protected Album album;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        currentEdit \u003d new CurrentEditManager();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "carrein"
        },
        "content": "        logic \u003d new LogicManager(model, storage, currentEdit);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "carrein"
        },
        "content": "        album \u003d Album.getInstance();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "carrein"
        },
        "content": "        album.populateAlbum();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 6,
      "-": 182,
      "thamsimun": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/Notifier.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "/* @@author Carrein */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.beans.PropertyChangeListener;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.beans.PropertyChangeSupport;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": " * Basic listener class used to convey updates to UI elements."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class Notifier {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private static PropertyChangeSupport support \u003d new PropertyChangeSupport(Notifier.class);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static void addPropertyChangeListener(PropertyChangeListener l) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "        support.addPropertyChangeListener(l);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static void removePropertyChangeListener(PropertyChangeListener l) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "        support.removePropertyChangeListener(l);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static void firePropertyChangeListener(String propertyName, Object oldValue, Object newValue) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "        support.firePropertyChange(propertyName, oldValue, newValue);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/ResourceWalker.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static seedu.address.commons.core.Config.ASSETS_FOLDER_TEMP_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.net.URI;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.net.URISyntaxException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.nio.file.FileSystems;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.nio.file.FileVisitResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.nio.file.SimpleFileVisitor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.nio.file.attribute.BasicFileAttributes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.apache.commons.io.IOUtils;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.Album;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": " * ResourceWalker is a helper class to read external resources into a runtime JAR project."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": " * In FomoFoto, this class is only called once to import VALID images into the assets folder during runtime."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": " * ResourceWalker DOES NOT CHECK FOR INVALID FILE - DO NOT PLACE NON-IMAGE FILE INTO resources/imageTest/valid."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class ResourceWalker {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private static final Album album \u003d Album.getInstance();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Given a path to a directory copy its content to a temp folder by"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * traversing all entries in the directory and performing generateTemp()."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @throws URISyntaxException File path is invalid."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @throws IOException        I/O operations cannot be performed on file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static void walk(String args) throws URISyntaxException, IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrein"
        },
        "content": "        URI uri \u003d ResourceWalker.class.getResource(args).toURI();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrein"
        },
        "content": "        if (uri.getScheme().equals(\"jar\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": "            FileSystems.newFileSystem(uri, Collections.emptyMap());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Path myPath \u003d Paths.get(uri);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Files.walkFileTree(myPath, new SimpleFileVisitor\u003c\u003e() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrein"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrein"
        },
        "content": "            public FileVisitResult visitFile(Path path, BasicFileAttributes attrs) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrein"
        },
        "content": "                generateTemp(path);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "carrein"
        },
        "content": "                return FileVisitResult.CONTINUE;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrein"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "carrein"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Given a ZipPath convert into a temp file."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @param path Path to be converted."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @return Converted File."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private static File generateTemp(Path path) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "carrein"
        },
        "content": "        File tempFile \u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "carrein"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "carrein"
        },
        "content": "            InputStream in \u003d Files.newInputStream(path);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "carrein"
        },
        "content": "            String tDir \u003d System.getProperty(\"java.io.tmpdir\") + ASSETS_FOLDER_TEMP_NAME;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "carrein"
        },
        "content": "            tempFile \u003d new File(tDir + File.separator + path.getFileName());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "carrein"
        },
        "content": "            try (FileOutputStream out \u003d new FileOutputStream(tempFile)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "carrein"
        },
        "content": "                IOUtils.copy(in, out);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "carrein"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "carrein"
        },
        "content": "            album.addToImageList(tempFile.getAbsolutePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "carrein"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "carrein"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return tempFile;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static final String ASSETS_FOLDER_TEMP_NAME \u003d \"fomofoto.assets\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static final String SAMPLE_FOLDER \u003d \"/imageTest/valid\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static final int MAX_FILE_SIZE \u003d 10000000;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 3,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static final String MESSAGE_INVALID_PATH \u003d \"Invalid file path given.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static final String MESSAGE_UNABLE_TO_READ_FILE \u003d \"Unable to read file.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static final String MESSAGE_INVALID_FORMAT \u003d \"File is not a valid type or is hidden.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static final String MESSAGE_INVALID_SIZE \u003d \"File is too large to be opened.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FILE \u003d \"Duplicate file name exists in assets folder. \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itszp"
        },
        "content": "            + \"Try using another name.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public static final String MESSAGE_FILE_NOT_FOUND \u003d \"File does not exist. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "            + \"Use listfiles to view existing files.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public static final String MESSAGE_ROTATE_SUCCESS \u003d \"Rotated successfully.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public static final String MESSAGE_CONTRAST_SUCCESS \u003d \"Contrast filter applied successfully.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public static final String MESSAGE_BRIGHTNESS_SUCCESS \u003d \"Brightness filter applied successfully.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public static final String MESSAGE_BLACKWHITE_SUCCESS \u003d \"Black/White filter applied successfully.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public static final String MESSAGE_CONTRAST_DOUBLE_ERROR \u003d \"Value keyed in is not double. E.g: contrast 1.3\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public static final String MESSAGE_BRIGHTNESS_DOUBLE_ERROR \u003d \"Value keyed in is not double. E.g: brightness 1.3\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public static final String MESSAGE_BLACKWHITE_INT_ERROR \u003d \"Value keyed in is not integer. E.g: bw 123\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public static final String MESSAGE_NEGATIVE_ERROR \u003d \"Value keyed in is not positive.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public static final String MESSAGE_ROTATE_DEGREE_ERROR \u003d \"Value keyed in is not a valid integer or rotating degree.\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            + \" \\n%1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public static final String MESSAGE_CROP_INT_ERROR \u003d \"Values keyed in are not all integers. \\n%1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public static final String MESSAGE_CROP_SUCCESS \u003d \"Cropped successfully.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public static final String MESSAGE_DID_NOT_OPEN \u003d \"Did not open any image to edit on.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public static final String MESSAGE_UNABLE_TO_SAVE \u003d \"Unable to save. Please open an image before saving.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public static final String MESSAGE_RESIZE_SUCCESS \u003d \"Resized successfully.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public static final String MESSAGE_RESIZE_VALUE_ERROR \u003d \"Values keyed in are not positive integers. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            + \"\\n%1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public static final String MESSAGE_EXPORT_SUCCESS \u003d \"Image successfully exported.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public static final String MESSAGE_SAVEPRESET_SUCCESS \u003d \"Preset is successfully saved:\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public static final String MESSAGE_SAVEPRESET_FAIL_DUPLICATE \u003d \"Duplicate preset name is found.\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        + \" Please use another preset name.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public static final String MESSAGE_SAVEPRESET_FAIL_EMPTY \u003d \"List of command in this preset is empty.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public static final String MESSAGE_SETPRESET_FAIL_NOTFOUND \u003d \"Preset is not found.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public static final String MESSAGE_SETPRESET_SUCCESS \u003d \"Preset is successfully applied.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public static final String MESSAGE_INVALID_SAVE_TYPE \u003d \"Invalid save file type.\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itszp"
        },
        "content": "            + \"\\nNames must end with either of the following: %1$s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public static final String MESSAGE_INVALID_SAVE_NAME \u003d \"Unable to save. Save file name cannot be empty.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static final String MESSAGE_CLEAR_SUCCESS \u003d \"Album has been cleared!\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public static final String MESSAGE_WATERMARK_SUCCESS \u003d \"Watermark created.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public static final String MESSAGE_HAS_WATERMARK \u003d \"A watermark has been added to this image already.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itszp": 7,
      "kayheen": 13,
      "carrein": 6,
      "randytqw": 1,
      "-": 12,
      "thamsimun": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private final CurrentEdit currentEdit;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean addressBookModified;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public LogicManager(Model model, Storage storage, CurrentEdit currentEdit) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        this.currentEdit \u003d currentEdit;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set addressBookModified to true whenever the models\u0027 address book is modified."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        model.getAddressBook().addListener(observable -\u003e addressBookModified \u003d true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookModified \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "carrein"
        },
        "content": "            commandResult \u003d command.execute(currentEdit, model, history);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (addressBookModified) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Address book modified, saving to file.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.selectedPersonProperty();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setSelectedPerson(person);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 2,
      "-": 106,
      "thamsimun": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/BlackWhiteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author thamsimun */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import java.util.OptionalInt;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import com.sksamuel.scrimage.BufferedOpFilter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import com.sksamuel.scrimage.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import com.sksamuel.scrimage.filter.ThresholdFilter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " * This command allows users to apply the black/white filter on the image."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "public class BlackWhiteCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"bw\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        + \": Apply the black and white filter on the image with threshold given.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        + \"If threshold is not given, default threshold value is 127.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        + \"Parameters: [THRESHOLD VALUE (int)] \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        + \"Example2: \" + COMMAND_WORD + \"130\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private OptionalInt threshold;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private boolean isNewCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * Creates a ContrastCommand object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * @param threshold pixels lighter than this threshold becomes white and pixels darker than it becomes black."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public BlackWhiteCommand(OptionalInt threshold) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        setCommandName(COMMAND_WORD);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (threshold.isPresent()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            setArguments(String.valueOf(threshold.getAsInt()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        this.threshold \u003d threshold;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        this.isNewCommand \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public CommandResult execute(CurrentEdit currentEdit, Model model, CommandHistory history)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        seedu.address.model.image.Image initialImage \u003d currentEdit.getTempImage();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (initialImage \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_DID_NOT_OPEN);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (threshold.isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            BufferedOpFilter bwFilter \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                new ThresholdFilter(threshold.getAsInt(), 0xffffff, 0x000000);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            Image outputImage \u003d Image.fromFile(new File(initialImage.getUrl())).filter(bwFilter);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            currentEdit.updateTempImage(outputImage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            BufferedOpFilter bwFilter \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                new ThresholdFilter(127, 0xffffff, 0x000000);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            Image outputImage \u003d Image.fromFile(new File(initialImage.getUrl())).filter(bwFilter);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            currentEdit.updateTempImage(outputImage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (this.isNewCommand) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            this.isNewCommand \u003d false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            currentEdit.addCommand(this);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            currentEdit.displayTempImage();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        return new CommandResult(Messages.MESSAGE_BLACKWHITE_SUCCESS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (threshold.isPresent()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            return \"bw \" + threshold.getAsInt();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        return \"bw\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author*/"
      }
    ],
    "authorContributionMap": {
      "thamsimun": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/BrightnessCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author thamsimun */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import java.util.OptionalDouble;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import com.sksamuel.scrimage.BufferedOpFilter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import com.sksamuel.scrimage.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import com.sksamuel.scrimage.filter.BrightnessFilter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " * This command allows users to adjust the brightness of images."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "public class BrightnessCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"brightness\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            + \": Adjust the brightness of the image according to ratio value given.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            + \"If ratio is not given, default brightness ratio will be 1.1\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            + \"Parameters: [BRIGHTNESS RATIO (double)] \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            + \"Example2: \" + COMMAND_WORD + \"0.9\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private OptionalDouble brightnessValue;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private boolean isNewCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * Creates a ContrastCommand object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * @param brightnessValue brightness value to add on image"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public BrightnessCommand(OptionalDouble brightnessValue) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        setCommandName(COMMAND_WORD);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (brightnessValue.isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            setArguments(String.valueOf(brightnessValue.getAsDouble()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        this.brightnessValue \u003d brightnessValue;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        this.isNewCommand \u003d true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public CommandResult execute(CurrentEdit currentEdit, Model model, CommandHistory history)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        seedu.address.model.image.Image initialImage \u003d currentEdit.getTempImage();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (initialImage \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_DID_NOT_OPEN);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (this.brightnessValue.isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            BufferedOpFilter brightnessFilter \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    new BrightnessFilter(this.brightnessValue.getAsDouble());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            Image outputImage \u003d Image.fromFile(new File(initialImage.getUrl())).filter(brightnessFilter);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            currentEdit.updateTempImage(outputImage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            BufferedOpFilter brightnessFilter \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    new BrightnessFilter(1.1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            Image outputImage \u003d Image.fromFile(new File(initialImage.getUrl())).filter(brightnessFilter);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            currentEdit.updateTempImage(outputImage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (this.isNewCommand) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            this.isNewCommand \u003d false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            currentEdit.addCommand(this);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            currentEdit.displayTempImage();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        return new CommandResult(Messages.MESSAGE_BRIGHTNESS_SUCCESS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (brightnessValue.isPresent()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            return \"brightness \" + brightnessValue.getAsDouble();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        return \"brightness\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author */"
      }
    ],
    "authorContributionMap": {
      "thamsimun": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CLEAR_SUCCESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.Album;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final Album album \u003d Album.getInstance();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public CommandResult execute(CurrentEdit currentEdit, Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "        album.clearAlbum();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "        album.refreshAlbum();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return new CommandResult(MESSAGE_CLEAR_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 7,
      "-": 18,
      "thamsimun": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private String commandName \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private String arguments \u003d \"None\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public abstract CommandResult execute(CurrentEdit currentEdit,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                                          Model model, CommandHistory history) throws CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void setArguments(String arguments) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "        this.arguments \u003d arguments;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void setCommandName(String commandName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "        this.commandName \u003d commandName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public String getCommandName() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return commandName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public String getArguments() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return arguments;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 18,
      "-": 20,
      "thamsimun": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ContrastCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author thamsimun */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import java.util.OptionalDouble;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import com.sksamuel.scrimage.BufferedOpFilter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import com.sksamuel.scrimage.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import com.sksamuel.scrimage.filter.ContrastFilter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " * This command allows users to adjust the contrast of images."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "public class ContrastCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"contrast\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            + \": Adjust the contrast of the image according to ratio value given.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            + \"If ratio is not given, default contrast ratio will be 1.1\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            + \"Parameters: [CONTRAST RATIO (double)] \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            + \"Example2: \" + COMMAND_WORD + \"1.3\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private OptionalDouble contrastValue;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private boolean isNewCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * Creates a ContrastCommand object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * @param contrastValue contrast value to put on image"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public ContrastCommand(OptionalDouble contrastValue) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        setCommandName(COMMAND_WORD);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (contrastValue.isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            setArguments(String.valueOf(contrastValue.getAsDouble()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        this.contrastValue \u003d contrastValue;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        this.isNewCommand \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public CommandResult execute(CurrentEdit currentEdit, Model model, CommandHistory history)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        seedu.address.model.image.Image initialImage \u003d currentEdit.getTempImage();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (initialImage \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_DID_NOT_OPEN);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (this.contrastValue.isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            BufferedOpFilter contrastFilter \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    new ContrastFilter(this.contrastValue.getAsDouble());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            Image outputImage \u003d Image.fromFile(new File(initialImage.getUrl())).filter(contrastFilter);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            currentEdit.updateTempImage(outputImage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            BufferedOpFilter contrastFilter \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    new ContrastFilter(1.1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            Image outputImage \u003d Image.fromFile(new File(initialImage.getUrl())).filter(contrastFilter);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            currentEdit.updateTempImage(outputImage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (this.isNewCommand) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            this.isNewCommand \u003d false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            currentEdit.addCommand(this);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            currentEdit.displayTempImage();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        return new CommandResult(Messages.MESSAGE_CONTRAST_SUCCESS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (contrastValue.isPresent()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            return \"contrast \" + contrastValue.getAsDouble();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        return \"contrast\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author */"
      }
    ],
    "authorContributionMap": {
      "thamsimun": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CropCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kayheen"
        },
        "content": "/* @@author kayheen */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kayheen"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import java.awt.image.BufferedImage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import org.imgscalr.Scalr;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.model.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kayheen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kayheen"
        },
        "content": " * This command allows the user to crop an image."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kayheen"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kayheen"
        },
        "content": "public class CropCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"crop\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            + \": Crop the image according to the coordinates given. All values to be integer/whole numbers only.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            + \"Parameters: X-COORDINATE Y-COORDINATE WIDTH HEIGHT \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 0 0 200 200\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private int xCoord;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private int yCoord;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private int width;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private int height;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private boolean isNewCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public CropCommand(int x, int y, int width, int height) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        setCommandName(COMMAND_WORD);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        String argument \u003d x + \" : \" + y + \" : \" + width + \" : \" + height;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        setArguments(argument);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        xCoord \u003d x;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        yCoord \u003d y;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        this.width \u003d width;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        this.isNewCommand \u003d true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public CommandResult execute(CurrentEdit currentEdit,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                                 Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        Image initialImage \u003d currentEdit.getTempImage();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        if (initialImage \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_DID_NOT_OPEN);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            BufferedImage initImage \u003d initialImage.getBufferedImage();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            BufferedImage finalImage \u003d Scalr.crop(initImage, xCoord, yCoord, width, height);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            currentEdit.updateTempImage(finalImage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            throw new CommandException(\"Invalid crop bounds, bounds for the inputs as follows:\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                    + \"0 \u003c\u003d x-coordinate \u003c\u003d \" + initialImage.getWidth()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                    + \", 0 \u003c\u003d y-coordinate \u003c\u003d \" + initialImage.getHeight() + \",\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                    + \"0 \u003c\u003d x + width \u003c\u003d \" + initialImage.getWidth()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                    + \", 0 \u003c\u003d y + height \u003c\u003d \" + initialImage.getHeight());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        if (this.isNewCommand) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            this.isNewCommand \u003d false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            currentEdit.addCommand(this);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            currentEdit.displayTempImage();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        return new CommandResult(Messages.MESSAGE_CROP_SUCCESS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                || (other instanceof CropCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                \u0026\u0026 isValuesEqual(other));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private boolean isValuesEqual(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        CropCommand temp \u003d (CropCommand) other;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        return this.xCoord \u003d\u003d temp.xCoord \u0026\u0026 this.yCoord \u003d\u003d temp.yCoord \u0026\u0026 this.width \u003d\u003d temp.width"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                \u0026\u0026 this.height \u003d\u003d temp.height;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        return \"crop \" + xCoord + \" \" + yCoord + \" \" + width + \" \" + height;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kayheen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kayheen": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public CommandResult execute(CurrentEdit currentEdit, Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "        currentEdit.clearTemp();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 2,
      "-": 18,
      "thamsimun": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "randytqw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import static org.apache.commons.io.FileUtils.copyFile;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import static org.apache.commons.io.FileUtils.copyFileToDirectory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "randytqw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "randytqw"
        },
        "content": " * Allows the user to export the current image to his own PC"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "randytqw"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "randytqw"
        },
        "content": "public class ExportCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"Export\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        + \"Exports the current image to a specified directory in user PC.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        + \"Parameters: [absolute path of file] \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" C:/Users/Fomo/Pictures/sample.jpg\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    private File toExport;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    private File path;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    private boolean isDirectory;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public ExportCommand(String path, boolean isDirectory) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        this.path \u003d new File(path);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        this.isDirectory \u003d isDirectory;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public CommandResult execute(CurrentEdit currentEdit, Model model, CommandHistory commandHistory)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        if (currentEdit.tempImageExist()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_DID_NOT_OPEN);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        if (isDirectory) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "randytqw"
        },
        "content": "                toExport \u003d new File(currentEdit.getTempImage().getUrl());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "randytqw"
        },
        "content": "                copyFileToDirectory(toExport, path, false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "randytqw"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PATH);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            toExport \u003d new File(currentEdit.getTempImage().getUrl());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            copyFile(toExport, path);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        return new CommandResult(Messages.MESSAGE_EXPORT_SUCCESS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "randytqw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "randytqw": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public CommandResult execute(CurrentEdit currentEdit, Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 1,
      "-": 42,
      "thamsimun": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public CommandResult execute(CurrentEdit currentEdit, Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 1,
      "-": 21,
      "thamsimun": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ImportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "/* @@author Carrein */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.Album;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": " * Imports a image to FomoFoto."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class ImportCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"import\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "            + \": Imports the image specified to the assets directory. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "            + \"Parameters: \u003cabsolute path of file\u003e\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" C:/Users/Fomo/Pictures/sample.jpg\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Image successfully imported.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static final String MESSAGE_DIR_SUCCESS \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "            \"Directory successfully imported (Note: Invalid file types, hidden files and duplicates are skipped).\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final Album album \u003d Album.getInstance();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private boolean isDirectory;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Creates an ImportCommand to add the specified {@code Image}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public ImportCommand(boolean isDirectory) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "        requireNonNull(isDirectory);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": "        this.isDirectory \u003d isDirectory;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public CommandResult execute(CurrentEdit currentEdit, Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrein"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrein"
        },
        "content": "        album.refreshAlbum();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String returnString \u003d isDirectory ? MESSAGE_DIR_SUCCESS : MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return new CommandResult(returnString);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "carrein"
        },
        "content": "                || (other instanceof ImportCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u0026\u0026 isDirectory \u003d\u003d (((ImportCommand) other).isDirectory)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListFilesCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itszp"
        },
        "content": "/* @@author itszp */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itszp"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itszp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itszp"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.model.Album;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itszp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itszp"
        },
        "content": " * Lists all files inside assets folder."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itszp"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itszp"
        },
        "content": "public class ListFilesCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listfiles\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public static final String MESSAGE_LIST_FILES_HEADER \u003d \"Files in assets folder: %1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all files in assets folder.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public static final String MESSAGE_ASSETS_EMPTY \u003d \"No files in assets folder. Use import to add files.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itszp"
        },
        "content": "    private Album album \u003d Album.getInstance();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itszp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public CommandResult execute(CurrentEdit currentEdit, Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itszp"
        },
        "content": "        requireNonNull(currentEdit);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itszp"
        },
        "content": "        String[] fileNames \u003d album.getFileNames();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itszp"
        },
        "content": "        if (fileNames.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itszp"
        },
        "content": "            return new CommandResult(MESSAGE_ASSETS_EMPTY);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itszp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itszp"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_LIST_FILES_HEADER, Arrays.toString(fileNames)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itszp"
        },
        "content": "                + \"\\n\" + MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itszp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itszp": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/OpenCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itszp"
        },
        "content": "/* @@author itszp */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itszp"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itszp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itszp"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_FILE_NOT_FOUND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.model.Album;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.model.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itszp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itszp"
        },
        "content": " * Opens a previously imported image for editing."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itszp"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itszp"
        },
        "content": "public class OpenCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"open\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itszp"
        },
        "content": "            + \": Opens previously imported image. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itszp"
        },
        "content": "            + \"Parameters: FILENAME\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itszp"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" paris.jpg\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Image successfully opened.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itszp"
        },
        "content": "    private Album album \u003d Album.getInstance();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itszp"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * Creates an OpenCommand to add the specified {@code args}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itszp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public OpenCommand(String args) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itszp"
        },
        "content": "        this.fileName \u003d args;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itszp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public CommandResult execute(CurrentEdit currentEdit, Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itszp"
        },
        "content": "        requireNonNull(currentEdit);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itszp"
        },
        "content": "        Image toOpen;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itszp"
        },
        "content": "        if (album.checkFileExist(fileName)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itszp"
        },
        "content": "            toOpen \u003d album.retrieveImage(fileName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itszp"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itszp"
        },
        "content": "            throw new CommandException(MESSAGE_FILE_NOT_FOUND);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itszp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itszp"
        },
        "content": "        currentEdit.openImage(toOpen);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itszp"
        },
        "content": "        currentEdit.updateExif();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itszp"
        },
        "content": "        currentEdit.displayTempImage();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itszp"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toOpen));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itszp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itszp": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.model.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public CommandResult execute(CurrentEdit currentEdit, Album album,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                                 Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.canRedoAddressBook()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        model.redoAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public CommandResult execute(CurrentEdit currentEdit,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "randytqw"
        },
        "content": "                                 Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        requireNonNull(currentEdit);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        Image initialImage \u003d currentEdit.getTempImage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        if (initialImage \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_DID_NOT_OPEN);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        if (!currentEdit.canRedoTemp()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        Command command \u003d currentEdit.getCommandTemp();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "carrein"
        },
        "content": "        command.execute(currentEdit, model, history);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        currentEdit.setRedoTemp();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "carrein"
        },
        "content": "        currentEdit.updateHistory();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        currentEdit.displayTempImage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 3,
      "randytqw": 26,
      "-": 29,
      "thamsimun": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ResizeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kayheen"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import java.awt.image.BufferedImage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import org.imgscalr.Scalr;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.model.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kayheen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kayheen"
        },
        "content": " * This command allows users to resize images to desired size."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kayheen"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kayheen"
        },
        "content": "public class ResizeCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"resize\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            + \": Resize the image according to the width and height specified.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            + \"Parameters: WIDTH HEIGHT (only positive integers are allowed)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 20 40 \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private int width;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private int height;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private boolean isNewCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * Creates a Resize Command object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * @param w is the width of the new image."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * @param h is the height of the new image."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public ResizeCommand(int w, int h) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": "        setCommandName(COMMAND_WORD);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String argument \u003d w + \" : \" + h;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "        setArguments(argument);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        width \u003d w;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        height \u003d h;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        this.isNewCommand \u003d true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public CommandResult execute(CurrentEdit currentEdit,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                                 Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        Image initialImage \u003d currentEdit.getTempImage();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        if (initialImage \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_DID_NOT_OPEN);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            BufferedImage bufferedImage \u003d initialImage.getBufferedImage();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            BufferedImage editedBuffer \u003d Scalr.resize(bufferedImage, Scalr.Method.QUALITY,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                    Scalr.Mode.FIT_EXACT, width, height);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            // need to give a sneak peak before you actually write into the file."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            currentEdit.updateTempImage(editedBuffer);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        } catch (IllegalArgumentException x) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            throw new CommandException(MESSAGE_USAGE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        if (this.isNewCommand) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            this.isNewCommand \u003d false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            currentEdit.addCommand(this);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            currentEdit.displayTempImage();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        return new CommandResult(Messages.MESSAGE_RESIZE_SUCCESS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                || (other instanceof ResizeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                \u0026\u0026 isValuesEqual(other));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private boolean isValuesEqual(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        ResizeCommand temp \u003d (ResizeCommand) other;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        return this.width \u003d\u003d temp.width \u0026\u0026 this.height \u003d\u003d temp.height;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        return \"resize \" + width + \" \" + height;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kayheen"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kayheen": 74,
      "carrein": 4,
      "thamsimun": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RotateCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kayheen"
        },
        "content": "/* @@author kayheen */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kayheen"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import java.awt.image.BufferedImage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import org.imgscalr.Scalr;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.model.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kayheen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kayheen"
        },
        "content": " * This command allows users to rotate images."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kayheen"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kayheen"
        },
        "content": "public class RotateCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"rotate\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            + \": Rotate the image according to the degree of input.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            + \"Parameters: DEGREE (only 90, 180 and 270 are accepted.) \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 90\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private int degree;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private Scalr.Rotation rotate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private boolean isNewCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * Creates a RotateCommand object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * @param value is the degree of rotation."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public RotateCommand(int value) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        setCommandName(COMMAND_WORD);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        setArguments(String.valueOf(value));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        this.isNewCommand \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        this.degree \u003d value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public CommandResult execute(CurrentEdit currentEdit,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                                 Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        Image initialImage \u003d currentEdit.getTempImage();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        if (initialImage \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_DID_NOT_OPEN);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        if (degree \u003d\u003d 90) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            rotate \u003d Scalr.Rotation.CW_90;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        } else if (degree \u003d\u003d 180) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            rotate \u003d Scalr.Rotation.CW_180;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        } else if (degree \u003d\u003d 270) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            rotate \u003d Scalr.Rotation.CW_270;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_ROTATE_DEGREE_ERROR,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                    RotateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        BufferedImage bufferedImage \u003d initialImage.getBufferedImage();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        BufferedImage editedBuffer \u003d Scalr.rotate(bufferedImage, rotate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        currentEdit.updateTempImage(editedBuffer);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        if (this.isNewCommand) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            this.isNewCommand \u003d false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            currentEdit.addCommand(this);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            currentEdit.displayTempImage();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        return new CommandResult(Messages.MESSAGE_ROTATE_SUCCESS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                || (other instanceof RotateCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                \u0026\u0026 (this.degree \u003d\u003d ((RotateCommand) other).degree));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        return \"rotate \" + degree;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kayheen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kayheen": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SaveCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itszp"
        },
        "content": "/* @@author itszp */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itszp"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itszp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itszp"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_FILE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itszp"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNABLE_TO_SAVE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.model.Album;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.model.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itszp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itszp"
        },
        "content": " * Saves edited image into assets folder"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itszp"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itszp"
        },
        "content": "public class SaveCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"save\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Image saved as: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itszp"
        },
        "content": "    private String toName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itszp"
        },
        "content": "    private Album album \u003d Album.getInstance();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * Creates an SaveCommand to add the specified {@code name}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itszp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public SaveCommand(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itszp"
        },
        "content": "        this.toName \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itszp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public CommandResult execute(CurrentEdit currentEdit, Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itszp"
        },
        "content": "        requireNonNull(currentEdit);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itszp"
        },
        "content": "        if (currentEdit.tempImageExist()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itszp"
        },
        "content": "            throw new CommandException(MESSAGE_UNABLE_TO_SAVE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itszp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itszp"
        },
        "content": "        Image image \u003d currentEdit.getTempImage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itszp"
        },
        "content": "        if (toName.isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itszp"
        },
        "content": "            this.toName \u003d currentEdit.getOriginalImageName();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itszp"
        },
        "content": "        } else if (album.checkFileExist(toName)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itszp"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FILE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itszp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itszp"
        },
        "content": "        album.saveToAssets(image, toName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itszp"
        },
        "content": "        currentEdit.overwriteOriginal(toName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itszp"
        },
        "content": "        currentEdit.deleteHistory();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itszp"
        },
        "content": "        album.populateAlbum();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itszp"
        },
        "content": "        album.refreshAlbum();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itszp"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toName));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itszp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itszp": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SavePresetCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author thamsimun */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.TransformationSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " * This command allows users to save a preset of commands."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "public class SavePresetCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"savepreset\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        + \": Saves a preset list of image editing commands used on your currently editing image.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        + \"Name of the preset list should not contain any spaces.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" preset1\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private String presetName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * Creates a SavePresetCommand object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * @param presetName name given to the preset set by user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public SavePresetCommand(String presetName) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        this.presetName \u003d presetName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public CommandResult execute(CurrentEdit currentEdit, Model model, CommandHistory history)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        List\u003cCommand\u003e presetList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        Image initialImage \u003d currentEdit.getTempImage();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (initialImage \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_DID_NOT_OPEN);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        List\u003cCommand\u003e commandList \u003d currentEdit.getTempSubHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        for (Command command: commandList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            if (!(command instanceof SetPresetCommand)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                presetList.add(command);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        System.out.print(presetList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (presetList.size() \u003c 1) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_SAVEPRESET_FAIL_EMPTY);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        TransformationSet transformationSet \u003d TransformationSet.getInstance();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        boolean duplicate \u003d transformationSet.isPresent(presetName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (duplicate) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_SAVEPRESET_FAIL_DUPLICATE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        transformationSet.addTransformation(presetName, presetList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        StringBuilder toPrint \u003d new StringBuilder();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        for (Command command: presetList) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            toPrint.append(\"[\" + command.toString() + \"]\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        return new CommandResult(Messages.MESSAGE_SAVEPRESET_SUCCESS + \" \" + toPrint.toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author */"
      }
    ],
    "authorContributionMap": {
      "thamsimun": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SetPresetCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author thamsimun */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.TransformationSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " * This command allows users to use a preset of commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "public class SetPresetCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"setpreset\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        + \": Use a preset list of image editing commands on your image with the given preset name.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \"preset1\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private String presetName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private boolean isNewCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * Creates a PresetCommand object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * @param presetName name given to the preset set by user"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public SetPresetCommand(String presetName) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        this.presetName \u003d presetName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        this.isNewCommand \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public CommandResult execute(CurrentEdit currentEdit, Model model, CommandHistory history)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        Image initialImage \u003d currentEdit.getTempImage();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (initialImage \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_DID_NOT_OPEN);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        TransformationSet transformationSet \u003d TransformationSet.getInstance();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        boolean isPresent \u003d transformationSet.isPresent(presetName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (!isPresent) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_SETPRESET_FAIL_NOTFOUND);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        List\u003cCommand\u003e presetList \u003d transformationSet.findTransformation(presetName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        System.out.print(presetList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        for (Command command: presetList) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                command.execute(currentEdit, model, history);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            } catch (CommandException exception) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                throw new CommandException(\"Error in [\" + command.toString() + \"\\n\" + exception.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (this.isNewCommand) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            this.isNewCommand \u003d false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            currentEdit.addCommand(this);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            currentEdit.displayTempImage();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        return new CommandResult(Messages.MESSAGE_SETPRESET_SUCCESS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author*/"
      }
    ],
    "authorContributionMap": {
      "thamsimun": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/TabCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "/* @@author Carrein */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.Album;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": " * Switches between tabs in the informationPanel."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class TabCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"tab\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": "            + \": Switches between tabs in the information panel.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static final String MESSAGE_TAB_SUCCESS \u003d \"Tab switched.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final Album album \u003d Album.getInstance();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public CommandResult execute(CurrentEdit currentEdit, Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "        album.switchTab();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return new CommandResult(MESSAGE_TAB_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.model.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previous state."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public CommandResult execute(CurrentEdit current, Model model, CommandHistory history)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        requireNonNull(current);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        Image initialImage \u003d current.getTempImage();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        if (initialImage \u003d\u003d null) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_DID_NOT_OPEN);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        if (!current.canUndoTemp()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        current.setUndoTemp();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        current.replaceTempWithOriginal();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrein"
        },
        "content": "        current.updateHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        List\u003cCommand\u003e tempHistory \u003d current.getTempSubHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        for (Command command :tempHistory) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            command.execute(current, model, history);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        current.displayTempImage();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 2,
      "randytqw": 23,
      "-": 25,
      "thamsimun": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/WaterMarkCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kayheen"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import java.awt.AlphaComposite;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import java.awt.Color;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import java.awt.Font;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import java.awt.FontMetrics;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import java.awt.Graphics2D;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import java.awt.geom.Rectangle2D;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import java.awt.image.BufferedImage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.model.image.Image;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kayheen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kayheen"
        },
        "content": " * This command allows users to add a watermark to an image."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kayheen"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kayheen"
        },
        "content": "public class WaterMarkCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"wm\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            + \": Include a text watermark on the image currently editing. \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            + \"Parameters: WATERMARK \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" FomoFoto\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private boolean isNewCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public WaterMarkCommand(String words) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        setCommandName(COMMAND_WORD);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        setArguments(words);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        this.text \u003d \"\\u00a9 \" + words;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        this.isNewCommand \u003d true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public CommandResult execute(CurrentEdit currentEdit,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                                 Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        Image initialImage \u003d currentEdit.getTempImage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        if (initialImage \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_DID_NOT_OPEN);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        BufferedImage bufferedImage \u003d initialImage.getBufferedImage();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        String type \u003d initialImage.getFileType();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        // determine image type and handle correct transparency"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        int imageType \u003d \"png\".equalsIgnoreCase(type) ? BufferedImage.TYPE_INT_ARGB : BufferedImage.TYPE_INT_RGB;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        BufferedImage watermarked \u003d new BufferedImage(bufferedImage.getWidth(), bufferedImage.getHeight(), imageType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        // initializes necessary graphic properties"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        Graphics2D w \u003d (Graphics2D) watermarked.getGraphics();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        w.drawImage(bufferedImage, 0, 0, null);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        AlphaComposite alphaChannel \u003d AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.4f);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        w.setComposite(alphaChannel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        w.setColor(Color.GRAY);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        w.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 30));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        FontMetrics fontMetrics \u003d w.getFontMetrics();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        Rectangle2D rect \u003d fontMetrics.getStringBounds(text, w);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        // calculate center of the image"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        int centerX \u003d (bufferedImage.getWidth() - (int) rect.getWidth()) / 2;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        int centerY \u003d bufferedImage.getHeight() / 2;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        // add text overlay to the image"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        w.drawString(text, centerX, centerY);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        w.dispose();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        if (this.isNewCommand) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            if (initialImage.hasWaterMark()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_HAS_WATERMARK);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                this.isNewCommand \u003d false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                initialImage.setWaterMark(true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                currentEdit.updateTempImage(watermarked);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                currentEdit.addCommand(this);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                currentEdit.displayTempImage();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            currentEdit.updateTempImage(watermarked);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            initialImage.setWaterMark(true);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        return new CommandResult(Messages.MESSAGE_WATERMARK_SUCCESS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                || (other instanceof WaterMarkCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                \u0026\u0026 (this.text.equals(((WaterMarkCommand) other).text)));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        return \"WaterMark \" + text;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kayheen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kayheen": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.commands.BlackWhiteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.commands.BrightnessCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.commands.ContrastCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.commands.CropCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.commands.ListFilesCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.commands.ResizeCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.commands.RotateCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.commands.SaveCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.commands.SavePresetCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.commands.SetPresetCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.commands.TabCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.commands.WaterMarkCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itszp"
        },
        "content": "        case ListFilesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itszp"
        },
        "content": "            return new ListFilesCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itszp"
        },
        "content": "        case SaveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itszp"
        },
        "content": "            return new SaveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "carrein"
        },
        "content": "        case ImportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "carrein"
        },
        "content": "            return new ImportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        case RotateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            return new RotateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itszp"
        },
        "content": "        case OpenCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itszp"
        },
        "content": "            return new OpenCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        case ContrastCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            return new ContrastCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        case CropCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            return new CropCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        case BrightnessCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            return new BrightnessCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        case BlackWhiteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            return new BlackWhiteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "carrein"
        },
        "content": "        case TabCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "carrein"
        },
        "content": "            return new TabCommand();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        case ResizeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            return new ResizeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        case ExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            return new ExportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        case SavePresetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            return new SavePresetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        case SetPresetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            return new SetPresetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        case WaterMarkCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            return new WaterMarkCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        default: throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itszp": 11,
      "kayheen": 11,
      "carrein": 5,
      "randytqw": 16,
      "-": 61,
      "thamsimun": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/BlackWhiteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author thamsimun */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import java.util.OptionalInt;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.commands.BlackWhiteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " * This class parses the black/white command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "public class BlackWhiteCommandParser implements Parser\u003cBlackWhiteCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * Parses the BlackWhite Command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * @return a BlackWhiteCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public BlackWhiteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        OptionalInt threshold;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (args.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            threshold \u003d OptionalInt.empty();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            args \u003d args.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            String[] parsed \u003d args.split(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            if (parsed.length \u003e 1) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    BlackWhiteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            if (parsed.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    threshold \u003d OptionalInt.of(Integer.parseInt(parsed[0]));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    throw new ParseException(Messages.MESSAGE_BLACKWHITE_INT_ERROR);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                Character lastletter \u003d parsed[0].charAt(parsed[0].length() - 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                if (lastletter.equals(\u0027f\u0027) || lastletter.equals(\u0027F\u0027) || lastletter.equals(\u0027d\u0027)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    || lastletter.equals(\u0027D\u0027)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    throw new ParseException(Messages.MESSAGE_BLACKWHITE_INT_ERROR);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                if (threshold.getAsInt() \u003c 0) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    throw new ParseException(Messages.MESSAGE_NEGATIVE_ERROR);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                threshold \u003d OptionalInt.empty();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        return new BlackWhiteCommand(threshold);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author*/"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "thamsimun": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/BrightnessCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author thamsimun */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import java.util.OptionalDouble;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.commands.BrightnessCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " * This class parses the contrast command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "public class BrightnessCommandParser implements Parser\u003cBrightnessCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * Parses the Contrast Command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * @return a ContrastCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public BrightnessCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        OptionalDouble brightnessValue;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (args.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            brightnessValue \u003d OptionalDouble.empty();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            args \u003d args.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            String[] parsed \u003d args.split(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            if (parsed.length \u003e 1) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    BrightnessCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            if (parsed.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    brightnessValue \u003d OptionalDouble.of(Double.parseDouble(parsed[0]));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    throw new ParseException(Messages.MESSAGE_BRIGHTNESS_DOUBLE_ERROR);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                Character lastletter \u003d parsed[0].charAt(parsed[0].length() - 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                if (lastletter.equals(\u0027f\u0027) || lastletter.equals(\u0027F\u0027) || lastletter.equals(\u0027d\u0027)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    || lastletter.equals(\u0027D\u0027)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    throw new ParseException(Messages.MESSAGE_BRIGHTNESS_DOUBLE_ERROR);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                if (brightnessValue.getAsDouble() \u003c 0) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    throw new ParseException(Messages.MESSAGE_NEGATIVE_ERROR);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                brightnessValue \u003d OptionalDouble.empty();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        return new BrightnessCommand(brightnessValue);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author*/"
      }
    ],
    "authorContributionMap": {
      "thamsimun": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ContrastCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author thamsimun */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import java.util.OptionalDouble;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.commands.ContrastCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " * This class parses the contrast command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "public class ContrastCommandParser implements Parser\u003cContrastCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * Parses the Contrast Command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * @return a ContrastCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public ContrastCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        OptionalDouble contrastValue;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (args.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            contrastValue \u003d OptionalDouble.empty();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            args \u003d args.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            String[] parsed \u003d args.split(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            System.out.println(\"length is\" + parsed.length);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            if (parsed.length \u003e 1) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                System.out.println(\"hi\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    ContrastCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            if (parsed.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    contrastValue \u003d OptionalDouble.of(Double.parseDouble(parsed[0]));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    throw new ParseException(Messages.MESSAGE_CONTRAST_DOUBLE_ERROR);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                Character lastletter \u003d parsed[0].charAt(parsed[0].length() - 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                if (lastletter.equals(\u0027f\u0027) || lastletter.equals(\u0027F\u0027) || lastletter.equals(\u0027d\u0027)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    || lastletter.equals(\u0027D\u0027)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    throw new ParseException(Messages.MESSAGE_CONTRAST_DOUBLE_ERROR);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                if (contrastValue.getAsDouble() \u003c 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    throw new ParseException(Messages.MESSAGE_NEGATIVE_ERROR);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                contrastValue \u003d OptionalDouble.empty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        return new ContrastCommand(contrastValue);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author*/"
      }
    ],
    "authorContributionMap": {
      "thamsimun": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CropCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kayheen"
        },
        "content": "/* @@author kayheen */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kayheen"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.commands.CropCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kayheen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kayheen"
        },
        "content": " * This class parses the crop command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kayheen"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kayheen"
        },
        "content": "public class CropCommandParser implements Parser\u003cCropCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * Parses the Crop Command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * @return a CropCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public CropCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            args \u003d args.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            String[] parsed \u003d args.split(\" \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            if (parsed.length \u003e 4) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                        CropCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            int xValue \u003d Integer.parseInt(parsed[0]);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            int yValue \u003d Integer.parseInt(parsed[1]);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            int width \u003d Integer.parseInt(parsed[2]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            int height \u003d Integer.parseInt(parsed[3]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            if (xValue \u003c 0 || yValue \u003c 0 || width \u003c 0 || height \u003c 0) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                throw new ParseException(String.format(Messages.MESSAGE_CROP_INT_ERROR,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                        CropCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            System.out.println(xValue + \" \" + yValue + \" \" + width + \" \" + height);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            return new CropCommand(xValue, yValue, width, height);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_CROP_INT_ERROR, CropCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, CropCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kayheen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kayheen": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExportCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "randytqw"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import static seedu.address.commons.core.Config.MAX_FILE_SIZE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.model.Album;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.model.image.Image;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "randytqw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "randytqw"
        },
        "content": " * Parses input arguments and creates a new ExportCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "randytqw"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "randytqw"
        },
        "content": "public class ExportCommandParser implements Parser\u003cExportCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    // Album to copy imported images to."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    private final Album album \u003d Album.getInstance();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "    // Directory to copy imported images to."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final File directory \u003d new File(album.getAssetsFilepath());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     * Parses the given {@code String} of arguments in the context"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     * of the ImportCommand and returns an ImportCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public ExportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        // Boolean value to indicate if FomoFoto should print directory or file return message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        boolean isDirectory \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        // Trim to prevent excess whitespace."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        args \u003d args.trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        if (validPath(args) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            return new ExportCommand(args, true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        } else if (validPath(args) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            return new ExportCommand(args, false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_FILE_NOT_FOUND);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     * Given a URL checks if the given path is valid."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     * @param url Path to a file or directory."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     * @return 1 if directory, 0 if file, -1 otherwise."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public int validPath(String url) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        // Trim url to remove trailing whitespace"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        File file \u003d new File(url.trim());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        if (file.isDirectory()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        if (file.isFile()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     * Given a Image checks if the file name already exists."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     * @param image image to for checking."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     * @return True if image file name exist, false otherwise."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public boolean duplicateFile(Image image) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return (new File(album.getAssetsFilepath() + image.getName().toString()).exists()) ? true : false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     * Given a URL checks if the file is of an image type."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     * @param url Path to a file or directory."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     * @return True if path is valid, false otherwise."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public boolean validFormat(String url) throws IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        String mime \u003d Files.probeContentType(Paths.get(url));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        return (mime !\u003d null \u0026\u0026 mime.split(\"/\")[0].equals(\"image\")) ? true : false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     * Given a URL checks if the file is hidden."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     * Uses isHidden() for DOS based machines and checks \u0027.\u0027 character for UNIX based machines."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     * @param url Path to a file or directory."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     * @return True if file is hidden, false otherwise."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public boolean isHidden(String url) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        File file \u003d new File(url);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        return (file.isHidden() || file.getName().substring(0, 1).equals(\".\")) ? true : false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     * Given a URL checks if the file is too large for bufferedImage to process."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     * Constant for"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     * @param url Path to a file or directory."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     * @return True if file is too large, false otherwise."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public boolean isLarge(String url) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        File file \u003d new File(url);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        return file.length() \u003e MAX_FILE_SIZE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "randytqw"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "carrein": 3,
      "randytqw": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ImportCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "/* @@author Carrein */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static seedu.address.commons.core.Config.MAX_FILE_SIZE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static seedu.address.commons.core.Config.SAMPLE_FOLDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javax.imageio.ImageIO;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.apache.commons.io.FileUtils;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.ResourceWalker;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.Album;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.image.Image;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": " * Parses input arguments and creates a new ImportImage object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class ImportCommandParser implements Parser\u003cImportCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final Album album \u003d Album.getInstance();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final File directory \u003d new File(album.getAssetsFilepath());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Parses the given {@code String} of arguments in the context"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * of the ImportCommand and returns an ImportCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public ImportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "        // Boolean value to indicate if FomoFoto should print directory or file return message."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "        boolean isDirectory \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrein"
        },
        "content": "        // Trim to prevent excess whitespace."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": "        args \u003d args.trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": "        File folder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrein"
        },
        "content": "        File[] listOfFiles;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrein"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrein"
        },
        "content": "            switch (validPath(args)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrein"
        },
        "content": "            // TODO - Pending refactor."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "carrein"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrein"
        },
        "content": "                isDirectory \u003d true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "carrein"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "carrein"
        },
        "content": "                    ResourceWalker.walk(SAMPLE_FOLDER);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "carrein"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "carrein"
        },
        "content": "                    e.printStackTrace();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "carrein"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "carrein"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "carrein"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "carrein"
        },
        "content": "                isDirectory \u003d true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "carrein"
        },
        "content": "                folder \u003d new File(args);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "carrein"
        },
        "content": "                listOfFiles \u003d folder.listFiles();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "carrein"
        },
        "content": "                for (File f : listOfFiles) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "carrein"
        },
        "content": "                    String path \u003d f.getAbsolutePath();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "carrein"
        },
        "content": "                    // File must be valid and not hidden and not ridiculously large."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "carrein"
        },
        "content": "                    if (validFormat(path) \u0026\u0026 !isHidden(path) \u0026\u0026 !isLarge(path) \u0026\u0026 validImage(path)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "carrein"
        },
        "content": "                        Image image \u003d new Image(path);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "carrein"
        },
        "content": "                        if (!duplicateFile(image)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "carrein"
        },
        "content": "                            try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "carrein"
        },
        "content": "                                File file \u003d new File(path);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "carrein"
        },
        "content": "                                album.addToImageList(path);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "carrein"
        },
        "content": "                                FileUtils.copyFileToDirectory(file, directory);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "carrein"
        },
        "content": "                                System.out.println(\"✋ IMPORTED: \" + path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "carrein"
        },
        "content": "                            } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "carrein"
        },
        "content": "                                System.out.println(e.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "carrein"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "carrein"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "carrein"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "carrein"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "carrein"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "carrein"
        },
        "content": "            case 0:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "carrein"
        },
        "content": "                // File must be valid and not hidden and not ridiculously large."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "carrein"
        },
        "content": "                if (validFormat(args) \u0026\u0026 !isHidden(args)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "carrein"
        },
        "content": "                    if (validImage(args)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "carrein"
        },
        "content": "                        if (!isLarge(args)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "carrein"
        },
        "content": "                            Image image \u003d new Image(args);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "carrein"
        },
        "content": "                            if (!duplicateFile(image)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "carrein"
        },
        "content": "                                try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "carrein"
        },
        "content": "                                    File file \u003d new File(args);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "carrein"
        },
        "content": "                                    FileUtils.copyFileToDirectory(file, directory);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "carrein"
        },
        "content": "                                    album.addToImageList(args);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "carrein"
        },
        "content": "                                    System.out.println(\"✋ IMPORTED: \" + args);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "carrein"
        },
        "content": "                                } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "carrein"
        },
        "content": "                                    System.out.println(e.toString());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "carrein"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "carrein"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "carrein"
        },
        "content": "                                throw new ParseException(Messages.MESSAGE_DUPLICATE_FILE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "carrein"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "carrein"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "carrein"
        },
        "content": "                            throw new ParseException(Messages.MESSAGE_INVALID_SIZE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "carrein"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "carrein"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "carrein"
        },
        "content": "                        throw new ParseException(Messages.MESSAGE_UNABLE_TO_READ_FILE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "carrein"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "carrein"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "carrein"
        },
        "content": "                    throw new ParseException(Messages.MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "carrein"
        },
        "content": "                }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "carrein"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "carrein"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "carrein"
        },
        "content": "                throw new ParseException(Messages.MESSAGE_INVALID_PATH);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "carrein"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "carrein"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "carrein"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "carrein"
        },
        "content": "        album.refreshAlbum();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return new ImportCommand(isDirectory);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Given a URL checks if the given path is valid."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @param url Path to a file or directory."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @return 1 if directory, 0 if file, -1 otherwise."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public int validPath(String url) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "carrein"
        },
        "content": "        // Trim url to remove trailing whitespace"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "carrein"
        },
        "content": "        if (url.equals(\"sample\")) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "carrein"
        },
        "content": "            return 2;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "carrein"
        },
        "content": "        File file \u003d new File(url.trim());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "carrein"
        },
        "content": "        if (file.isDirectory()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "carrein"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "carrein"
        },
        "content": "        if (file.isFile()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "carrein"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Given a Image checks if the file name already exists."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @param image image to for checking."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @return True if image file name exist, false otherwise."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public boolean duplicateFile(Image image) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return album.imageExist(image.getName().fullName);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Given a URL checks if the file is of an image type."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @param url Path to a file or directory."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @return True if path is valid, false otherwise."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @throws IOException Throws exception if content cannot be probed."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public boolean validFormat(String url) throws IOException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String mime \u003d Files.probeContentType(Paths.get(url));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return (mime !\u003d null \u0026\u0026 mime.split(\"/\")[0].equals(\"image\")) ? true : false;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Given a URL checks if the file is hidden."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Uses isHidden() for DOS based machines and checks \u0027.\u0027 character for UNIX based machines."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @param url Path to a file or directory."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @return True if file is hidden, false otherwise."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public boolean isHidden(String url) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "carrein"
        },
        "content": "        File file \u003d new File(url);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return (file.isHidden() || file.getName().substring(0, 1).equals(\".\")) ? true : false;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Given a URL checks if the file is too large for bufferedImage to process."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Constant for"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @param url Path to a file or directory."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @return True if file is too large, false otherwise."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public boolean isLarge(String url) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "carrein"
        },
        "content": "        File file \u003d new File(url);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "carrein"
        },
        "content": "        System.out.println(file.length());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return file.length() \u003e MAX_FILE_SIZE;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Checks is url given is a valid Image file."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @param url Path to file or directory"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @return True if file is a valid image, false otherwise."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @throws IOException Throws exception if file cannot be opened."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public boolean validImage(String url) throws IOException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "carrein"
        },
        "content": "        File file \u003d new File(url);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "carrein"
        },
        "content": "        if (ImageIO.read(file) \u003d\u003d null) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "carrein"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "carrein": 201
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/OpenCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itszp"
        },
        "content": "/* @@author itszp */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itszp"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itszp"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itszp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itszp"
        },
        "content": " * Parses input arguments and creates a new OpenCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itszp"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itszp"
        },
        "content": "public class OpenCommandParser implements Parser\u003cOpenCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * Parses the given {@code String} of arguments in the context"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * of the OpenCommand and returns an OpenCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itszp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public OpenCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itszp"
        },
        "content": "        args \u003d args.trim();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itszp"
        },
        "content": "        if (args.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itszp"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, OpenCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itszp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itszp"
        },
        "content": "        return new OpenCommand(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itszp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itszp": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ResizeCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kayheen"
        },
        "content": "/* @@author kayheen */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kayheen"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.commands.ResizeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kayheen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kayheen"
        },
        "content": " * This class parses the resize command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kayheen"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kayheen"
        },
        "content": "public class ResizeCommandParser implements Parser\u003cResizeCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * Parses the Resize Command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * @param args is the arguments taken in with the command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * @return a ResizeCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public ResizeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            args \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            String[] parsed \u003d args.split(\" \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            if (parsed.length \u003e 2) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                        ResizeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            String w \u003d parsed[0];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            String h \u003d parsed[1];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            int width \u003d Integer.parseInt(w);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            int height \u003d Integer.parseInt(h);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            if (width \u003c\u003d 0 || height \u003c\u003d 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                throw new ParseException(String.format(Messages.MESSAGE_RESIZE_VALUE_ERROR,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                        ResizeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            return new ResizeCommand(width, height);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_RESIZE_VALUE_ERROR, ResizeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                    ResizeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kayheen"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kayheen": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RotateCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kayheen"
        },
        "content": "/* @@author kayheen */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kayheen"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.commands.RotateCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kayheen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kayheen"
        },
        "content": " * This class parses the rotate command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kayheen"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kayheen"
        },
        "content": "public class RotateCommandParser implements Parser\u003cRotateCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * Parses the Rotate Command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * @return a RotateCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * @throws ParseException is thrown if the value is not an integer or unspecified."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public RotateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            args \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            String[] parsed \u003d args.split(\" \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            if (parsed.length \u003e 1) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                        RotateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            String deg \u003d parsed[0];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            int degree \u003d Integer.parseInt(deg);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            if (degree \u003c 0) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                throw new ParseException(String.format(Messages.MESSAGE_ROTATE_DEGREE_ERROR,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                        RotateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            return new RotateCommand(degree);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_ROTATE_DEGREE_ERROR, RotateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                    RotateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kayheen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kayheen": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SaveCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itszp"
        },
        "content": "/* @@author itszp */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itszp"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itszp"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_SAVE_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itszp"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_SAVE_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itszp"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.logic.commands.SaveCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itszp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itszp"
        },
        "content": " * Parses input arguments and creates a new OpenCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itszp"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itszp"
        },
        "content": "public class SaveCommandParser implements Parser\u003cSaveCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itszp"
        },
        "content": "    // Represents a string array of valid file types allowed in assets folder."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itszp"
        },
        "content": "    private String[] validFileTypes \u003d new String[]{\".jpg\", \".png\", \".gif\", \".bmp\", \".jpeg\"};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * Parses the given {@code String} of arguments in the context"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * of the SaveCommand and returns an SaveCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * @throws ParseException if args is not a valid file name."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itszp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public SaveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itszp"
        },
        "content": "        boolean isValidName \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itszp"
        },
        "content": "        args \u003d args.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itszp"
        },
        "content": "        if (args.isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itszp"
        },
        "content": "            return new SaveCommand(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itszp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itszp"
        },
        "content": "        for (String x : validFileTypes) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itszp"
        },
        "content": "            if (args.endsWith(x)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itszp"
        },
        "content": "                String substring \u003d args.substring(0, args.length() - x.length());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itszp"
        },
        "content": "                if (substring.isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itszp"
        },
        "content": "                    throw new ParseException(MESSAGE_INVALID_SAVE_NAME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itszp"
        },
        "content": "                }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itszp"
        },
        "content": "                isValidName \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itszp"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itszp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itszp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itszp"
        },
        "content": "        if (!isValidName) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itszp"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_SAVE_TYPE, Arrays.toString(validFileTypes)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itszp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itszp"
        },
        "content": "        return new SaveCommand(args);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itszp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itszp": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SavePresetCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author thamsimun */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.commands.SavePresetCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " * Parses input arguments and creates a new SavePresetCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "public class SavePresetCommandParser implements Parser\u003cSavePresetCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * Parses the SavePreset Command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * @return a SavePresetCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * @throws ParseException is thrown if the value is not an integer or unspecified."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public SavePresetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        args \u003d args.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        String[] parsed \u003d args.split(\" \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        System.out.println(\"length is \" + parsed.length);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (parsed.length !\u003d 1) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "               SavePresetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        return new SavePresetCommand(parsed[0]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author*/"
      }
    ],
    "authorContributionMap": {
      "thamsimun": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SetPresetCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author thamsimun */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.commands.SetPresetCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " * Parses input arguments and creates a new SavePresetCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "public class SetPresetCommandParser implements Parser\u003cSetPresetCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * Parses the Preset Command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * @return a PresetCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * @throws ParseException is thrown if the value is not an integer or unspecified."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public SetPresetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        args \u003d args.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        String[] parsed \u003d args.split(\" \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        System.out.println(\"length is \" + parsed.length);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (parsed.length !\u003d 1) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                SetPresetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        return new SetPresetCommand(parsed[0]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author */"
      }
    ],
    "authorContributionMap": {
      "thamsimun": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/WaterMarkCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kayheen"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.commands.WaterMarkCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kayheen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kayheen"
        },
        "content": " * This class parses the WaterMark command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kayheen"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kayheen"
        },
        "content": "public class WaterMarkCommandParser implements Parser\u003cWaterMarkCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * Parses the Rotate Command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * @return a RotateCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * @throws ParseException is thrown if the value is not an integer or unspecified."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public WaterMarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        args \u003d args.trim();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        if (args.equals(\"\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                    WaterMarkCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        return new WaterMarkCommand(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kayheen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kayheen": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Album.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "/* @@author Carrein */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static seedu.address.commons.core.Config.ASSETS_FOLDER_TEMP_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javax.imageio.ImageIO;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.apache.commons.io.FileUtils;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.Notifier;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.image.Image;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": " * Represents an Album of Images in an ArrayList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": " * Album manages the propertyChangeListener for updates to the UI."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": " * Uses singleton pattern to ensure only a single instance of Album is available."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class Album {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "    // Represents a singleton copy of the Album."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private static Album instance;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": "    // Represents the Storage path of assets folder for all raw images."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final String assetsFilepath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "    // Represents an ArrayList of image available in assets folder."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private List\u003cImage\u003e imageList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Constructor for Album."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Checks if asset folder exists, creates it if it does not and populates the Album."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private Album() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assetsFilepath \u003d generateAssets();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "        populateAlbum();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Gets the current instance of Album."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @return Returns the singleton Album instance."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static Album getInstance() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrein"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "carrein"
        },
        "content": "            instance \u003d new Album();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Gets the list of images in the Album."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @return A list of Image objects."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public List\u003cImage\u003e getImageList() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return imageList;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Gets the filepath of assets folder."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @return String of filepath location."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public String getAssetsFilepath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return assetsFilepath;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Checks if image exists in assets directory."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @param imageName Image name to check for."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @return True if image exist, false otherwise."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public boolean imageExist(String imageName) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "carrein"
        },
        "content": "        for (Image i : imageList) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "carrein"
        },
        "content": "            if (i.getName().fullName.equals(imageName)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "carrein"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "carrein"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Generates a temp assets folder in the system to store imported images."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Temp assets folder is deleted on termination of the program by means of shutdown hook."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @return Absolute path to generated temp folder."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public String generateAssets() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String tempPath \u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "carrein"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "carrein"
        },
        "content": "            String tDir \u003d System.getProperty(\"java.io.tmpdir\") + ASSETS_FOLDER_TEMP_NAME;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "carrein"
        },
        "content": "            File assetsFolder \u003d new File(tDir);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "carrein"
        },
        "content": "            tempPath \u003d assetsFolder.getAbsolutePath() + File.separator;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "carrein"
        },
        "content": "            if (!assetsFolder.exists()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "carrein"
        },
        "content": "                assetsFolder.mkdir();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "carrein"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "carrein"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "carrein"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "carrein"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "carrein"
        },
        "content": "            return tempPath;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * For each image in assets folder, populate the Album with an Image object."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void populateAlbum() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "carrein"
        },
        "content": "        imageList.clear();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "carrein"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "carrein"
        },
        "content": "            File folder \u003d new File(assetsFilepath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "carrein"
        },
        "content": "            for (File file : folder.listFiles()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "carrein"
        },
        "content": "                addToImageList(file.getAbsolutePath());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "carrein"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "carrein"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "carrein"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void addToImageList(String args) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "carrein"
        },
        "content": "        imageList.add(new Image(args));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Resets the Album to empty."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void clearAlbum() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "carrein"
        },
        "content": "        imageList.clear();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "carrein"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "carrein"
        },
        "content": "            FileUtils.cleanDirectory(new File(assetsFilepath));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "carrein"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "carrein"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void refreshAlbum() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Notifier.firePropertyChangeListener(\"refreshAlbum\", null, null);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void switchTab() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Notifier.firePropertyChangeListener(\"switchTab\", null, null);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /* @@author*/"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /* @@author itszp*/"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * Check if file exists in assets folder."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * Returns true if file name exists"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "itszp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * @param args String of file name."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "itszp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public boolean checkFileExist(String args) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "itszp"
        },
        "content": "        File file \u003d new File(assetsFilepath + args);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "itszp"
        },
        "content": "        System.out.println(file.getAbsolutePath());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "itszp"
        },
        "content": "        return (file.isFile());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * Uses assetsFilePath to retrieve file as specified by args."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * Returns an Image object."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "itszp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * @param args string of file name."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "itszp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public Image retrieveImage(String args) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "itszp"
        },
        "content": "        return new Image(assetsFilepath + args);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * Retrieves a list of all filenames in assets folder. Returns the list as String[]."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "itszp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public String[] getFileNames() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "itszp"
        },
        "content": "        File file \u003d new File(assetsFilepath);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "itszp"
        },
        "content": "        return file.list();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * Saves tempImage to assetsFolder as {@code name} or original name if not specified."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "itszp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public void saveToAssets(Image image, String name) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "itszp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "itszp"
        },
        "content": "            File outputFile \u003d new File(name);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "itszp"
        },
        "content": "            File saveDirectory \u003d new File(assetsFilepath);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "itszp"
        },
        "content": "            ImageIO.write(image.getBufferedImage(), image.getFileType(), outputFile);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "itszp"
        },
        "content": "            FileUtils.copyFileToDirectory(outputFile, saveDirectory, false);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "itszp"
        },
        "content": "            outputFile.delete();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "itszp"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "itszp"
        },
        "content": "            System.out.println(e.toString());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "itszp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /* @@author*/"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itszp": 47,
      "carrein": 150
    }
  },
  {
    "path": "src/main/java/seedu/address/model/CurrentEdit.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author thamsimun */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import java.awt.image.BufferedImage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " * The API of the CurrentEdit component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "public interface CurrentEdit {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    void saveIntoTempFolder(String filename, Image image);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    Image getTempImage();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    void setTempImage();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    void updateTempImage(com.sksamuel.scrimage.Image image);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    void updateTempImage(BufferedImage image);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    void overwriteOriginal(String name);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    void setOriginalImage(Image image);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    void displayTempImage();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    void addCommand(Command command);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    void replaceTempWithOriginal();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    boolean canUndoTemp();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    boolean canRedoTemp();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    List\u003cCommand\u003e getTempSubHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    String getOriginalImageName();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    void updateExif();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    void openImage(Image image);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    void setRedoTemp();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    void setUndoTemp();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    Command getCommandTemp();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    void clearTemp();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    boolean tempImageExist();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    void updateHistory();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    void deleteHistory();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author*/"
      }
    ],
    "authorContributionMap": {
      "thamsimun": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/CurrentEditManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import java.awt.image.BufferedImage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itszp"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itszp"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itszp"
        },
        "content": "import javax.imageio.ImageIO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itszp"
        },
        "content": "import org.apache.commons.io.FileUtils;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "import com.google.common.io.Files;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import com.sksamuel.scrimage.nio.JpegWriter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.Notifier;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.image.Image;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " * Represents the in-memory model of the current image being edited on."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "public class CurrentEditManager implements CurrentEdit {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final String editName \u003d \"temp_img.png\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itszp"
        },
        "content": "    private final String originalName \u003d \"ori_img.png\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final String editFilePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final String editFileName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final String originalFileName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final File directoryTo;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private Image originalImage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private Image tempImage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    private List\u003cCommand\u003e tempList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    private int tempIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itszp"
        },
        "content": "    private String originalImageName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    /* @@author thamsimun */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public CurrentEditManager() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        this.editFilePath \u003d generateEdit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        System.out.println(editFilePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        this.editFileName \u003d editFilePath + editName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        this.originalFileName \u003d editFilePath + originalName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        this.directoryTo \u003d new File(editFilePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        this.originalImage \u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        this.tempImage \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        this.originalImageName \u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    /* @@author*/"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    /* @@author kayheen */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public CurrentEditManager(Image image) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        originalImage \u003d image;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        tempImage \u003d image;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        originalImageName \u003d image.getName().fullName;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        directoryTo \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        originalFileName \u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        editFileName \u003d null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        editFilePath \u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    /* @@author */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /* @@author itszp */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * Opens an image in FomoFoto."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * This method makes two copies of the original image in temp folder."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itszp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * @param image Image to be edited."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itszp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public void openImage(Image image) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itszp"
        },
        "content": "        this.originalImageName \u003d image.getName().getFullName();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itszp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itszp"
        },
        "content": "            FileUtils.cleanDirectory(new File(editFilePath));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itszp"
        },
        "content": "            File file \u003d new File(image.getUrl());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itszp"
        },
        "content": "            FileUtils.copyFileToDirectory(file, directoryTo);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itszp"
        },
        "content": "            File currentFile \u003d new File(editFilePath + this.originalImageName);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itszp"
        },
        "content": "            File tempFile \u003d new File(editFileName);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itszp"
        },
        "content": "            FileUtils.moveFile(currentFile, tempFile);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itszp"
        },
        "content": "            FileUtils.copyFileToDirectory(file, directoryTo);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itszp"
        },
        "content": "            File originalFile \u003d new File(originalFileName);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itszp"
        },
        "content": "            FileUtils.moveFile(currentFile, originalFile);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itszp"
        },
        "content": "            this.originalImage \u003d new Image(originalFile.getAbsolutePath());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itszp"
        },
        "content": "            this.tempImage \u003d new Image(tempFile.getAbsolutePath());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itszp"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itszp"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itszp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * Saves a copy of {@code image} to temp folder as temp_img.png and instantiate it as tempImage ."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itszp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public void saveAsTemp(Image image) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itszp"
        },
        "content": "        saveIntoTempFolder(editFileName, image);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itszp"
        },
        "content": "        setTempImage();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * Saves a copy of {@code image} to temp folder as ori_img.png and instantiate it as originalImage."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * Stores original name is originalImageName."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "itszp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public void saveAsOriginal(Image image) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "itszp"
        },
        "content": "        saveIntoTempFolder(originalName, image);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "itszp"
        },
        "content": "        this.originalImageName \u003d image.getName().getFullName();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "itszp"
        },
        "content": "        setOriginalImage(image);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * Overwrites or creates an {@code image} named {@code filename} in temp folder."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "itszp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public void saveIntoTempFolder(String filename, Image image) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "itszp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "itszp"
        },
        "content": "            File outputFile \u003d new File(filename);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "itszp"
        },
        "content": "            File directory \u003d new File(editFilePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "itszp"
        },
        "content": "            ImageIO.write(image.getBufferedImage(), image.getFileType(), outputFile);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "itszp"
        },
        "content": "            FileUtils.copyFileToDirectory(outputFile, directory, false);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "itszp"
        },
        "content": "            outputFile.delete();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "itszp"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "itszp"
        },
        "content": "            System.out.println(e.toString());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "itszp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public Image getTempImage() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "itszp"
        },
        "content": "        return tempImage;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * Creates tempImage instance of temp_img.png located in temp folder."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "itszp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public void setTempImage() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "itszp"
        },
        "content": "        Image image \u003d new Image(editFileName);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "itszp"
        },
        "content": "        this.tempImage \u003d image;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /* @@author*/"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    /* @@author thamsimun */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * Update tempImage instance of temp_img.png located in temp folder."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public void updateTempImage(com.sksamuel.scrimage.Image image) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        tempList \u003d tempImage.getCommandHistory();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        tempIndex \u003d tempImage.getIndex();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        boolean hasWaterMark \u003d tempImage.hasWaterMark();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        image.output(tempImage.getUrl(), new JpegWriter(100, true));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        tempImage \u003d new Image(editFileName);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        tempImage.setIndex(tempIndex);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        tempImage.setHistory(tempList);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        tempImage.setWaterMark(hasWaterMark);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    /* @@author*/"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    /* @@author kayheen */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * Update tempImage instance of temp_img.png located in temp folder."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public void updateTempImage(BufferedImage bufferedimage) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        tempList \u003d tempImage.getCommandHistory();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        tempIndex \u003d tempImage.getIndex();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        boolean hasWaterMark \u003d tempImage.hasWaterMark();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            File outputFile \u003d new File(editFileName);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            ImageIO.write(bufferedimage, tempImage.getFileType(), outputFile);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            System.out.println(e.toString());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        tempImage \u003d new Image(editFileName);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        tempImage.setHistory(tempList);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        tempImage.setIndex(tempIndex);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        tempImage.setWaterMark(hasWaterMark);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /* @@author itszp */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * Creates originalImage instance of {@code image} located in temp_folder."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "itszp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public void setOriginalImage(Image image) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "itszp"
        },
        "content": "        this.originalImage \u003d new Image(editFileName);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /* @@author*/"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public void displayTempImage() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        Notifier.firePropertyChangeListener(\"import\", null, tempImage.getUrl());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Adds an executed command into Image history."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @param command Command to be added."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public void addCommand(Command command) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        tempImage.addHistory(command);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "carrein"
        },
        "content": "        updateHistory();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public List\u003cCommand\u003e getTempSubHistory() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return tempImage.getSubHistory();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public void replaceTempWithOriginal() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        //List\u003cCommand\u003e tempList \u003d tempImage.getCommandHistory();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        //int index \u003d tempImage.getIndex();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "carrein"
        },
        "content": "            File newTemp \u003d new File(editFilePath + originalName);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            File directory \u003d new File(tempImage.getUrl());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            FileUtils.copyFile(newTemp, directory, false);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            BufferedImage tempBuffer \u003d originalImage.getBufferedImage();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            tempImage.setBufferedImage(tempBuffer);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            //tempImage.setHistory(tempList);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            //tempImage.setIndex(index);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "carrein"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            System.out.println(e.toString());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public boolean canUndoTemp() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        return tempImage.canUndo();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public boolean canRedoTemp() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        return tempImage.canRedo();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public void setUndoTemp() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        tempImage.setUndo();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public void setRedoTemp() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        tempImage.setRedo();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public Command getCommandTemp() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        return tempImage.getCommand();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * Retrieves a list of all filenames in assets folder. Returns the list as String[]."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "itszp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public String[] getFileNames() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "carrein"
        },
        "content": "        File file \u003d new File(Album.getInstance().getAssetsFilepath());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "itszp"
        },
        "content": "        return file.list();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public List\u003cCommand\u003e getSubHistoryTemp() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        return tempImage.getSubHistory();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /* @@author itszp */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * Overwrites ori_img.png with tempImage. Sets originalImageName as {@code name}."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "itszp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public void overwriteOriginal(String name) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "itszp"
        },
        "content": "        saveIntoTempFolder(\"ori_img.png\", tempImage);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "itszp"
        },
        "content": "        this.originalImageName \u003d name;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "itszp"
        },
        "content": "        this.originalImage \u003d new Image(editFileName);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * Saves tempImage to assetsFolder as {@code name} or original name if not specified."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "itszp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public String saveToAssets(String name) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "itszp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "itszp"
        },
        "content": "            if (name.isEmpty()) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "itszp"
        },
        "content": "                name \u003d this.originalImageName;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "itszp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "itszp"
        },
        "content": "            File outputFile \u003d new File(name);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "itszp"
        },
        "content": "            File saveDirectory \u003d new File(Album.getInstance().getAssetsFilepath());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "itszp"
        },
        "content": "            ImageIO.write(tempImage.getBufferedImage(), tempImage.getFileType(), outputFile);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "itszp"
        },
        "content": "            FileUtils.copyFileToDirectory(outputFile, saveDirectory, false);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "itszp"
        },
        "content": "            outputFile.delete();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "itszp"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "itszp"
        },
        "content": "            System.out.println(e.toString());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "itszp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "itszp"
        },
        "content": "        overwriteOriginal(name);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "itszp"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * Resets tempImage history."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "itszp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public void deleteHistory() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "itszp"
        },
        "content": "        tempImage.setHistory(new ArrayList\u003cCommand\u003e());"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "itszp"
        },
        "content": "        tempImage.setIndex(0);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public String getOriginalImageName() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "itszp"
        },
        "content": "        return this.originalImageName;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /* @@author*/"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /* @@author Carrein */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Fires a notifier to update the EXIF pane of the Information Panel."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void updateExif() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Notifier.firePropertyChangeListener(\"refreshDetails\", null, this.tempImage);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Fires a notifier to update the EXIF pane of the Information Panel."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void updateHistory() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Notifier.firePropertyChangeListener(\"refreshHistory\", null, tempImage.getSubHistory());"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Helper method to clean up temp folder on application exit."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void clearTemp() {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "carrein"
        },
        "content": "        File dir \u003d new File(editFilePath);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "carrein"
        },
        "content": "        for (File file : dir.listFiles()) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "carrein"
        },
        "content": "            file.delete();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Generates a temp edit folder in the system to store edited images."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Temp edit folder is deleted on termination of the program by means of shutdown hook."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @return Absolute path to generated temp folder."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public String generateEdit() {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String tempPath \u003d null;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "carrein"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "carrein"
        },
        "content": "            File editFolder \u003d Files.createTempDir();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "carrein"
        },
        "content": "            editFolder.deleteOnExit();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "carrein"
        },
        "content": "            tempPath \u003d editFolder.getAbsolutePath() + File.separator;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "carrein"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "carrein"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return tempPath;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public boolean tempImageExist() {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return tempImage \u003d\u003d null;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /* @@author*/"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itszp": 143,
      "kayheen": 33,
      "carrein": 69,
      "randytqw": 49,
      "thamsimun": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Returns the AddressBook"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Returns an unmodifiable view of the filtered person list"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selected person in the filtered person list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no person is selected."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the selected person in the filtered person list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no person is selected."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    Person getSelectedPerson();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the selected person in the filtered person list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    void setSelectedPerson(Person person);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 10,
      "-": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final SimpleObjectProperty\u003cPerson\u003e selectedPerson \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.addListener(this::ensureSelectedPersonIsValid);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected person \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        return selectedPerson;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person getSelectedPerson() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        return selectedPerson.getValue();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        if (person !\u003d null \u0026\u0026 !filteredPersons.contains(person)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        selectedPerson.setValue(person);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ensures {@code selectedPerson} is a valid person in {@code filteredPersons}."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    private void ensureSelectedPersonIsValid(ListChangeListener.Change\u003c? extends Person\u003e change) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            if (selectedPerson.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                // null is always a valid selected person, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean wasSelectedPersonReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedPerson.getValue());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            if (wasSelectedPersonReplaced) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                // Update selectedPerson to its new value."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedPerson.getValue());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedPerson.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean wasSelectedPersonRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                    .anyMatch(removedPerson -\u003e selectedPerson.getValue().isSamePerson(removedPerson));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            if (wasSelectedPersonRemoved) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                // Select the person that came before it in the list,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                // or clear the selection if there is no such person."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedPerson.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedPerson.get(), other.selectedPerson.get());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "carrein": 2,
      "randytqw": 2,
      "-": 224
    }
  },
  {
    "path": "src/main/java/seedu/address/model/TransformationSet.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author thamsimun */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " * Represents a TransformationSet of preset commands."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " * TransformationSet manages the preset commands for users to use."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " * Uses singleton pattern to ensure only a single instance of TransformationSet is used the whole runtime of"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " * the application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "public class TransformationSet {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    // Represents a singleton copy of the TransformationSet."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private static TransformationSet instance \u003d null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    //List of transformation created by users."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private HashMap\u003cString, List\u003cCommand\u003e\u003e transformationMap;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private TransformationSet() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        this.transformationMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * Gets the current instance of TransformationSet."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * @return Returns the singleton TransformationSet instance."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public static TransformationSet getInstance() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            instance \u003d new TransformationSet();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public List\u003cCommand\u003e findTransformation(String presetName) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        return transformationMap.get(presetName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public boolean isPresent(String presetName) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        return transformationMap.containsKey(presetName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public void addTransformation(String presetName, List\u003cCommand\u003e list) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        transformationMap.put(presetName, list);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author*/"
      }
    ],
    "authorContributionMap": {
      "thamsimun": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/image/Height.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "/* @@author Carrein */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address.model.image;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": " * Represents a Image\u0027s height in FomoFoto\u0027s Album."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidHeight(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class Height {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "            \"Height should not be zero or blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Constructs a {@code Height}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @param height A valid height."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public Height(String height) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "        requireNonNull(height);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "        checkArgument(isValidHeight(height), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "        value \u003d height;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Returns true if a given string is a valid height."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static boolean isValidHeight(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": "        boolean check \u003d Integer.parseInt(test) \u003c\u003d 0 ? false : true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return check;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrein"
        },
        "content": "                || (other instanceof Height // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u0026\u0026 value.equals(((Height) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/image/Image.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "/* @@author Carrein */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address.model.image;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.awt.image.BufferedImage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javax.imageio.ImageIO;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.apache.commons.io.FilenameUtils;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "import com.drew.imaging.ImageMetadataReader;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": "import com.drew.metadata.Directory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "import com.drew.metadata.Metadata;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "import com.drew.metadata.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.logic.commands.WaterMarkCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": " * Represents an Image in FomoFoto."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class Image {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Data fields."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private Height height;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private Width width;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private Size size;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private BufferedImage buffer;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private String url;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private String fileType;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private Metadata metadata;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private List\u003cCommand\u003e commandHistory;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private boolean hasWaterMark;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public Image(String url) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrein"
        },
        "content": "        requireAllNonNull(url);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrein"
        },
        "content": "        File file \u003d new File(url);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "carrein"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrein"
        },
        "content": "            this.buffer \u003d ImageIO.read(file);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "carrein"
        },
        "content": "            this.metadata \u003d ImageMetadataReader.readMetadata(file);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "carrein"
        },
        "content": "            buffer \u003d ImageIO.read(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "carrein"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "carrein"
        },
        "content": "            System.out.println(e.toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "carrein"
        },
        "content": "        this.url \u003d url;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "carrein"
        },
        "content": "        this.fileType \u003d FilenameUtils.getExtension(url);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "carrein"
        },
        "content": "        this.size \u003d new Size(String.valueOf(file.length()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "carrein"
        },
        "content": "        this.name \u003d new Name(FilenameUtils.getBaseName(url),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "carrein"
        },
        "content": "                FilenameUtils.getExtension(url), FilenameUtils.getName(url));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "carrein"
        },
        "content": "        this.width \u003d new Width(String.valueOf(buffer.getWidth()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "carrein"
        },
        "content": "        this.height \u003d new Height(String.valueOf(buffer.getHeight()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "carrein"
        },
        "content": "        commandHistory \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "carrein"
        },
        "content": "        index \u003d 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "carrein"
        },
        "content": "        this.hasWaterMark \u003d false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "carrein"
        },
        "content": "        System.out.println(this.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public Image(File file) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "carrein"
        },
        "content": "        requireAllNonNull(file);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "carrein"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "carrein"
        },
        "content": "            this.buffer \u003d ImageIO.read(file);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "carrein"
        },
        "content": "            this.metadata \u003d ImageMetadataReader.readMetadata(file);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "carrein"
        },
        "content": "            buffer \u003d ImageIO.read(file);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "carrein"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "carrein"
        },
        "content": "            System.out.println(e.toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "carrein"
        },
        "content": "        this.url \u003d file.getAbsolutePath();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "carrein"
        },
        "content": "        this.fileType \u003d FilenameUtils.getExtension(file.getName());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "carrein"
        },
        "content": "        this.size \u003d new Size(String.valueOf(file.length()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "carrein"
        },
        "content": "        this.name \u003d new Name(FilenameUtils.getBaseName(url),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "carrein"
        },
        "content": "                FilenameUtils.getExtension(url), FilenameUtils.getName(url));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "carrein"
        },
        "content": "        this.width \u003d new Width(String.valueOf(buffer.getWidth()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "carrein"
        },
        "content": "        this.height \u003d new Height(String.valueOf(buffer.getHeight()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "carrein"
        },
        "content": "        commandHistory \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "carrein"
        },
        "content": "        index \u003d 0;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "carrein"
        },
        "content": "        this.hasWaterMark \u003d false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "carrein"
        },
        "content": "        System.out.println(this.toString());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public Height getHeight() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return height;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public Width getWidth() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return width;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public BufferedImage getBufferedImage() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return buffer;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public String getUrl() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return url;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public String getFileType() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return fileType;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public Size getSize() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return size;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public boolean hasWaterMark() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return hasWaterMark;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * This method changes the hasWaterMark field so that it reflects the current state of the tempImage."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @param x the new value to set"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void setWaterMark(boolean x) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "carrein"
        },
        "content": "        hasWaterMark \u003d x;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public List\u003cCommand\u003e getCommandHistory() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return commandHistory;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public List\u003cCommand\u003e getSubHistory() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return commandHistory.subList(0, index);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Adds a new transformation command into commandHistory"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * if Undo command was last called command, remove all edits after previous undo."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @param command command to be added"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void addHistory(Command command) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "carrein"
        },
        "content": "        if (index \u003c commandHistory.size()) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "carrein"
        },
        "content": "            commandHistory \u003d commandHistory.subList(0, index);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "carrein"
        },
        "content": "        commandHistory.add(command);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "carrein"
        },
        "content": "        index++;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void setBufferedImage(BufferedImage buffer) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "carrein"
        },
        "content": "        this.buffer \u003d buffer;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return commandHistory.get(index);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void setIndex(int index) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "carrein"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void setHistory(List history) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "carrein"
        },
        "content": "        this.commandHistory \u003d history;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void setUndo() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "carrein"
        },
        "content": "        index--;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "carrein"
        },
        "content": "        if (commandHistory.get(index) instanceof WaterMarkCommand) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "carrein"
        },
        "content": "            setWaterMark(false);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void setRedo() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "carrein"
        },
        "content": "        index++;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return index \u003e 0;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return index \u003c commandHistory.size();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * A basic representation of the Image\u0027s fields."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * EG:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Name: sample.png"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Height: 1600"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Width: 1600"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @return the fields of the image."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "carrein"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "carrein"
        },
        "content": "        builder.append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\")"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "carrein"
        },
        "content": "                .append(\"\\nName: \")"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "carrein"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "carrein"
        },
        "content": "                .append(\"\\nHeight: \")"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "carrein"
        },
        "content": "                .append(getHeight())"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "carrein"
        },
        "content": "                .append(\"\\nWidth: \")"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "carrein"
        },
        "content": "                .append(getWidth())"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "carrein"
        },
        "content": "                .append(\"\\nFormat: \")"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "carrein"
        },
        "content": "                .append(getFileType())"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "carrein"
        },
        "content": "                .append(\"\\nURL: \")"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "carrein"
        },
        "content": "                .append(getUrl())"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "carrein"
        },
        "content": "                .append(\"\\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Returns metadata for image in an ArrayList of Strings."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @return list of meta data tags."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public List\u003cString\u003e getMetadataList() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "carrein"
        },
        "content": "        List\u003cString\u003e tempList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "carrein"
        },
        "content": "        for (Directory directory : metadata.getDirectories()) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "carrein"
        },
        "content": "            for (Tag tag : directory.getTags()) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "carrein"
        },
        "content": "                tempList.add(tag.toString());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "carrein"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return tempList;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 234
    }
  },
  {
    "path": "src/main/java/seedu/address/model/image/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "/* @@author Carrein */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address.model.image;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": " * Represents a Image\u0027s name in FomoFoto\u0027s Album."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": " * A Name comprises of three fields: A fully qualified name, the base name and the file extension."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidExtension(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Ensures the name of the file has to be valid and of an image type."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"([^\\\\s]+(\\\\.(?i)(jpg|png|gif|bmp|tiff|tif))$)\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public final String baseName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public final String extName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @param baseName A valid base name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @param extName  A valid extension."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @param fullName  A valid extension."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public Name(String baseName, String extName, String fullName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "        requireNonNull(baseName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": "        requireNonNull(extName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": "        requireNonNull(fullName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": "        checkArgument(isValidExtension(fullName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "        this.baseName \u003d baseName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "        this.extName \u003d extName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrein"
        },
        "content": "        this.fullName \u003d fullName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static boolean isValidExtension(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public String getBaseName() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return baseName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public String getExtName() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return extName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public String getFullName() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return baseName + \".\" + extName;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return this.toString().hashCode();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/model/image/Size.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "/* @@author Carrein */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address.model.image;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static seedu.address.commons.core.Config.MAX_FILE_SIZE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": " * Represents a Image\u0027s size in FomoFoto\u0027s Album."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidSize(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class Size {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "            \"Size should not be less than 0, blank or above configured max size.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Constructs a {@code Size}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @param size A valid height."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public Size(String size) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "        requireNonNull(size);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "        checkArgument(isValidSize(size), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "        value \u003d size;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Returns true if a given string is a valid height."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static boolean isValidSize(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "        boolean check \u003d Integer.parseInt(test) \u003c\u003d 0 \u0026\u0026 Integer.parseInt(test) \u003c\u003d MAX_FILE_SIZE ? false : true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return check;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrein"
        },
        "content": "                || (other instanceof Size // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u0026\u0026 value.equals(((Size) other).value)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/image/Width.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "/* @@author Carrein */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address.model.image;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": " * Represents a Image\u0027s width in FomoFoto\u0027s Album."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidWidth(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class Width {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "            \"Width should not be zero or blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Constructs a {@code Width}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @param width A valid width."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public Width(String width) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "        requireNonNull(width);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "        checkArgument(isValidWidth(width), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "        value \u003d width;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Returns true if a given string is a valid width."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static boolean isValidWidth(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": "        boolean check \u003d Integer.parseInt(test) \u003c\u003d 0 ? false : true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return check;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrein"
        },
        "content": "                || (other instanceof Width // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u0026\u0026 value.equals(((Width) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AddressBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.AddressBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 45,
      "thamsimun": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAddressBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private final Path backupFilePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        backupFilePath \u003d Paths.get(filePath.toString() + \".backup\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                filePath, JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        saveAddressBook(addressBook, backupFilePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 79,
      "thamsimun": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        addressBookStorage.backupAddressBook(addressBook);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 77,
      "thamsimun": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "/* @@author Carrein */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class CommandCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private static final String FXML \u003d \"CommandListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private Text commandName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private Text arguments;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public CommandCard(Command command) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": "        commandName.setText(\"\\uD83D\\uDCD6 \" + command.getCommandName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "        arguments.setText(\"Arguments: \" + command.getArguments());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ImageCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "/* @@author Carrein */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class ImageCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private static final String FXML \u003d \"ImageListCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public final Image image;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private Text name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private Text height;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private Text width;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private Text size;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private ImageView thumbnail;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public ImageCard(Image image) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrein"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": "        this.image \u003d image;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrein"
        },
        "content": "        File file \u003d new File(image.getUrl());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrein"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrein"
        },
        "content": "            thumbnail.setImage(new javafx.scene.image.Image(file.toURI().toURL().toExternalForm()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrein"
        },
        "content": "        } catch (MalformedURLException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "carrein"
        },
        "content": "            System.out.println(e.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "carrein"
        },
        "content": "        name.setText(\"\\uD83D\\uDDBC \" + image.getName().getFullName());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "carrein"
        },
        "content": "        height.setText(\"Height: \" + image.getHeight().value + \" px\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "carrein"
        },
        "content": "        width.setText(\"Width: \" + image.getWidth().value + \" px\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "carrein"
        },
        "content": "        size.setText(\"Size: \" + image.getSize().value + \" bytes\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ImagePanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "/* @@author Carrein */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.beans.PropertyChangeEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.beans.PropertyChangeListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.scene.layout.Pane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.Notifier;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": " * The Image Panel of the App."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class ImagePanel extends UiPart\u003cRegion\u003e implements PropertyChangeListener {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private static final String FXML \u003d \"ImagePanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private ImageView imageView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public ImagePanel(Pane pane) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Notifier.addPropertyChangeListener(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "        imageView.setPreserveRatio(true);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Updates the imageview based on incoming event parameter."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @param event url of new image to display."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void propertyChange(PropertyChangeEvent event) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "        if (event.getPropertyName().equals(\"import\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrein"
        },
        "content": "            File f \u003d new File(event.getNewValue().toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrein"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": "                Image i \u003d new Image(f.toURI().toURL().toExternalForm());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrein"
        },
        "content": "                imageView.setImage(i);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": "            } catch (MalformedURLException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrein"
        },
        "content": "                System.out.println(e.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrein"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "carrein": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/InformationPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "/* @@author Carrein */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.beans.PropertyChangeEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.beans.PropertyChangeListener;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.Notifier;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.Album;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.image.Image;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": " * The Image Panel of the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class InformationPanel extends UiPart\u003cRegion\u003e implements PropertyChangeListener {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private static final String FXML \u003d \"InformationPanel.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private TabPane informationPanel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final ListView\u003cImage\u003e imageListView \u003d new ListView\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final ListView\u003cString\u003e metaListView \u003d new ListView\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final ListView\u003cCommand\u003e commandListView \u003d new ListView\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final Tab albumTab \u003d informationPanel.getTabs().get(0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final Tab detailsTab \u003d informationPanel.getTabs().get(1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final Tab historyTab \u003d informationPanel.getTabs().get(2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final Album album \u003d Album.getInstance();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private int selectedIndex \u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public InformationPanel() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrein"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Notifier.addPropertyChangeListener(this);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrein"
        },
        "content": "        refreshAlbum();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": "        // Tab is already preset to index 0 on launch - increment to select next tab."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrein"
        },
        "content": "        selectedIndex++;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Image} using a {@code ImageCard}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "carrein"
        },
        "content": "    class ImageListViewCell extends ListCell\u003cImage\u003e {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "carrein"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "carrein"
        },
        "content": "        protected void updateItem(Image image, boolean empty) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "carrein"
        },
        "content": "            super.updateItem(image, empty);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "carrein"
        },
        "content": "            if (empty || image \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "carrein"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "carrein"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "carrein"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "carrein"
        },
        "content": "                setGraphic(new ImageCard(image).getRoot());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "carrein"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Image} using a {@code ImageCard}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "carrein"
        },
        "content": "    class CommandListViewCell extends ListCell\u003cCommand\u003e {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "carrein"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "carrein"
        },
        "content": "        protected void updateItem(Command command, boolean empty) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "carrein"
        },
        "content": "            super.updateItem(command, empty);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "carrein"
        },
        "content": "            if (empty || command \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "carrein"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "carrein"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "carrein"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "carrein"
        },
        "content": "                setGraphic(new CommandCard(command).getRoot());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "carrein"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Updates the imageview based on incoming event parameter."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @param event url of new image to display."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void propertyChange(PropertyChangeEvent event) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "carrein"
        },
        "content": "        if (event.getPropertyName().equals(\"refreshAlbum\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "carrein"
        },
        "content": "            refreshAlbum();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "carrein"
        },
        "content": "        if (event.getPropertyName().equals(\"refreshDetails\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "carrein"
        },
        "content": "            refreshDetails(event);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "carrein"
        },
        "content": "        if (event.getPropertyName().equals(\"refreshHistory\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "carrein"
        },
        "content": "            refreshHistory(event);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "carrein"
        },
        "content": "        if (event.getPropertyName().equals(\"switchTab\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "carrein"
        },
        "content": "            switchTab();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Helper method to refresh the EXIF pane of Information Panel."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private void refreshAlbum() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "carrein"
        },
        "content": "        List\u003cImage\u003e imageList \u003d album.getImageList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "carrein"
        },
        "content": "        imageListView.setItems(FXCollections.observableArrayList(imageList));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "carrein"
        },
        "content": "        imageListView.setCellFactory(listView -\u003e new ImageListViewCell());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "carrein"
        },
        "content": "        albumTab.setContent(imageListView);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Helper method to refresh the EXIF pane of Information Panel."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private void refreshDetails(PropertyChangeEvent event) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Image tempImage \u003d (Image) event.getNewValue();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "carrein"
        },
        "content": "        List\u003cString\u003e metaList \u003d tempImage.getMetadataList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "carrein"
        },
        "content": "        metaListView.setItems(FXCollections.observableArrayList(metaList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "carrein"
        },
        "content": "        detailsTab.setContent(metaListView);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Helper method to refresh the history pane of Information Panel."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private void refreshHistory(PropertyChangeEvent event) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "carrein"
        },
        "content": "        List\u003cCommand\u003e commandList \u003d (List\u003cCommand\u003e) event.getNewValue();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "carrein"
        },
        "content": "        commandListView.setItems(FXCollections.observableArrayList(commandList));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "carrein"
        },
        "content": "        commandListView.setCellFactory(listView -\u003e new CommandListViewCell());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "carrein"
        },
        "content": "        historyTab.setContent(commandListView);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Helper method to switch the information tabs."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private void switchTab() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "carrein"
        },
        "content": "        int tabLength \u003d informationPanel.getTabs().size();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "carrein"
        },
        "content": "        if (selectedIndex \u003e\u003d tabLength) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "carrein"
        },
        "content": "            selectedIndex \u003d 0;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "carrein"
        },
        "content": "        informationPanel.getSelectionModel().select(selectedIndex);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "carrein"
        },
        "content": "        selectedIndex++;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "carrein": 142
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/InitPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "/* @@author Carrein */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.beans.PropertyChangeEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.beans.PropertyChangeListener;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.Notifier;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": " * The initial text panel for FomoFoto."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class InitPanel extends UiPart\u003cRegion\u003e implements PropertyChangeListener {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private static final String FXML \u003d \"InitPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private List\u003cNode\u003e nodeList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private HBox initView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private TextFlow initText;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public InitPanel() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": "        nodeList \u003d initText.getChildren();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Notifier.addPropertyChangeListener(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Hide the initText if an image is being displayed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @param event"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void propertyChange(PropertyChangeEvent event) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": "        if (event.getPropertyName().equals(\"import\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrein"
        },
        "content": "            for (Node n : nodeList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": "                n.setVisible(false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrein"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "carrein"
        },
        "content": "    //TODO method to display initText if clear command is called"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private ImagePanel imagePanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private InformationPanel informationPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private InitPanel initPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private StackPane imagePlaceholder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private StackPane informationPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "carrein"
        },
        "content": "        informationPanel \u003d new InformationPanel();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "carrein"
        },
        "content": "        informationPlaceholder.getChildren().add(informationPanel.getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "carrein"
        },
        "content": "        initPanel \u003d new InitPanel();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "carrein"
        },
        "content": "        imagePanel \u003d new ImagePanel(imagePlaceholder);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "carrein"
        },
        "content": "        imagePlaceholder.getChildren().add(initPanel.getRoot());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "carrein"
        },
        "content": "        imagePlaceholder.getChildren().add(imagePanel.getRoot());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath(), logic.getAddressBook());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, logic.getHistory());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 13,
      "-": 194
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private static final String[] TAG_COLOUR_STYLES \u003d {\"teal\", \"red\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        \"yellow\", \"blue\", \"orange\", \"brown\", \"green\", \"pink\", \"black\", \"grey\"};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        initTags(person);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        // person.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * Returns the colour style for {@code tagName}\u0027s label."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * @param tagName"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * @return colourStyle"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public static String getTagColourStyleFor(String tagName) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        return TAG_COLOUR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOUR_STYLES.length];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * Initialises the Tags"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * @param person"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private void initTags(Person person) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        person.getTags().forEach(tag -\u003e {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            tagLabel.getStyleClass().add(getTagColourStyleFor(tag.tagName));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        });"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kayheen": 24,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itszp"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/fomofoto_icon.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itszp": 1,
      "-": 85
    }
  },
  {
    "path": "src/main/resources/view/CommandListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c!-- @@author Carrein --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003cVBox fx:id\u003d\"imagePane\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": "      \u003cStackPane alignment\u003d\"TOP_LEFT\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "            \u003cInsets bottom\u003d\"3\" left\u003d\"6\" right\u003d\"6\" top\u003d\"6\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "            \u003cText fx:id\u003d\"commandName\" fill\u003d\"WHITE\" text\u003d\"COMMAND\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "            \u003c/Text\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "      \u003cStackPane alignment\u003d\"TOP_LEFT\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": "            \u003cInsets bottom\u003d\"6\" left\u003d\"6\" right\u003d\"6\" top\u003d\"3\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "            \u003cText fx:id\u003d\"arguments\" fill\u003d\"WHITE\" text\u003d\"ARGUMENTS\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "            \u003c/Text\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "carrein": 38
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "carrein"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kayheen"
        },
        "content": "#tags .teal {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    -fx-text-fill: #3e7b91;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kayheen"
        },
        "content": "}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kayheen"
        },
        "content": "#tags .red {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    -fx-text-fill: red;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kayheen"
        },
        "content": "}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kayheen"
        },
        "content": "#tags .yellow {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    -fx-text-fill: yellow;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "kayheen"
        },
        "content": "}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kayheen"
        },
        "content": "#tags .blue {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    -fx-text-fill: blue;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "kayheen"
        },
        "content": "}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "kayheen"
        },
        "content": "#tags .orange {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    -fx-text-fill: orange;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "kayheen"
        },
        "content": "}"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "kayheen"
        },
        "content": "#tags .brown {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    -fx-background-color: brown;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kayheen"
        },
        "content": "}"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kayheen"
        },
        "content": "#tags .green {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    -fx-text-fill: green;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "kayheen"
        },
        "content": "}"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "kayheen"
        },
        "content": "#tags .pink {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    -fx-background-color: pink;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kayheen"
        },
        "content": "}"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kayheen"
        },
        "content": "#tags .black {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kayheen"
        },
        "content": "}"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kayheen"
        },
        "content": "#tags .grey {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    -fx-text-fill: grey;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "kayheen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kayheen": 50,
      "carrein": 1,
      "-": 350
    }
  },
  {
    "path": "src/main/resources/view/ImageListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c!-- @@author Carrein --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003cVBox fx:id\u003d\"imagePane\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "      \u003cStackPane alignment\u003d\"TOP_LEFT\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "            \u003cInsets bottom\u003d\"0\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "            \u003cText fx:id\u003d\"name\" fill\u003d\"WHITE\" text\u003d\"NAME\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": "            \u003c/Text\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "      \u003cHBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": "            \u003cStackPane style\u003d\"-fx-padding: 10;\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cImageView fx:id\u003d\"thumbnail\" fitHeight\u003d\"75.0\" fitWidth\u003d\"75.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": "            \u003cGridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "               \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrein"
        },
        "content": "               \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrein"
        },
        "content": "               \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cRowConstraints prefHeight\u003d\"15.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cRowConstraints vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cRowConstraints vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cRowConstraints vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cRowConstraints prefHeight\u003d\"15.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrein"
        },
        "content": "               \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrein"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cText fx:id\u003d\"height\" fill\u003d\"WHITE\" text\u003d\"HEIGHT\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrein"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "carrein"
        },
        "content": "                        \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "carrein"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003c/Text\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cText fx:id\u003d\"width\" fill\u003d\"WHITE\" text\u003d\"WIDTH\" GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "carrein"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "carrein"
        },
        "content": "                        \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "carrein"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003c/Text\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cText fx:id\u003d\"size\" fill\u003d\"WHITE\" text\u003d\"SIZE\" GridPane.rowIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "carrein"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "carrein"
        },
        "content": "                        \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "carrein"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003c/Text\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "carrein"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "carrein"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "carrein"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "carrein"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "carrein"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "carrein": 69
    }
  },
  {
    "path": "src/main/resources/view/ImagePanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c!-- @@author Carrein --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": "   \u003cImageView fx:id\u003d\"imageView\" fitHeight\u003d\"300.0\" fitWidth\u003d\"300.0\" nodeOrientation\u003d\"INHERIT\" StackPane.alignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "carrein": 10
    }
  },
  {
    "path": "src/main/resources/view/InformationPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c!-- @@author Carrein --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003cTabPane fx:id\u003d\"informationPanel\" tabClosingPolicy\u003d\"UNAVAILABLE\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": "  \u003ctabs\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "    \u003cTab text\u003d\"Album Images\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "      \u003ccontent\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": "        \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "          \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "            \u003cListView prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cText fx:id\u003d\"arguments2\" fill\u003d\"WHITE\" layoutX\u003d\"14.0\" layoutY\u003d\"27.0\" text\u003d\"No data to display.\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": "                        \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003c/Text\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "          \u003c/children\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "      \u003c/content\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": "    \u003c/Tab\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "    \u003cTab text\u003d\"EXIF Profile\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": "      \u003ccontent\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "        \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": "          \u003cchildren\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "            \u003cListView prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cText fx:id\u003d\"arguments1\" fill\u003d\"WHITE\" layoutX\u003d\"14.0\" layoutY\u003d\"27.0\" text\u003d\"No data to display.\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": "                        \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003c/Text\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "          \u003c/children\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrein"
        },
        "content": "        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrein"
        },
        "content": "      \u003c/content\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": "    \u003c/Tab\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrein"
        },
        "content": "    \u003cTab text\u003d\"Command History\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": "      \u003ccontent\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrein"
        },
        "content": "        \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrein"
        },
        "content": "          \u003cchildren\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrein"
        },
        "content": "            \u003cListView prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cText fx:id\u003d\"arguments\" fill\u003d\"WHITE\" layoutX\u003d\"14.0\" layoutY\u003d\"27.0\" text\u003d\"No data to display.\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "carrein"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrein"
        },
        "content": "                        \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "carrein"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003c/Text\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "carrein"
        },
        "content": "          \u003c/children\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "carrein"
        },
        "content": "        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "carrein"
        },
        "content": "      \u003c/content\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "carrein"
        },
        "content": "    \u003c/Tab\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "carrein"
        },
        "content": "  \u003c/tabs\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c/TabPane\u003e"
      }
    ],
    "authorContributionMap": {
      "carrein": 58
    }
  },
  {
    "path": "src/main/resources/view/InitPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c!-- @@author Carrein --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.text.TextFlow?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003cHBox fx:id\u003d\"initView\" alignment\u003d\"CENTER\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "        \u003cTextFlow fx:id\u003d\"initText\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": "          \u003cVBox\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003cText fill\u003d\"WHITE\" text\u003d\"📷 FomoFoto\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003cfont\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"32.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003c/font\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003c/Text\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003cText\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003cfont\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003c/font\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003c/Text\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003cText fill\u003d\"WHITE\" text\u003d\"Quick Start:\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003cfont\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003c/font\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003c/Text\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003cText fill\u003d\"WHITE\" text\u003d\"Import image from your computer:\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003cfont\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003c/font\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003c/Text\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003cText fill\u003d\"WHITE\" style\u003d\"-fx-font-weight: bold;\" text\u003d\"import C:\\User\\Pictures\\MyImage.png\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003cfont\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003c/font\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003c/Text\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003cText\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003cfont\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003c/font\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003c/Text\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003cText fill\u003d\"WHITE\" text\u003d\"Open image for editing:\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003cfont\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003c/font\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003c/Text\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003cText fill\u003d\"WHITE\" style\u003d\"-fx-font-weight: bold;\" text\u003d\"open MyImage.png\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003cfont\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003c/font\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003c/Text\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003cText\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003cfont\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003c/font\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003c/Text\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003cText fill\u003d\"WHITE\" text\u003d\"Apply edit to image:\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003cfont\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003c/font\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003c/Text\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003cText fill\u003d\"WHITE\" style\u003d\"-fx-font-weight: bold;\" text\u003d\"rotate 90\"\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003cfont\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003c/font\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003c/Text\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003cText\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003cfont\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003c/font\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003c/Text\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003cHBox\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cText fill\u003d\"WHITE\" text\u003d\"View all commands by entering: \"\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "carrein"
        },
        "content": "                    \u003cfont\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "carrein"
        },
        "content": "                      \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "carrein"
        },
        "content": "                    \u003c/font\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003c/Text\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cText fill\u003d\"WHITE\" style\u003d\"-fx-font-weight: bold;\" text\u003d\"help\"\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "carrein"
        },
        "content": "                    \u003cfont\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "carrein"
        },
        "content": "                      \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "carrein"
        },
        "content": "                    \u003c/font\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003c/Text\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003c/HBox\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "carrein"
        },
        "content": "                     \u003cText\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "carrein"
        },
        "content": "                        \u003cfont\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "carrein"
        },
        "content": "                           \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "carrein"
        },
        "content": "                        \u003c/font\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "carrein"
        },
        "content": "                     \u003c/Text\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "carrein"
        },
        "content": "                     \u003cHBox\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "carrein"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "carrein"
        },
        "content": "                           \u003cText fill\u003d\"WHITE\" text\u003d\"Import a sample set of images: \"\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "carrein"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "carrein"
        },
        "content": "                                 \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "carrein"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "carrein"
        },
        "content": "                           \u003c/Text\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "carrein"
        },
        "content": "                           \u003cText fill\u003d\"WHITE\" style\u003d\"-fx-font-weight: bold;\" text\u003d\"import sample\"\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "carrein"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "carrein"
        },
        "content": "                                 \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "carrein"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "carrein"
        },
        "content": "                           \u003c/Text\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "carrein"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "carrein"
        },
        "content": "                     \u003c/HBox\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "carrein"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "carrein"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "carrein"
        },
        "content": "        \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "carrein"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "carrein"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "carrein"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "carrein": 117
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itszp"
        },
        "content": "         title\u003d\"FomoFoto Image Editor\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itszp"
        },
        "content": "    \u003cImage url\u003d\"@/images/fomofoto_icon.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "carrein"
        },
        "content": "          \u003cStackPane fx:id\u003d\"imagePlaceholder\" prefWidth\u003d\"140\" \u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "carrein"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "carrein"
        },
        "content": "          \u003cStackPane fx:id\u003d\"informationPlaceholder\" prefWidth\u003d\"140\" \u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "itszp": 2,
      "carrein": 4,
      "-": 62
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" halignment\u003d\"RIGHT\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cLabel fx:id\u003d\"syncStatus\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cLabel fx:id\u003d\"saveLocationStatus\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kayheen": 1,
      "-": 14
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private final PersonListPanelHandle personListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "    //private final BrowserPanelHandle browserPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanelHandle(getChildNode(PersonListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "        //browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /* public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return browserPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 4,
      "-": 47
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle to a person card in the person list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label addressLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if this handle contains {@code person}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Person person) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return getName().equals(person.getName().fullName)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getAddress().equals(person.getAddress().value)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getPhone().equals(person.getPhone().value)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getEmail().equals(person.getEmail().value)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(person.getTags().stream()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                        .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                        .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public List\u003cString\u003e getTagStyleClasses(String tag) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                .filter(label -\u003e label.getText().equals(tag))"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                .map(Label::getStyleClass)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                .orElse(null);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kayheen": 9,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itszp"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/fomofoto_icon.png\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.getImage(null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(errorMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false, errorMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itszp": 1,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CLEAR_SUCCESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.logic.commands.CropCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEditManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private CurrentEdit currentEdit \u003d new CurrentEditManager();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "carrein"
        },
        "content": "        logic \u003d new LogicManager(model, storage, currentEdit);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String invalidCommand \u003d \"soitends?\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String cropCommand \u003d CropCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertCommandException(cropCommand, MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String clearCommand \u003d ClearCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertCommandSuccess(clearCommand, MESSAGE_CLEAR_SUCCESS, model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 12,
      "-": 133,
      "thamsimun": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CLEAR_SUCCESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEditManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private CurrentEdit currentEdit \u003d new CurrentEditManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, MESSAGE_CLEAR_SUCCESS, expectedModel,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "            currentEdit);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, MESSAGE_CLEAR_SUCCESS, expectedModel,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": "            currentEdit);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 7,
      "-": 35,
      "thamsimun": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                                            CommandResult expectedCommandResult, Model expectedModel,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "carrein"
        },
        "content": "                                            CurrentEdit currentEdit) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "carrein"
        },
        "content": "            CommandResult result \u003d command.execute(currentEdit, actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    /* @@kayheen */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model model, CommandHistory commandHistory,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                                            String expectedMessage, CurrentEdit currentEdit) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            CommandResult result \u003d command.execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", e);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /* @@author */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * CurrentEdit)}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "carrein"
        },
        "content": "            String expectedMessage, Model expectedModel, CurrentEdit currentEdit) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "carrein"
        },
        "content": "            currentEdit);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "carrein"
        },
        "content": "            String expectedMessage, CurrentEdit currentEdit) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedSelectedPerson \u003d actualModel.getSelectedPerson();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "carrein"
        },
        "content": "            command.execute(currentEdit, actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedSelectedPerson, actualModel.getSelectedPerson());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kayheen": 18,
      "carrein": 7,
      "-": 135,
      "thamsimun": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CropCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kayheen"
        },
        "content": "///* @@author kayheen */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import org.junit.After;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import seedu.address.logic.parser.CropCommandParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import seedu.address.logic.parser.ImportCommandParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import seedu.address.logic.parser.OpenCommandParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import seedu.address.model.Album;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import seedu.address.model.CurrentEditManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//public class CropCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//    private CurrentEdit currentEdit \u003d new CurrentEditManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//    @Before"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//    public void createImagesInAlbum() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            // when image is null, should throw an error"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            CropCommandParser parserCrop \u003d new CropCommandParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            CropCommand rotate \u003d parserCrop.parse(\" 0 0 200 200\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            String expectedMessage \u003d Messages.MESSAGE_DID_NOT_OPEN;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            assertCommandFailure(rotate, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            ImportCommandParser parser \u003d new ImportCommandParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            parser.parse(\"sample\").execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            OpenCommandParser parser2 \u003d new OpenCommandParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            parser2.parse(\"iu.jpg\").execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//        } catch (Exception e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            System.out.println(e.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//    public void execute_validCrop_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            CropCommandParser parser \u003d new CropCommandParser();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            CropCommand command \u003d parser.parse(\" 0 0 200 200\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            String expectedMessage \u003d Messages.MESSAGE_CROP_SUCCESS;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            assertCommandSuccess(command, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//        } catch (Exception e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            System.out.println(e.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//    public void execute_invalidXOrYOrWidthOrHeightInCrop_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            CropCommandParser parser \u003d new CropCommandParser();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            int currWidth \u003d Integer.parseInt(currentEdit.getTempImage().getWidth().value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            int currHeight \u003d Integer.parseInt(currentEdit.getTempImage().getHeight().value);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            // test if width exceed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            CropCommand command \u003d parser.parse(\" 50 0 \" + currWidth + \" \" + currHeight);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            // test if height exceed."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            CropCommand command1 \u003d parser.parse(\" 0 50 \" + currWidth + \" \" + currHeight);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            int wrongX \u003d currWidth + 5;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            int wrongY \u003d currHeight + 10;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            // test if x-coordinate wrong."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            CropCommand command2 \u003d parser.parse(\" \" + wrongX + \" 0 200 100\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            // test if y-coordinate wrong."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            CropCommand command3 \u003d parser.parse(\" 0 \" + wrongY + \" 200 200\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            String expectedMessage \u003d \"Invalid crop bounds, bounds for the inputs as follows:\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//                    + \"0 \u003c\u003d x-coordinate \u003c\u003d \" + currWidth"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//                    + \", 0 \u003c\u003d y-coordinate \u003c\u003d \" + currHeight + \",\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//                    + \"0 \u003c\u003d x + width \u003c\u003d \" + currWidth"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//                    + \", 0 \u003c\u003d y + height \u003c\u003d \" + currHeight;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            assertCommandFailure(command, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            assertCommandFailure(command1, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            assertCommandFailure(command2, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            assertCommandFailure(command3, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//        } catch (Exception e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            System.out.println(e.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//    @After"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//    public void clearAlbum() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//        Album album \u003d Album.getInstance();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//        album.clearAlbum();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//        currentEdit.clearTemp();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "kayheen": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEditManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private CurrentEdit currentEdit \u003d new CurrentEditManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, commandHistory, expectedCommandResult, expectedModel,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "            currentEdit);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 1,
      "-": 21,
      "thamsimun": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEditManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private CurrentEdit currentEdit \u003d new CurrentEditManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, commandHistory, expectedCommandResult, expectedModel,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "            currentEdit);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 1,
      "-": 21,
      "thamsimun": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ImportCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static seedu.address.logic.commands.ImportCommand.MESSAGE_DIR_SUCCESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static seedu.address.logic.commands.ImportCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.Album;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.CurrentEditManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class ImportCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private Album album \u003d Album.getInstance();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private CurrentEdit currentEdit \u003d new CurrentEditManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": "        album.clearAlbum();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void execute_successful_singleImport() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_SUCCESS, false, false);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertCommandSuccess(new ImportCommand(false), model, commandHistory, expectedCommandResult,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "                expectedModel, currentEdit);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void execute_successful_directoryImport() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_DIR_SUCCESS, false, false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertCommandSuccess(new ImportCommand(true), model, commandHistory, expectedCommandResult,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrein"
        },
        "content": "                expectedModel, currentEdit);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEditManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "randytqw"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private CurrentEdit currentEdit \u003d new CurrentEditManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrein"
        },
        "content": "            currentEdit);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrein"
        },
        "content": "            currentEdit);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE, currentEdit);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 3,
      "randytqw": 2,
      "-": 45,
      "thamsimun": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ResizeCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kayheen"
        },
        "content": "///* @@author kayheen */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import org.junit.After;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import seedu.address.logic.parser.ImportCommandParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import seedu.address.logic.parser.OpenCommandParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import seedu.address.logic.parser.ResizeCommandParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import seedu.address.model.Album;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import seedu.address.model.CurrentEditManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//public class ResizeCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//    private CurrentEdit currentEdit \u003d new CurrentEditManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//    @Before"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//    public void createImagesInAlbum() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            // when image is null, should throw an error"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            ResizeCommandParser parserResize \u003d new ResizeCommandParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            ResizeCommand rotate \u003d parserResize.parse(\" 90 100\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            String expectedMessage \u003d Messages.MESSAGE_DID_NOT_OPEN;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            assertCommandFailure(rotate, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            ImportCommandParser parser \u003d new ImportCommandParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            parser.parse(\"sample\").execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            OpenCommandParser parser2 \u003d new OpenCommandParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            parser2.parse(\"iu.jpg\").execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//        } catch (Exception e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            System.out.println(e.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//    public void execute_validResize_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            ResizeCommandParser parser \u003d new ResizeCommandParser();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            ResizeCommand command \u003d parser.parse(\" 200 200\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            String expectedMessage \u003d Messages.MESSAGE_RESIZE_SUCCESS;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            assertCommandSuccess(command, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//        } catch (Exception e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            System.out.println(e.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//    @After"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//    public void clearAlbum() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//        Album album \u003d Album.getInstance();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//        album.clearAlbum();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//        currentEdit.clearTemp();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "kayheen": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RotateCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kayheen"
        },
        "content": "///* @@author kayheen */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import org.junit.After;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import seedu.address.logic.parser.ImportCommandParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import seedu.address.logic.parser.OpenCommandParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import seedu.address.logic.parser.RotateCommandParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import seedu.address.model.Album;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import seedu.address.model.CurrentEditManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//public class RotateCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//    private CurrentEdit currentEdit \u003d new CurrentEditManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//    @Before"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//    public void createImagesInAlbum() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            // when image is null, should throw an error"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            RotateCommandParser parserRotate \u003d new RotateCommandParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            RotateCommand rotate \u003d parserRotate.parse(\" 90\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            String expectedMessage \u003d Messages.MESSAGE_DID_NOT_OPEN;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            assertCommandFailure(rotate, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            ImportCommandParser parser \u003d new ImportCommandParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            parser.parse(\"sample\").execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            OpenCommandParser parser2 \u003d new OpenCommandParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            parser2.parse(\"iu.jpg\").execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//        } catch (Exception e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            System.out.println(e.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//    public void execute_validRotateCheckIsNewCommand_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            RotateCommandParser parser \u003d new RotateCommandParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            RotateCommand command \u003d parser.parse(\" 90\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            String expectedMessage \u003d Messages.MESSAGE_ROTATE_SUCCESS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            assertCommandSuccess(command, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//        } catch (Exception e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            System.out.println(e.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//    public void execute_invalidDegreeInRotate_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            RotateCommandParser parser \u003d new RotateCommandParser();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            RotateCommand command \u003d parser.parse(\" 45\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            RotateCommand command1 \u003d parser.parse(\" 170\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            RotateCommand command2 \u003d parser.parse(\" 200\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            RotateCommand command3 \u003d parser.parse(\" 390\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            String expectedMessage \u003d String.format(Messages.MESSAGE_ROTATE_DEGREE_ERROR,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//                    RotateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            assertCommandFailure(command, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            assertCommandFailure(command1, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            assertCommandFailure(command2, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            assertCommandFailure(command3, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//        } catch (Exception e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//            System.out.println(e.toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//    @After"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//    public void clearAlbum() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//        Album album \u003d Album.getInstance();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//        album.clearAlbum();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//        currentEdit.clearTemp();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "kayheen": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/TabCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static seedu.address.logic.commands.TabCommand.MESSAGE_TAB_SUCCESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.CurrentEditManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class TabCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private CurrentEdit currentEdit \u003d new CurrentEditManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void execute_tab_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_TAB_SUCCESS, false, false);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertCommandSuccess(new TabCommand(), model, commandHistory, expectedCommandResult, expectedModel,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "            currentEdit);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEditManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "randytqw"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private CurrentEdit currentEdit \u003d new CurrentEditManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrein"
        },
        "content": "            currentEdit);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrein"
        },
        "content": "            currentEdit);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE, currentEdit);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 3,
      "randytqw": 2,
      "-": 41,
      "thamsimun": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.commands.CropCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.commands.ResizeCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.commands.RotateCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    /* @author kayheen */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public void parseCommand_rotate() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertTrue(parser.parseCommand(RotateCommand.COMMAND_WORD + \" 90\") instanceof RotateCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        RotateCommand expected \u003d (RotateCommand) parser.parseCommand(RotateCommand.COMMAND_WORD + \" 90\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertEquals(new RotateCommand(90), expected);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public void parseCommand_crop() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertTrue(parser.parseCommand(CropCommand.COMMAND_WORD + \" 0 0 200 200\") instanceof CropCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        CropCommand expected \u003d (CropCommand) parser.parseCommand(CropCommand.COMMAND_WORD + \" 0 0 200 200\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertEquals(new CropCommand(0, 0, 200, 200), expected);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public void parseCommand_resize() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertTrue(parser.parseCommand(ResizeCommand.COMMAND_WORD + \" 200 400\") instanceof ResizeCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        ResizeCommand expected \u003d (ResizeCommand) parser.parseCommand(ResizeCommand.COMMAND_WORD + \" 200 400\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertEquals(new ResizeCommand(200, 400), expected);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    /* @author */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kayheen": 25,
      "carrein": 3,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CropCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kayheen"
        },
        "content": "/* @@author kayheen */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kayheen"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.commands.CropCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kayheen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kayheen"
        },
        "content": " * This tests the various inputs that users can possibly input into a crop command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kayheen"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kayheen"
        },
        "content": "public class CropCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private CropCommandParser parser \u003d new CropCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public void parse_validArgs_returnsRotateCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseSuccess(parser, \" 0 0 200 200\", new CropCommand(0, 0, 200, 200));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseSuccess(parser, \" 20 20 100 100\", new CropCommand(20, 20, 100, 100));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseFailure(parser, \" abc cdf ghi jkl\", String.format(Messages.MESSAGE_CROP_INT_ERROR,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                CropCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseFailure(parser, \" 90.5 20 20 20\", String.format(Messages.MESSAGE_CROP_INT_ERROR,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                CropCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseFailure(parser, \" -2 0 200 200\", String.format(Messages.MESSAGE_CROP_INT_ERROR,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                CropCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseFailure(parser, \" 90 100 200 50 79\", String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                CropCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseFailure(parser, \"\", String.format(Messages.MESSAGE_CROP_INT_ERROR,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                CropCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kayheen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kayheen": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ImportCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.Album;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class ImportCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private ImportCommandParser parser \u003d new ImportCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private Album album \u003d Album.getInstance();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "        album.clearAlbum();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void parse_validFiles_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String validBmpTest \u003d \"src/main/resources/imageTest/valid/validBMPTest.bmp\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String validDuplicateTest \u003d \"src/main/resources/imageTest/valid/validDuplicateTest.jpg\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String validGifTest \u003d \"src/main/resources/imageTest/valid/validGIFtest.gif\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String validJpgTest \u003d \"src/main/resources/imageTest/valid/validJPGTest.jpg\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String validMimeTest \u003d \"src/main/resources/imageTest/valid/validMIMETest.png\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String validNoMimeTest \u003d \"src/main/resources/imageTest/valid/validNOMIMETest.png\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String validPngTest \u003d \"src/main/resources/imageTest/valid/validPNGTest.png\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String validTifTest \u003d \"src/main/resources/imageTest/valid/validTIFTest.tif\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String validUnreasonablySmallTest \u003d \"src/main/resources/imageTest/valid/validUnreasonablySmallTest.jpg\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "        List\u003cString\u003e validFiles \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrein"
        },
        "content": "        validFiles.add(validBmpTest);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrein"
        },
        "content": "        validFiles.add(validDuplicateTest);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": "        validFiles.add(validGifTest);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrein"
        },
        "content": "        validFiles.add(validJpgTest);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": "        validFiles.add(validMimeTest);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrein"
        },
        "content": "        validFiles.add(validNoMimeTest);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrein"
        },
        "content": "        validFiles.add(validPngTest);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrein"
        },
        "content": "        validFiles.add(validTifTest);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrein"
        },
        "content": "        validFiles.add(validUnreasonablySmallTest);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrein"
        },
        "content": "        for (String s : validFiles) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "carrein"
        },
        "content": "            assertParseSuccess(parser, s, new ImportCommand(false));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void parse_sampleDir_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String samplePath \u003d \"sample\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertParseSuccess(parser, samplePath, new ImportCommand(true));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void parse_validDir_success() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String dirPath \u003d \"src/main/resources/imageTest/valid/\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertParseSuccess(parser, dirPath, new ImportCommand(true));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void parse_invalidDir_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String dirPath \u003d \"src/main/resources/imageTest/invalid/\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertParseSuccess(parser, dirPath, new ImportCommand(true));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void parse_emptyPath_failure() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String emptyPath \u003d \"\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertParseFailure(parser, emptyPath, Messages.MESSAGE_INVALID_PATH);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void parse_invalidPath_failure() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String emptyPath \u003d \"src/main/resources/imageTest/invalid/invalidPath.txt\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertParseFailure(parser, emptyPath, Messages.MESSAGE_INVALID_PATH);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void parse_invalidFormat_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String invalidPdf \u003d \"src/main/resources/imageTest/invalid/invalidPDF.pdf\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String invalidRar \u003d \"src/main/resources/imageTest/invalid/invalidRARTest.rar\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String invalidText \u003d \"src/main/resources/imageTest/invalid/invalidSampleTextTest.txt\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String invalidZip \u003d \"src/main/resources/imageTest/invalid/invalidZIPTest.zip\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "carrein"
        },
        "content": "        List\u003cString\u003e invalidFiles \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "carrein"
        },
        "content": "        invalidFiles.add(invalidPdf);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "carrein"
        },
        "content": "        invalidFiles.add(invalidRar);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "carrein"
        },
        "content": "        invalidFiles.add(invalidText);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "carrein"
        },
        "content": "        invalidFiles.add(invalidZip);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "carrein"
        },
        "content": "        for (String s : invalidFiles) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "carrein"
        },
        "content": "            assertParseFailure(parser, s, Messages.MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void parse_invalidHidden_failure() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String invalidText \u003d \"src/main/resources/imageTest/invalid/.invalidHiddenTest.txt\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String invalidImage \u003d \"src/main/resources/imageTest/invalid/.invalidHiddenImageTest.jpg\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "carrein"
        },
        "content": "        List\u003cString\u003e hiddenFiles \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "carrein"
        },
        "content": "        hiddenFiles.add(invalidText);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "carrein"
        },
        "content": "        hiddenFiles.add(invalidImage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "carrein"
        },
        "content": "        for (String s : hiddenFiles) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "carrein"
        },
        "content": "            assertParseFailure(parser, s, Messages.MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void parse_invalidSize_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String emptyPath \u003d \"src/main/resources/imageTest/invalid/invalidUnreasonableBigTest.jpg\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertParseFailure(parser, emptyPath, Messages.MESSAGE_INVALID_SIZE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void parse_invalidMagicNumber_failure() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String emptyPath \u003d \"src/main/resources/imageTest/invalid/invalidMagicNumberPDFtoPNG.png\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertParseFailure(parser, emptyPath, Messages.MESSAGE_UNABLE_TO_READ_FILE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void parse_invalidDuplicate_failure() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String firstFile \u003d \"src/main/resources/imageTest/valid/validDuplicateTest.jpg\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String secondFile \u003d \"src/main/resources/imageTest/valid/validDuplicateTest.jpg\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertParseSuccess(parser, firstFile, new ImportCommand(false));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertParseFailure(parser, secondFile, Messages.MESSAGE_DUPLICATE_FILE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 138
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ResizeCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kayheen"
        },
        "content": "/* @@author kayheen */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kayheen"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.commands.ResizeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kayheen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kayheen"
        },
        "content": " * This tests the various inputs that users can possibly input in a resize command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kayheen"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kayheen"
        },
        "content": "public class ResizeCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private ResizeCommandParser parser \u003d new ResizeCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public void parse_validArgs_returnsRotateCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseSuccess(parser, \" 200 200\", new ResizeCommand(200, 200));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseSuccess(parser, \" 10 20\", new ResizeCommand(10, 20));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseFailure(parser, \" abc cdf\", String.format(Messages.MESSAGE_RESIZE_VALUE_ERROR,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                ResizeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseFailure(parser, \" 90.5 20\", String.format(Messages.MESSAGE_RESIZE_VALUE_ERROR,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                ResizeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseFailure(parser, \" -2 -100\", String.format(Messages.MESSAGE_RESIZE_VALUE_ERROR,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                ResizeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseFailure(parser, \" 90 100 200\", String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                ResizeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseFailure(parser, \"\", String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                ResizeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kayheen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kayheen": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/RotateCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kayheen"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.commands.RotateCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kayheen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kayheen"
        },
        "content": " * This tests the various inputs that users can possibly input into the rotate command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kayheen"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kayheen"
        },
        "content": "public class RotateCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private RotateCommandParser parser \u003d new RotateCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public void parse_validArgs_returnsRotateCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseSuccess(parser, \" 90\", new RotateCommand(90));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseSuccess(parser, \" 180\", new RotateCommand(180));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseSuccess(parser, \" 270\", new RotateCommand(270));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseSuccess(parser, \" 150\", new RotateCommand(150));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseFailure(parser, \" abc\", String.format(Messages.MESSAGE_ROTATE_DEGREE_ERROR,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                RotateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseFailure(parser, \" 90.5\", String.format(Messages.MESSAGE_ROTATE_DEGREE_ERROR,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                RotateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseFailure(parser, \" -20\", String.format(Messages.MESSAGE_ROTATE_DEGREE_ERROR,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                RotateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseFailure(parser, \" 90 190\", String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                RotateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseFailure(parser, \"\", String.format(Messages.MESSAGE_ROTATE_DEGREE_ERROR,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                RotateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kayheen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kayheen": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/image/HeightTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address.model.image;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class HeightTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Height(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void constructor_invalidHeight_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String invalidHeight \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, () -\u003e new Height(invalidHeight));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void isValidHeight() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "        // null height"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, () -\u003e Height.isValidHeight(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "        // invalid height"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, () -\u003e Height.isValidHeight(\"\")); //empty height"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, () -\u003e Height.isValidHeight(\" \")); //spaces height"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, () -\u003e Height.isValidHeight(\"NaN\")); //bot a number"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertFalse(Height.isValidHeight(\"0\")); // zero height"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertFalse(Height.isValidHeight(Integer.toString(Integer.MIN_VALUE))); // negative value"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": "        // valid height"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertTrue(Height.isValidHeight(\"1\")); // minimum positive value"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertTrue(Height.isValidHeight(Integer.toString(Integer.MAX_VALUE))); // positive value"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/image/ImageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address.model.image;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.util.OptionalDouble;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.logic.commands.BrightnessCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class ImageTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private Image image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private Command brightnessCommand \u003d new BrightnessCommand(OptionalDouble.empty());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void test_constructor_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": "        image \u003d new Image(\"src/main/resources/imageTest/valid/validPNGTest.png\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/model/image/NameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address.model.image;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null, null, null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName, invalidName, invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidExtension(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertFalse(Name.isValidExtension(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertFalse(Name.isValidExtension(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertFalse(Name.isValidExtension(\"sample.txt\")); // invalid file format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertFalse(Name.isValidExtension(\"sample.\")); // missing extensions"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertFalse(Name.isValidExtension(\"sample\")); // raw name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertTrue(Name.isValidExtension(\"sample.jpg\")); // JPG format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertTrue(Name.isValidExtension(\"sample.tiff\")); // TIFF format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertTrue(Name.isValidExtension(\"sample.bmp\")); // BMP format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertTrue(Name.isValidExtension(\"sample.gif\")); // GIF format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertTrue(Name.isValidExtension(\"sample.png\")); // PNG format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/model/image/SizeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address.model.image;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class SizeTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Size(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void constructor_invalidSize_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String invalidSize \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, () -\u003e new Size(invalidSize));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void isValidSize() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "        // null width"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, () -\u003e Size.isValidSize(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "        // invalid width"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, () -\u003e Size.isValidSize(\"\")); //empty size"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, () -\u003e Size.isValidSize(\" \")); //spaces size"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, () -\u003e Size.isValidSize(\"NaN\")); //not a number"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertFalse(Size.isValidSize(\"0\")); // zero size"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertFalse(Size.isValidSize(Integer.toString(Integer.MIN_VALUE))); // negative value"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertTrue(Size.isValidSize(Integer.toString(Integer.MAX_VALUE))); // value over 100mb"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": "        // valid size"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertTrue(Size.isValidSize(\"1\")); // minimum positive size"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertTrue(Size.isValidSize(\"100000000\")); // maximum positive size"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/image/WidthTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address.model.image;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class WidthTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Width(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void constructor_invalidWidth_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String invalidWidth \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, () -\u003e new Width(invalidWidth));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void isValidWidth() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "        // null width"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, () -\u003e Width.isValidWidth(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "        // invalid width"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, () -\u003e Width.isValidWidth(\"\")); //empty width"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, () -\u003e Width.isValidWidth(\" \")); //spaces width"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, () -\u003e Width.isValidWidth(\"NaN\")); //not a number"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertFalse(Width.isValidWidth(\"0\")); // zero width"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertFalse(Width.isValidWidth(Integer.toString(Integer.MIN_VALUE))); // negative value"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": "        // valid width"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertTrue(Width.isValidWidth(\"1\")); // minimum positive value"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertTrue(Width.isValidWidth(Integer.toString(Integer.MAX_VALUE))); // positive value"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private SimpleObjectProperty\u003cPerson\u003e selectedPerson \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "    //private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "   */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "/* @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel(selectedPerson));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // default web page"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // associated web page of a person"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e selectedPerson.set(ALICE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedPersonUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + ALICE.getName().fullName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }*//*"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrein"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "carrein": 7,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d ClearCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ArrayList\u003cString\u003e history \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(commandText -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandText.equals(COMMAND_THAT_SUCCEEDS)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                return new CommandResult(\"Command successful\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(\"Command failed\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }, history);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String thirdCommand \u003d \"clear\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 3,
      "-": 156
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/MainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEditManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager(jsonAddressBookStorage, jsonUserPrefsStorage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new LogicManager(new ModelManager(), storageManager,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": "                new CurrentEditManager()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_menuBarExitButton_allWindowsClosed() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuHelpButton();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the \u0027X\u0027 button on"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * Opens the {@code HelpWindow} by clicking on the menu bar\u0027s help button."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuHelpButton() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Help\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"F1\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 1,
      "-": 97,
      "thamsimun": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.ui.PersonCard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).forEach(tag -\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                assertEquals(Arrays.asList(\"label\", PersonCard.getTagColourStyleFor(tag)),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                        actualCard.getTagStyleClasses(tag)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.length; i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        int numberOfPeople \u003d personListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kayheen": 5,
      "-": 73
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": "//import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": "//import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "//import java.net.URL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "//import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrein"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "carrein"
        },
        "content": "        //waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /* public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "carrein"
        },
        "content": "        //waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the person list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(expectedModel.getAddressBook()), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "carrein"
        },
        "content": "        //getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url is now displaying the"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * default page."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /*    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /*    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            getPersonListPanel().navigateToCard(getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            URL expectedUrl;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "carrein"
        },
        "content": "        //assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "carrein"
        },
        "content": "        //assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 19,
      "-": 253
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CLEAR_SUCCESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo clearing address book -\u003e original address book restored */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo clearing address book -\u003e cleared */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before clearing -\u003e entire address book cleared */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertCommandSuccess(command, MESSAGE_CLEAR_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 4,
      "-": 93
    }
  },
  {
    "path": "src/test/java/systemtests/ClockRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * This rule makes the time stamp in the status bar predictable during a test."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Before the test starts, the rule replaces the clock in the status bar with a fixed clock."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * At the end of the test, the rule restores the original clock."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Clock#fixed(Instant, ZoneId)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClockRule implements TestRule {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Clock injectedClock;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void before() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                before();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Clock getInjectedClock() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return injectedClock;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the clock in the status bar with a fixed clock having the current time as its instance."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setInjectedClockToCurrentTime() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 3,
      "-": 57
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().click();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": "        /*        getBrowserPanel().click();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrein"
        },
        "content": "                getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrein"
        },
        "content": "                assertHelpWindowNotOpen();*/"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "carrein"
        },
        "content": "        //assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 7,
      "-": 90
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Predicate\u003cPerson\u003e PREDICATE_MATCHING_NO_PERSONS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setFilteredList(Model model, List\u003cPerson\u003e toDisplay) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cPredicate\u003cPerson\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate.orElse(PREDICATE_MATCHING_NO_PERSONS));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setFilteredList(Model model, Person... toDisplay) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Person} equals to {@code other}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Predicate\u003cPerson\u003e getPredicateMatching(Person other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return person -\u003e person.equals(other);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 4,
      "-": 39
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBook_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Person[] expectedList \u003d SampleDataUtil.getSamplePersons();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 2,
      "-": 51
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyAddressBook\u003e addressBook, Path saveFileLocation) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(addressBook, saveFileLocation));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 3,
      "-": 74
    }
  }
]
